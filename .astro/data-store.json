[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.13.7","content-config-digest","55860a7c4102fd71","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://blog.ozenc.dev\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"staticImportMetaEnv\":false,\"chromeDevtoolsWorkspace\":false},\"legacy\":{\"collections\":false}}","article",["Map",11,12,34,35,55,56,89,90,126,127,154,155,179,180,205,206,234,235,264,265,365,366,383,384,398,399,63,440],"advent-of-code-intro",{"id":11,"data":13,"body":20,"filePath":21,"digest":22,"rendered":23,"legacyId":33},{"title":14,"draft":15,"pubDate":16,"tags":17},"Advent of Code: Intro",true,["Date","2023-07-14T00:00:00.000Z"],[18,19],"advent-of-code","advent-of-code-2015","Rust, Haskell, OCaml, Elixir, Golang... I want to learn them all. But going through docs or books is not always that much fun, and I want to keep the learning journey fun.\n\nI decided to use [Advent Of Code](https://adventofcode.com/) puzzles as the bedrock for language learning; dedicating each event year to one language and documenting everything in a long series of blog posts as I go about solving these puzzles. This should provide a decent introduction to the language as solving these require knowing the fundamentals of the language; variables, types, methods, structs, control flow, error handling, loops, maybe even file operations and data processing. They do not seem to take you to other important subjects like async programming, network operations, 3rd party packages etc., but I can always do some extra projects for these if I end up liking the language.\n\nI intend to learn the specifics about the language with simple searches to keep it concise.\n\nThe code will live in [this repo](https://github.com/Ozencb/aoc).\n\nThe first language of choice is Rust, and I will start from the 2015 event. On to learning!","src/content/article/advent-of-code/intro.md","a3233cad8eac1f89",{"html":24,"metadata":25},"\u003Cp>Rust, Haskell, OCaml, Elixir, Golang… I want to learn them all. But going through docs or books is not always that much fun, and I want to keep the learning journey fun.\u003C/p>\n\u003Cp>I decided to use \u003Ca href=\"https://adventofcode.com/\">Advent Of Code\u003C/a> puzzles as the bedrock for language learning; dedicating each event year to one language and documenting everything in a long series of blog posts as I go about solving these puzzles. This should provide a decent introduction to the language as solving these require knowing the fundamentals of the language; variables, types, methods, structs, control flow, error handling, loops, maybe even file operations and data processing. They do not seem to take you to other important subjects like async programming, network operations, 3rd party packages etc., but I can always do some extra projects for these if I end up liking the language.\u003C/p>\n\u003Cp>I intend to learn the specifics about the language with simple searches to keep it concise.\u003C/p>\n\u003Cp>The code will live in \u003Ca href=\"https://github.com/Ozencb/aoc\">this repo\u003C/a>.\u003C/p>\n\u003Cp>The first language of choice is Rust, and I will start from the 2015 event. On to learning!\u003C/p>",{"headings":26,"localImagePaths":27,"remoteImagePaths":28,"frontmatter":29,"imagePaths":32},[],[],[],{"slug":11,"title":14,"pubDate":30,"draft":15,"tags":31},"2023-07-14",[18,19],[],"advent-of-code/intro.md","rust-traits",{"id":34,"data":36,"filePath":42,"digest":43,"rendered":44,"legacyId":54},{"title":37,"description":38,"draft":15,"pubDate":39,"tags":40},"Traits","Rust Fever",["Date","2023-07-19T00:00:00.000Z"],[41],"rust","src/content/article/rust/traits.md","db2e8c605f26a5c4",{"html":45,"metadata":46},"",{"headings":47,"localImagePaths":48,"remoteImagePaths":49,"frontmatter":50,"imagePaths":53},[],[],[],{"slug":34,"title":37,"description":38,"pubDate":51,"draft":15,"tags":52},"2023-07-19",[41],[],"rust/traits.md","proxmox-mount-points",{"id":55,"data":57,"body":64,"filePath":65,"digest":66,"rendered":67,"legacyId":88},{"title":58,"draft":59,"pubDate":60,"tags":61},"Sharing mountpoints on unprivileged Proxmox LXCs",false,["Date","2023-07-12T00:00:00.000Z"],[62,63],"proxmox","homelab","Unprivileged LXCs' increased security and isolation, unfortunately, bring about some difficulties when sharing resources between the host and the guest. This issue often shows up as `Permission denied` or `Operation not permitted` errors when trying to access a directory on the host. Usual battle tactics like `chown` and `chmod` make no difference. One could resort to pure network-based solutions, but that’s not really efficient. Fortunately, it is possible to map a guest user’s UID/GID to that of the host by creating another user on the host with the right settings and permissions.\n\n## Binding mountpoints\n\nBind mounts allow us to access previously mounted directories from a different location in [POSIX](https://en.wikipedia.org/wiki/POSIX) systems. Proxmox can bind mount points between the host and the guest either by running this command:\n\n```\npct set \u003CCONTAINER_ID> -mp0 \u003CABSOLUTE_PATH_ON_HOST>,mp=\u003CABSOLUTE_PATH_ON_GUEST>\n```\n\nor by adding this line to the LXC config file under `/etc/pve/lxc/\u003CCONTAINER_ID>.conf` on the host:\n\n```\nmp0: \u003CABSOLUTE_PATH_ON_HOST>,mp=\u003CABSOLUTE_PATH_ON_GUEST>\n```\n\nThis will allow you to access the host’s shared directory from the container, but the contents will only be readable. For full access, we need to `chown` the mounted directory on the host with the correct UID/GID.\n\n## Ownership\n\nBy default, unprivileged LXCs map guest system users on the host by applying an offset, usually starting at `100000`. This mapping comes from `/etc/subuid` and `/etc/subgid` on the host. Proxmox typically uses `100000` as the starting offset, but it can differ depending on your setup.\n\nFor example, `root` inside the container (`0:0`) is mapped to `100000:100000` on the host. Likewise, guest UID/GID `1:1` becomes `100001:100001` on the host.\n\nSo, if all we need is for the container’s `root` user to access the mount point, we can run this on the host:\n\n```\nchown 100000:100000 \u003CMOUNT_POINT_ON_HOST> -R\n```\n\nFor other users, the general formula is:\n\n```\nHost UID/GID = Guest UID/GID + OFFSET\n```\n\n(where `OFFSET` is usually `100000` but may vary).\n\nFor example, if you create a user inside the guest with UID `1000`:\n\n```\n# On the guest\nuseradd -u 1000 new-user-name\n```\n\nthen on the host, this user will appear as UID `101000` (assuming the `100000` offset). To give proper ownership, you need to run:\n\n```\n# On the host\nchown 101000:101000 \u003CMOUNT_POINT_ON_HOST> -R\n```\n\n> Note: If you want host users and container users to share the exact same UID/GID without the offset, you can configure custom ID mappings in the LXC config using `lxc.idmap`, but that requires extra setup.\n\n#### Sources\n\n- https://itsembedded.com/sysadmin/proxmox_bind_unprivileged_lxc/","src/content/article/homelab/proxmox/proxmox-mount-points.md","cff9669d61539675",{"html":68,"metadata":69},"\u003Cp>Unprivileged LXCs’ increased security and isolation, unfortunately, bring about some difficulties when sharing resources between the host and the guest. This issue often shows up as \u003Ccode>Permission denied\u003C/code> or \u003Ccode>Operation not permitted\u003C/code> errors when trying to access a directory on the host. Usual battle tactics like \u003Ccode>chown\u003C/code> and \u003Ccode>chmod\u003C/code> make no difference. One could resort to pure network-based solutions, but that’s not really efficient. Fortunately, it is possible to map a guest user’s UID/GID to that of the host by creating another user on the host with the right settings and permissions.\u003C/p>\n\u003Ch2 id=\"binding-mountpoints\">Binding mountpoints\u003C/h2>\n\u003Cp>Bind mounts allow us to access previously mounted directories from a different location in \u003Ca href=\"https://en.wikipedia.org/wiki/POSIX\">POSIX\u003C/a> systems. Proxmox can bind mount points between the host and the guest either by running this command:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>pct set &#x3C;CONTAINER_ID> -mp0 &#x3C;ABSOLUTE_PATH_ON_HOST>,mp=&#x3C;ABSOLUTE_PATH_ON_GUEST>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>or by adding this line to the LXC config file under \u003Ccode>/etc/pve/lxc/&#x3C;CONTAINER_ID>.conf\u003C/code> on the host:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>mp0: &#x3C;ABSOLUTE_PATH_ON_HOST>,mp=&#x3C;ABSOLUTE_PATH_ON_GUEST>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This will allow you to access the host’s shared directory from the container, but the contents will only be readable. For full access, we need to \u003Ccode>chown\u003C/code> the mounted directory on the host with the correct UID/GID.\u003C/p>\n\u003Ch2 id=\"ownership\">Ownership\u003C/h2>\n\u003Cp>By default, unprivileged LXCs map guest system users on the host by applying an offset, usually starting at \u003Ccode>100000\u003C/code>. This mapping comes from \u003Ccode>/etc/subuid\u003C/code> and \u003Ccode>/etc/subgid\u003C/code> on the host. Proxmox typically uses \u003Ccode>100000\u003C/code> as the starting offset, but it can differ depending on your setup.\u003C/p>\n\u003Cp>For example, \u003Ccode>root\u003C/code> inside the container (\u003Ccode>0:0\u003C/code>) is mapped to \u003Ccode>100000:100000\u003C/code> on the host. Likewise, guest UID/GID \u003Ccode>1:1\u003C/code> becomes \u003Ccode>100001:100001\u003C/code> on the host.\u003C/p>\n\u003Cp>So, if all we need is for the container’s \u003Ccode>root\u003C/code> user to access the mount point, we can run this on the host:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>chown 100000:100000 &#x3C;MOUNT_POINT_ON_HOST> -R\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>For other users, the general formula is:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Host UID/GID = Guest UID/GID + OFFSET\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>(where \u003Ccode>OFFSET\u003C/code> is usually \u003Ccode>100000\u003C/code> but may vary).\u003C/p>\n\u003Cp>For example, if you create a user inside the guest with UID \u003Ccode>1000\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan># On the guest\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>useradd -u 1000 new-user-name\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>then on the host, this user will appear as UID \u003Ccode>101000\u003C/code> (assuming the \u003Ccode>100000\u003C/code> offset). To give proper ownership, you need to run:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan># On the host\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>chown 101000:101000 &#x3C;MOUNT_POINT_ON_HOST> -R\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cblockquote>\n\u003Cp>Note: If you want host users and container users to share the exact same UID/GID without the offset, you can configure custom ID mappings in the LXC config using \u003Ccode>lxc.idmap\u003C/code>, but that requires extra setup.\u003C/p>\n\u003C/blockquote>\n\u003Ch4 id=\"sources\">Sources\u003C/h4>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://itsembedded.com/sysadmin/proxmox_bind_unprivileged_lxc/\">https://itsembedded.com/sysadmin/proxmox_bind_unprivileged_lxc/\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":70,"localImagePaths":82,"remoteImagePaths":83,"frontmatter":84,"imagePaths":87},[71,75,78],{"depth":72,"slug":73,"text":74},2,"binding-mountpoints","Binding mountpoints",{"depth":72,"slug":76,"text":77},"ownership","Ownership",{"depth":79,"slug":80,"text":81},4,"sources","Sources",[],[],{"slug":55,"title":58,"pubDate":85,"draft":59,"tags":86},"2023-07-12",[62,63],[],"homelab/proxmox/proxmox-mount-points.md","advent-of-code-2015-05",{"id":89,"data":91,"body":96,"filePath":97,"digest":98,"rendered":99,"legacyId":125},{"title":92,"description":93,"draft":15,"pubDate":94,"tags":95},"The Ideal Stocking Stuffer","AoC 2015 with Rust - Day 5",["Date","2023-08-08T00:00:00.000Z"],[18,19,41],"##### [Link to problem](https://adventofcode.com/2015/day/5)\n##### [Source of the final solution](https://github.com/Ozencb/aoc/tree/main/aoc-2015-05)\n##### [Other posts in the series](/tags/advent-of-code)\n\n## Part 1\n\nSanta is trying to figure out which strings are naughty and which are nice.\n\nNice string rules:\n- Contains at least three vowels\n- Contains at least one letter that appears twice consecutively\n- Should not contain these strings: `ab`, `cd`, `pq`, `xy`\n\nI want to make a function for each rule, then check each string if it complies with all of these rules.\nAnd an extra challenge for myself: make it as functional as possible. No mutable arrays, no side-effects.\n\n\n```rust\nuse std::fs;\n\nfn has_consecutive_chars(text: &str) -> bool {\n    text.chars()\n        .collect::\u003CVec\u003C_>>()\n        .windows(2)\n        .any(|c| c[0] == c[1])\n}\n\nfn get_recurring_char_count(text: &str, char_set: &[char]) -> usize {\n    text.chars().filter(|c| char_set.contains(c)).count()\n}\n\nfn has_greater_number_of_vowels_than(text: &str, vowel_count: usize) -> bool {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    get_recurring_char_count(text, &vowels) >= vowel_count\n}\n\nfn contains_strings(text: &str, arr: &[&str]) -> bool {\n    arr.iter().any(|str| text.contains(str))\n}\n\nfn main() {\n    let forbidden_strings = [\"ab\", \"cd\", \"pq\", \"xy\"];\n    let filename = \"data.txt\";\n\n    let contents = fs::read_to_string(filename).expect(\"Something went wrong\");\n\n    let nice_string_count = contents\n        .lines()\n        .filter(|line| {\n            has_greater_number_of_vowels_than(line, 3)\n                && has_consecutive_chars(line)\n                && !contains_strings(line, &forbidden_strings)\n        })\n        .count();\n\n    println!(\"{:?}\", nice_string_count)\n}\n```\n\nThis all works nicely. I am still a new to the functional paradigm and I know that Rust wasn't designed with functional concepts in mind, but it is fun nonetheless. \n\nI want to keep introducing more functional concepts in these blog series as I learn more about it in the future.\n\n## Part 2\n\nFor part two, we will have to make some significant changes to our code because the rules for deciding whether a string is nice or not are all different now.\n\nA nice string must now have both:\n- Pair/pairs of of non-overlapping letters appearing more than once .It can be `xyxy` because it has two `xy`s, or `aabcdaa` because it has a pair of `aa`s in it. But `aaa` does not satisfy the requirement because the `a` in the middle overlaps with two different `aa` pairs.\n- A letter that repeats itself with another letter between them, like `xyx` or `bcb` or `aaa`","src/content/article/advent-of-code/2015-05.md","8a6c194398de0a4a",{"html":100,"metadata":101},"\u003Ch5 id=\"link-to-problem\">\u003Ca href=\"https://adventofcode.com/2015/day/5\">Link to problem\u003C/a>\u003C/h5>\n\u003Ch5 id=\"source-of-the-final-solution\">\u003Ca href=\"https://github.com/Ozencb/aoc/tree/main/aoc-2015-05\">Source of the final solution\u003C/a>\u003C/h5>\n\u003Ch5 id=\"other-posts-in-the-series\">\u003Ca href=\"/tags/advent-of-code\">Other posts in the series\u003C/a>\u003C/h5>\n\u003Ch2 id=\"part-1\">Part 1\u003C/h2>\n\u003Cp>Santa is trying to figure out which strings are naughty and which are nice.\u003C/p>\n\u003Cp>Nice string rules:\u003C/p>\n\u003Cul>\n\u003Cli>Contains at least three vowels\u003C/li>\n\u003Cli>Contains at least one letter that appears twice consecutively\u003C/li>\n\u003Cli>Should not contain these strings: \u003Ccode>ab\u003C/code>, \u003Ccode>cd\u003C/code>, \u003Ccode>pq\u003C/code>, \u003Ccode>xy\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Cp>I want to make a function for each rule, then check each string if it complies with all of these rules.\nAnd an extra challenge for myself: make it as functional as possible. No mutable arrays, no side-effects.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">fs;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> has_consecutive_chars\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(text\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> bool\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    text\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">chars\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">collect\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;_>>()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">windows\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">any\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">c\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> c[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> c[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">])\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> get_recurring_char_count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(text\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, char_set\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#B392F0\">char\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> usize\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    text\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">chars\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">filter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">c\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> char_set\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">contains\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(c))\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> has_greater_number_of_vowels_than\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(text\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, vowel_count\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> usize\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> bool\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> vowels \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'a'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'e'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'i'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'o'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'u'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    get_recurring_char_count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(text, \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">vowels) \u003C/span>\u003Cspan style=\"color:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> vowel_count\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> contains_strings\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(text\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, arr\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> bool\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    arr\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">iter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">any\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#B392F0\">str\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> text\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">contains\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> forbidden_strings \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"ab\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"cd\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"pq\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"xy\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> filename \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"data.txt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> fs\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">read_to_string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(filename)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Something went wrong\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> nice_string_count \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">lines\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">filter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">line\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">            has_greater_number_of_vowels_than\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(line, \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\"> has_consecutive_chars\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(line)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#F97583\"> !\u003C/span>\u003Cspan style=\"color:#B392F0\">contains_strings\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(line, \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">forbidden_strings)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{:?}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, nice_string_count)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This all works nicely. I am still a new to the functional paradigm and I know that Rust wasn’t designed with functional concepts in mind, but it is fun nonetheless.\u003C/p>\n\u003Cp>I want to keep introducing more functional concepts in these blog series as I learn more about it in the future.\u003C/p>\n\u003Ch2 id=\"part-2\">Part 2\u003C/h2>\n\u003Cp>For part two, we will have to make some significant changes to our code because the rules for deciding whether a string is nice or not are all different now.\u003C/p>\n\u003Cp>A nice string must now have both:\u003C/p>\n\u003Cul>\n\u003Cli>Pair/pairs of of non-overlapping letters appearing more than once .It can be \u003Ccode>xyxy\u003C/code> because it has two \u003Ccode>xy\u003C/code>s, or \u003Ccode>aabcdaa\u003C/code> because it has a pair of \u003Ccode>aa\u003C/code>s in it. But \u003Ccode>aaa\u003C/code> does not satisfy the requirement because the \u003Ccode>a\u003C/code> in the middle overlaps with two different \u003Ccode>aa\u003C/code> pairs.\u003C/li>\n\u003Cli>A letter that repeats itself with another letter between them, like \u003Ccode>xyx\u003C/code> or \u003Ccode>bcb\u003C/code> or \u003Ccode>aaa\u003C/code>\u003C/li>\n\u003C/ul>",{"headings":102,"localImagePaths":119,"remoteImagePaths":120,"frontmatter":121,"imagePaths":124},[103,107,110,113,116],{"depth":104,"slug":105,"text":106},5,"link-to-problem","Link to problem",{"depth":104,"slug":108,"text":109},"source-of-the-final-solution","Source of the final solution",{"depth":104,"slug":111,"text":112},"other-posts-in-the-series","Other posts in the series",{"depth":72,"slug":114,"text":115},"part-1","Part 1",{"depth":72,"slug":117,"text":118},"part-2","Part 2",[],[],{"slug":89,"title":92,"description":93,"pubDate":122,"draft":15,"tags":123},"2023-08-08",[18,19,41],[],"advent-of-code/2015-05.md","obsidian-sync-blog",{"id":126,"data":128,"body":132,"filePath":133,"digest":134,"rendered":135,"legacyId":153},{"title":129,"description":130,"draft":59,"pubDate":131},"How I publish on my blog with Obsidian","...without Obsidian Blog or Obsidian Sync",["Date","2025-09-13T00:00:00.000Z"],"I set up this blog a long time ago, hoping it would push me to write more. It has not. But over time, I kept coming up with “blog ideas” and I remember writing being so much fun, so I decided to revisit the project and make publishing a little smoother.\n\nWhen I first started with this blog, I wanted a statically built, JavaScript-free blog with no backend dependencies. I made that work using Markdown files as the content source and the Astro framework for static generation ([source code here](https://github.com/ozencb/blog.ozenc.dev)). All the content lives alongside the source code, which keeps things simple. Vercel watches the repo for changes and automatically deploys updates.\n\nThis setup works fine. I rarely go a day without access to my PC, and even if I do, writing or editing blog posts is never urgent. Still, I often find myself tinkering with new setups to solve problems that don’t really exist. So, here’s my “improved” version.\n\n---\n\n## Enter Obsidian\n\nSince 2023, when I first set up my blog, Obsidian has become my only note-taking app. On my iOS devices and MacBook I pointed Obsidian to iCloud, so syncing between devices is seamless and free. I also set up a private GitHub repository for my vault with the [obsidian-git plugin](https://github.com/Vinzent03/obsidian-git) running on my PC for extra backup. Unfortunately, this plugin cannot be run on iOS devices since git cannot be easily installed on them. Solutions do exist, but they are finnicky.\n\nBecause Obsidian is always available on all my devices and works perfectly with Markdown, I thought I could use it for writing and publishing blog posts too? It could serve as the single source of truth for my writing, and then I’d just need a way to push posts into the blog repo. Obsidian has blogging and publishing features if you're willing to pay some money, but costs aside, using them would mean locking myself to a single platform.\n\n---\n\n## Automating the process\n\nTo make this work, I wrote a simple GitHub Action. It watches the `websites/blog.ozenc.dev` folder inside my Obsidian vault repo. When something changes, the workflow pushes updates into the blog repo, which then triggers the usual Astro build and deployment. If this whole thing works fine, I will probably use Obsidian as the primary source of data for my other statically built websites. At that point, I would just add a new folder within `websites` folder and add a new workflow for it to do its thing.\n\n```\nObsidian --Sync--> Obsidian Vault Repo --Push--> Blog Repo --Deploy with Vercel--> blog.ozenc.dev\n```\n\nHere’s the workflow in full:\n\n```yaml\n# Pushes files from Obsidian vault to blog repo\nname: Sync vault -> blog\n\non:\n  push:\n    # only run when blog notes change\n    paths:\n      - \"websites/blog.ozenc.dev/**\"\n\njobs:\n  sync:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout obsidian repo (source)\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Install rsync (for safe sync)\n        run: sudo apt-get update && sudo apt-get install -y rsync\n\n      - name: Clone target blog repo\n        env:\n          # create a fine grained PAT content write/read permissions, and set it as a secret on Obsidian vault repo\n          TARGET_PAT: ${{ secrets.TARGET_REPO_PAT }}\n        run: |\n          # adjust target repo URL and branch\n          git clone https://x-access-token:${TARGET_PAT}@github.com/ozencb/blog.ozenc.dev.git /tmp/astro\n          cd /tmp/astro\n          git checkout main\n\n      - name: Sync vault to blog repo\n        run: |\n          # copy & delete to make destination mirror source subfolder\n          rsync -av --delete --exclude=\".git\" ./websites/blog.ozenc.dev/ /tmp/astro/src/content/article/\n\n      - name: Commit & push to blog repo\n        run: |\n          cd /tmp/astro\n          git add src/content/article\n          if git diff --staged --quiet; then\n            echo \"No content changes to push.\"\n            exit 0\n          fi\n          git -c user.name=\"obsidian-sync-bot\" -c user.email=\"obsidian-sync-bot@users.noreply.github.com\" commit -m \"Sync blog from obsidian: $GITHUB_SHA\"\n          git push origin main\n```\n\nAnd that is pretty much it. If anything under `websites/blog.ozenc.dev` changes, the workflow triggers automatically and pushes these changes to the blog repository, which also triggers its own workflow.\n\nThis works well, with some limitations:\n\n- It still requires my PC to be on and Obsidian running so the obsidian-git plugin can commit changes.\n- Some Obsidian specific markdown syntax (like backlinks, image references) is not compatible with Astro. I have to manually correct some of these.\n- Everything is a bit asynchronous\n\nanother caveat that I won't likely face is:\n\n- No one can contribute to articles through usual git processes, since my Vault is private and `articles` folder on `blog.ozenc.dev` repo gets replaced every time.\n\n---\n\n## What’s next?\n\nIn the future, I want to remove my PC from the equation so updates can be pushed without Obsidian (and git plugin) running on it. A couple of ideas:\n\n- **iCloud sync or Syncthing:** Use `rclone` on my home serer to pull vault files directly from iCloud to the server periodically OR use Syncthing to sync vault across devices (with [Synctrain](https://apps.apple.com/dk/app/synctrain/id6553985316) on iOS).\n- **Push job:** Set up a file watcher or cron job to push updates to the vault repo.\n\nI have access to the articles pretty much everywhere. Single app, no extra manual work, just writing (and waiting for the thing to trigger). Good enough","src/content/article/obsidian/obsidian-sync.md","8a839dc12af48712",{"html":136,"metadata":137},"\u003Cp>I set up this blog a long time ago, hoping it would push me to write more. It has not. But over time, I kept coming up with “blog ideas” and I remember writing being so much fun, so I decided to revisit the project and make publishing a little smoother.\u003C/p>\n\u003Cp>When I first started with this blog, I wanted a statically built, JavaScript-free blog with no backend dependencies. I made that work using Markdown files as the content source and the Astro framework for static generation (\u003Ca href=\"https://github.com/ozencb/blog.ozenc.dev\">source code here\u003C/a>). All the content lives alongside the source code, which keeps things simple. Vercel watches the repo for changes and automatically deploys updates.\u003C/p>\n\u003Cp>This setup works fine. I rarely go a day without access to my PC, and even if I do, writing or editing blog posts is never urgent. Still, I often find myself tinkering with new setups to solve problems that don’t really exist. So, here’s my “improved” version.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"enter-obsidian\">Enter Obsidian\u003C/h2>\n\u003Cp>Since 2023, when I first set up my blog, Obsidian has become my only note-taking app. On my iOS devices and MacBook I pointed Obsidian to iCloud, so syncing between devices is seamless and free. I also set up a private GitHub repository for my vault with the \u003Ca href=\"https://github.com/Vinzent03/obsidian-git\">obsidian-git plugin\u003C/a> running on my PC for extra backup. Unfortunately, this plugin cannot be run on iOS devices since git cannot be easily installed on them. Solutions do exist, but they are finnicky.\u003C/p>\n\u003Cp>Because Obsidian is always available on all my devices and works perfectly with Markdown, I thought I could use it for writing and publishing blog posts too? It could serve as the single source of truth for my writing, and then I’d just need a way to push posts into the blog repo. Obsidian has blogging and publishing features if you’re willing to pay some money, but costs aside, using them would mean locking myself to a single platform.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"automating-the-process\">Automating the process\u003C/h2>\n\u003Cp>To make this work, I wrote a simple GitHub Action. It watches the \u003Ccode>websites/blog.ozenc.dev\u003C/code> folder inside my Obsidian vault repo. When something changes, the workflow pushes updates into the blog repo, which then triggers the usual Astro build and deployment. If this whole thing works fine, I will probably use Obsidian as the primary source of data for my other statically built websites. At that point, I would just add a new folder within \u003Ccode>websites\u003C/code> folder and add a new workflow for it to do its thing.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Obsidian --Sync--> Obsidian Vault Repo --Push--> Blog Repo --Deploy with Vercel--> blog.ozenc.dev\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Here’s the workflow in full:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"yaml\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Pushes files from Obsidian vault to blog repo\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">Sync vault -> blog\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">on\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    # only run when blog notes change\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    paths\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"websites/blog.ozenc.dev/**\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">jobs\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  sync\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    runs-on\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">ubuntu-latest\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    steps\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#85E89D\">name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">Checkout obsidian repo (source)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">        uses\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">actions/checkout@v4\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">        with\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">          fetch-depth\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#85E89D\">name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">Install rsync (for safe sync)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">        run\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">sudo apt-get update &#x26;&#x26; sudo apt-get install -y rsync\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#85E89D\">name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">Clone target blog repo\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">        env\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">          # create a fine grained PAT content write/read permissions, and set it as a secret on Obsidian vault repo\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">          TARGET_PAT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">${{ secrets.TARGET_REPO_PAT }}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">        run\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">          # adjust target repo URL and branch\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">          git clone https://x-access-token:${TARGET_PAT}@github.com/ozencb/blog.ozenc.dev.git /tmp/astro\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">          cd /tmp/astro\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">          git checkout main\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#85E89D\">name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">Sync vault to blog repo\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">        run\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">          # copy &#x26; delete to make destination mirror source subfolder\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">          rsync -av --delete --exclude=\".git\" ./websites/blog.ozenc.dev/ /tmp/astro/src/content/article/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#85E89D\">name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">Commit &#x26; push to blog repo\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">        run\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">          cd /tmp/astro\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">          git add src/content/article\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">          if git diff --staged --quiet; then\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">            echo \"No content changes to push.\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">            exit 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">          fi\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">          git -c user.name=\"obsidian-sync-bot\" -c user.email=\"obsidian-sync-bot@users.noreply.github.com\" commit -m \"Sync blog from obsidian: $GITHUB_SHA\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">          git push origin main\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>And that is pretty much it. If anything under \u003Ccode>websites/blog.ozenc.dev\u003C/code> changes, the workflow triggers automatically and pushes these changes to the blog repository, which also triggers its own workflow.\u003C/p>\n\u003Cp>This works well, with some limitations:\u003C/p>\n\u003Cul>\n\u003Cli>It still requires my PC to be on and Obsidian running so the obsidian-git plugin can commit changes.\u003C/li>\n\u003Cli>Some Obsidian specific markdown syntax (like backlinks, image references) is not compatible with Astro. I have to manually correct some of these.\u003C/li>\n\u003Cli>Everything is a bit asynchronous\u003C/li>\n\u003C/ul>\n\u003Cp>another caveat that I won’t likely face is:\u003C/p>\n\u003Cul>\n\u003Cli>No one can contribute to articles through usual git processes, since my Vault is private and \u003Ccode>articles\u003C/code> folder on \u003Ccode>blog.ozenc.dev\u003C/code> repo gets replaced every time.\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"whats-next\">What’s next?\u003C/h2>\n\u003Cp>In the future, I want to remove my PC from the equation so updates can be pushed without Obsidian (and git plugin) running on it. A couple of ideas:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>iCloud sync or Syncthing:\u003C/strong> Use \u003Ccode>rclone\u003C/code> on my home serer to pull vault files directly from iCloud to the server periodically OR use Syncthing to sync vault across devices (with \u003Ca href=\"https://apps.apple.com/dk/app/synctrain/id6553985316\">Synctrain\u003C/a> on iOS).\u003C/li>\n\u003Cli>\u003Cstrong>Push job:\u003C/strong> Set up a file watcher or cron job to push updates to the vault repo.\u003C/li>\n\u003C/ul>\n\u003Cp>I have access to the articles pretty much everywhere. Single app, no extra manual work, just writing (and waiting for the thing to trigger). Good enough\u003C/p>",{"headings":138,"localImagePaths":148,"remoteImagePaths":149,"frontmatter":150,"imagePaths":152},[139,142,145],{"depth":72,"slug":140,"text":141},"enter-obsidian","Enter Obsidian",{"depth":72,"slug":143,"text":144},"automating-the-process","Automating the process",{"depth":72,"slug":146,"text":147},"whats-next","What’s next?",[],[],{"slug":126,"title":129,"pubDate":151,"draft":59,"description":130},["Date","2025-09-13T00:00:00.000Z"],[],"obsidian/obsidian-sync.md","advent-of-code-2015-04",{"id":154,"data":156,"body":160,"filePath":161,"digest":162,"rendered":163,"legacyId":178},{"title":92,"description":157,"draft":15,"pubDate":158,"tags":159},"AoC 2015 with Rust - Day 4",["Date","2023-07-29T00:00:00.000Z"],[18,19,41],"##### [Link to problem](https://adventofcode.com/2015/day/4)\n##### [Source of the final solution](https://github.com/Ozencb/aoc/tree/main/aoc-2015-04)\n##### [Other posts in the series](/tags/advent-of-code)\n\n## Part 1\n\nSanta is mining coins. He is trying to find MD5 hashes that start with 5 zeroes. An input of a secret key followed by a number that produces such a hash is valid, and Santa needs to find the lowest possible number of such hashes. \n\nFor example, \n\n\n- If your secret key is `abcdef`, the answer is `609043`, because the MD5 hash of `abcdef609043` starts with five zeroes (`000001dbbfa...`), and it is the lowest such number to do so.\n- If your secret key is `pqrstuv`, the lowest number it combines with to make an MD5 hash starting with five zeroes is `1048970`; that is, the MD5 hash of `pqrstuv1048970` looks like `000006136ef....`\n\nThe idea is to make a loop with a counter starting from 0, add the value of this counter to the secret key (input), and hash the concatenated string. If the hash starts with five zeroes, break the loop and check the counter to get the result.\n\n\nI don't want to implement MD5 myself, so I added a crate by running `cargo add md5`.\n\n```\n[dependencies]\nmd5 = \"0.7.0\"\n```\n\nI put together something like this as the solution for the part 1 but it kept running for so long.\n\n```rust\nuse md5;\n\nfn main() {\n    let base_input = \"iwrupvqb\";\n    let mut counter = 0;\n\n    let result = loop {\n        let hash = md5::compute(format!(\"{}{}\", base_input, counter));\n\n        if hash.starts_with(b\"00000\") {\n            break counter;\n        }\n\n        counter = counter + 1;\n    };\n\n    println!(\"{:?}\", result);\n}\n```\n\nGiven that [AoC about page](https://adventofcode.com/about) has the following statement, I know that I am not on the right track.\n\n> You don't need a computer science background to participate - just a little programming knowledge and some problem solving skills will get you pretty far. Nor do you need a fancy computer; every problem has a solution that completes in at most 15 seconds on ten-year-old hardware.\n\nI was expecting this to be a lot faster because when I printed out the counter on each iteration, I could see that it was going through numbers really fast. \n\nI went about debugging the code by printing `hash` and `b\"00000\"`, and could see that the two was not producing exactly the same data. Since the break condition never met, the loop went on running forever.\n\nInstead, I decided to format the hash as a string, which produced a healthier comparison.\n\n```rust\nuse md5;\n\nfn main() {\n    let base_input = \"iwrupvqb\";\n    let mut counter = 0;\n\n    let result = loop {\n        let hash = md5::compute(format!(\"{}{}\", base_input, counter));\n\n        if format!(\"{:?}\", hash).starts_with(\"00000\") {\n            break counter;\n        }\n\n        counter = counter + 1;\n    };\n\n    println!(\"{:?}\", result);\n}\n```\n\nAnd this worked a lot quicker and the first part of the puzzle is done.\n\n## Part 2\n\nFor part two, we need to do the same thing but with six zeroes. Simply changing `.starts_with(\"00000\")` part with `.starts_with(\"000000\")` with works, although a bit slower. But, we can do a minor improvement and use some sort of repeating pattern to change the number of zeroes, and put the logic in some sort of function.\n\n```rust\nuse md5;\n\nfn produce_hash(base_input: &str, target_prefix: String) -> i32 {\n    let mut counter = 0;\n\n    return loop {\n        let hash = md5::compute(format!(\"{}{}\", base_input, counter));\n\n        if format!(\"{:?}\", hash).starts_with(&target_prefix) {\n            break counter;\n        }\n\n        counter = counter + 1;\n    };\n}\n\nfn main() {\n    let base_input = \"iwrupvqb\";\n\n    println!(\"{:?}\", produce_hash(base_input, \"0\".repeat(5)));\n    println!(\"{:?}\", produce_hash(base_input, \"0\".repeat(6)));\n}\n```","src/content/article/advent-of-code/2015-04.md","f0fa8afefac8199f",{"html":164,"metadata":165},"\u003Ch5 id=\"link-to-problem\">\u003Ca href=\"https://adventofcode.com/2015/day/4\">Link to problem\u003C/a>\u003C/h5>\n\u003Ch5 id=\"source-of-the-final-solution\">\u003Ca href=\"https://github.com/Ozencb/aoc/tree/main/aoc-2015-04\">Source of the final solution\u003C/a>\u003C/h5>\n\u003Ch5 id=\"other-posts-in-the-series\">\u003Ca href=\"/tags/advent-of-code\">Other posts in the series\u003C/a>\u003C/h5>\n\u003Ch2 id=\"part-1\">Part 1\u003C/h2>\n\u003Cp>Santa is mining coins. He is trying to find MD5 hashes that start with 5 zeroes. An input of a secret key followed by a number that produces such a hash is valid, and Santa needs to find the lowest possible number of such hashes.\u003C/p>\n\u003Cp>For example,\u003C/p>\n\u003Cul>\n\u003Cli>If your secret key is \u003Ccode>abcdef\u003C/code>, the answer is \u003Ccode>609043\u003C/code>, because the MD5 hash of \u003Ccode>abcdef609043\u003C/code> starts with five zeroes (\u003Ccode>000001dbbfa...\u003C/code>), and it is the lowest such number to do so.\u003C/li>\n\u003Cli>If your secret key is \u003Ccode>pqrstuv\u003C/code>, the lowest number it combines with to make an MD5 hash starting with five zeroes is \u003Ccode>1048970\u003C/code>; that is, the MD5 hash of \u003Ccode>pqrstuv1048970\u003C/code> looks like \u003Ccode>000006136ef....\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Cp>The idea is to make a loop with a counter starting from 0, add the value of this counter to the secret key (input), and hash the concatenated string. If the hash starts with five zeroes, break the loop and check the counter to get the result.\u003C/p>\n\u003Cp>I don’t want to implement MD5 myself, so I added a crate by running \u003Ccode>cargo add md5\u003C/code>.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>[dependencies]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>md5 = \"0.7.0\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>I put together something like this as the solution for the part 1 but it kept running for so long.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> md5;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> base_input \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"iwrupvqb\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> counter \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> result \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> loop\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> hash \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> md5\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">compute\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">format!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}{}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, base_input, counter));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> hash\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">starts_with\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">b\"00000\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            break\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> counter;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        counter \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> counter \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{:?}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, result);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Given that \u003Ca href=\"https://adventofcode.com/about\">AoC about page\u003C/a> has the following statement, I know that I am not on the right track.\u003C/p>\n\u003Cblockquote>\n\u003Cp>You don’t need a computer science background to participate - just a little programming knowledge and some problem solving skills will get you pretty far. Nor do you need a fancy computer; every problem has a solution that completes in at most 15 seconds on ten-year-old hardware.\u003C/p>\n\u003C/blockquote>\n\u003Cp>I was expecting this to be a lot faster because when I printed out the counter on each iteration, I could see that it was going through numbers really fast.\u003C/p>\n\u003Cp>I went about debugging the code by printing \u003Ccode>hash\u003C/code> and \u003Ccode>b\"00000\"\u003C/code>, and could see that the two was not producing exactly the same data. Since the break condition never met, the loop went on running forever.\u003C/p>\n\u003Cp>Instead, I decided to format the hash as a string, which produced a healthier comparison.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> md5;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> base_input \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"iwrupvqb\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> counter \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> result \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> loop\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> hash \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> md5\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">compute\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">format!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}{}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, base_input, counter));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#B392F0\"> format!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{:?}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, hash)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">starts_with\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"00000\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            break\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> counter;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        counter \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> counter \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{:?}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, result);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>And this worked a lot quicker and the first part of the puzzle is done.\u003C/p>\n\u003Ch2 id=\"part-2\">Part 2\u003C/h2>\n\u003Cp>For part two, we need to do the same thing but with six zeroes. Simply changing \u003Ccode>.starts_with(\"00000\")\u003C/code> part with \u003Ccode>.starts_with(\"000000\")\u003C/code> with works, although a bit slower. But, we can do a minor improvement and use some sort of repeating pattern to change the number of zeroes, and put the logic in some sort of function.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> md5;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> produce_hash\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(base_input\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, target_prefix\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> String\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> counter \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#F97583\"> loop\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> hash \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> md5\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">compute\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">format!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}{}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, base_input, counter));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#B392F0\"> format!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{:?}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, hash)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">starts_with\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">target_prefix) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            break\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> counter;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        counter \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> counter \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> base_input \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"iwrupvqb\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{:?}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">produce_hash\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(base_input, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"0\"\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">repeat\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{:?}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">produce_hash\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(base_input, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"0\"\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">repeat\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">6\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":166,"localImagePaths":172,"remoteImagePaths":173,"frontmatter":174,"imagePaths":177},[167,168,169,170,171],{"depth":104,"slug":105,"text":106},{"depth":104,"slug":108,"text":109},{"depth":104,"slug":111,"text":112},{"depth":72,"slug":114,"text":115},{"depth":72,"slug":117,"text":118},[],[],{"slug":154,"title":92,"description":157,"pubDate":175,"draft":15,"tags":176},"2023-07-29",[18,19,41],[],"advent-of-code/2015-04.md","advent-of-code-2015-03",{"id":179,"data":181,"body":186,"filePath":187,"digest":188,"rendered":189,"legacyId":204},{"title":182,"description":183,"draft":15,"pubDate":184,"tags":185},"Perfectly Spherical Houses in a Vacuum","AoC 2015 with Rust - Day 3",["Date","2023-07-17T00:00:00.000Z"],[18,19,41],"##### [Link to problem](https://adventofcode.com/2015/day/3)\n##### [Source of the final solution](https://github.com/Ozencb/aoc/tree/main/aoc-2015-03)\n##### [Other posts in the series](/tags/advent-of-code)\n\n## Part 1\n\nSanta is delivering gifts in a two-dimensional grid of houses. He gets instructions over the radio by arrow characters (`>`, `\u003C`, `v`, `^`) and moves according to these. He delivers a gift in each move, but sometimes he gets wrong instructions and revisits some of the locations he has already visited. \n\nFor the first part, I want to solve how many houses get at least 1 present. Starting location will also count as one present delivered.\n\nFor example, \n\n- `>` delivers presents to 2 houses: one at the starting location, and one to the east.\n- `^>v\u003C` delivers presents to 4 houses in a square, including twice to the house at his starting/ending location.\n\n\nIf there is a data type that can hold non-duplicate items in Rust, like some sort of set, I can use it. I can iterate over the instructions, call a `move()` function that takes the direction character and either returns the next coordinate which can then be added to hash set. These coordinates can maybe be some sort of struct. I will also copy file reading stuff from [the previous challenge](/advent-of-code-2015-02).\n\n```rust\nstruct Coordinate {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let starting_coordinates = Coordinate { x: 0, y: 0 };\n\n    let new_coord = move_santa('v', starting_coordinates);\n\n    println!(\"{:?} {:?}\", new_coord.x, new_coord.y)\n}\n\nfn move_santa(direction: char, current_coordinate: Coordinate) -> Coordinate {\n    match direction {\n        '^' => Coordinate {\n            x: current_coordinate.x,\n            y: current_coordinate.y + 1,\n        },\n        '>' => Coordinate {\n            x: current_coordinate.x + 1,\n            y: current_coordinate.y,\n        },\n        'v' => Coordinate {\n            x: current_coordinate.x,\n            y: current_coordinate.y - 1,\n        },\n        '\u003C' => Coordinate {\n            x: current_coordinate.x - 1,\n            y: current_coordinate.y,\n        },\n        _ => unreachable!(),\n    }\n}\n```\n\nThis succesfully moved the character one line down, giving us `0 -1` for `x y`. I can move on to hash sets:\n\n```rust\nlet starting_coordinates = Coordinate { x: 0, y: 0 };\n\nlet mut visited_coordinates: HashSet\u003CCoordinate> = HashSet::from([starting_coordinates]);\nlet mut current_coordinates = starting_coordinates;\n\nfor direction in directions {\n    current_coordinates = move_santa(direction, current_coordinates);\n    visited_coordinates.insert(current_coordinates);\n}\n```\n\nBut `insert()` function of hash set gives me the error ```the method `insert` exists for struct `HashSet\u003CCoordinate>`, but its trait bounds were not satisfied```. Naturally, it needs some way to compare `Coordinate`s so Rust can decide which ones are duplicates. \n\n```rust\n#[derive(Eq, Clone, Copy)]\nstruct Coordinate {\n    x: i32,\n    y: i32,\n}\n\nimpl PartialEq for Coordinate {\n    fn eq(&self, other: &Coordinate) -> bool {\n        self.x == other.x && self.y == other.y\n    }\n}\n\nimpl std::hash::Hash for Coordinate {\n    fn hash\u003CH>(&self, state: &mut H)\n    where\n        H: std::hash::Hasher,\n    {\n        state.write_i32(self.x);\n        state.finish();\n    }\n}\n```\n\nI had to \"extend\" the functionality of `Coordinate` by adding hash and `PartialEq` functions and add three traits, `Eq`, `Clone`, and `Copy` to make it work.\n\nWith everything put together, first part of the puzzle is now solved.\n\n```rust\nuse std::{collections::HashSet, fs};\n\n#[derive(Eq, Clone, Copy)]\nstruct Coordinate {\n    x: i32,\n    y: i32,\n}\n\nimpl PartialEq for Coordinate {\n    fn eq(&self, other: &Coordinate) -> bool {\n        self.x == other.x && self.y == other.y\n    }\n}\n\nimpl std::hash::Hash for Coordinate {\n    fn hash\u003CH>(&self, state: &mut H)\n    where\n        H: std::hash::Hasher,\n    {\n        state.write_i32(self.x);\n        state.finish();\n    }\n}\n\nfn main() {\n    let filename = \"data.txt\";\n\n    let contents = fs::read_to_string(filename).expect(\"Something went wrong\");\n    let directions = contents.chars();\n\n    let starting_coordinates = Coordinate { x: 0, y: 0 };\n\n    let mut visited_coordinates: HashSet\u003CCoordinate> = HashSet::from([starting_coordinates]);\n    let mut current_coordinates = starting_coordinates;\n\n    for direction in directions {\n        current_coordinates = move_santa(direction, current_coordinates);\n        visited_coordinates.insert(current_coordinates);\n    }\n\n    println!(\"{:?}\", visited_coordinates.into_iter().count())\n}\n\nfn move_santa(direction: char, current_coordinate: Coordinate) -> Coordinate {\n    match direction {\n        '^' => Coordinate {\n            x: current_coordinate.x,\n            y: current_coordinate.y + 1,\n        },\n        '>' => Coordinate {\n            x: current_coordinate.x + 1,\n            y: current_coordinate.y,\n        },\n        'v' => Coordinate {\n            x: current_coordinate.x,\n            y: current_coordinate.y - 1,\n        },\n        '\u003C' => Coordinate {\n            x: current_coordinate.x - 1,\n            y: current_coordinate.y,\n        },\n        _ => unreachable!(),\n    }\n}\n```\n\n## Part 2\n\nSanta has a robot assistant now and they follow directions in turns. How many houses do they visit? \n\nThis should be easier to implement into our current code. I just need to track one more character and move them in turns. A simple modulo operator should be enough for checking turns.\n\n```rust\nuse std::{collections::HashSet, fs};\n\n#[derive(Eq, Clone, Copy)]\nstruct Coordinate {\n    x: i32,\n    y: i32,\n}\n\nimpl PartialEq for Coordinate {\n    fn eq(&self, other: &Coordinate) -> bool {\n        self.x == other.x && self.y == other.y\n    }\n}\n\nimpl std::hash::Hash for Coordinate {\n    fn hash\u003CH>(&self, state: &mut H)\n    where\n        H: std::hash::Hasher,\n    {\n        state.write_i32(self.x);\n        state.finish();\n    }\n}\n\nfn main() {\n    let filename = \"data.txt\";\n\n    let contents = fs::read_to_string(filename).expect(\"Something went wrong\");\n    let directions = contents.chars();\n\n    let starting_coordinates = Coordinate { x: 0, y: 0 };\n\n    let mut visited_coordinates: HashSet\u003CCoordinate> = HashSet::from([starting_coordinates]);\n    let mut santa_coordinate = starting_coordinates;\n    let mut robot_coordinate = starting_coordinates;\n\n    for (idx, direction) in directions.enumerate() {\n        if idx % 2 == 0 {\n            santa_coordinate = move_character(direction, santa_coordinate);\n            visited_coordinates.insert(santa_coordinate);\n        } else {\n            robot_coordinate = move_character(direction, robot_coordinate);\n            visited_coordinates.insert(robot_coordinate);\n        }\n    }\n\n    println!(\"{:?}\", visited_coordinates.into_iter().count())\n}\n\nfn move_character(direction: char, current_coordinate: Coordinate) -> Coordinate {\n    match direction {\n        '^' => Coordinate {\n            x: current_coordinate.x,\n            y: current_coordinate.y + 1,\n        },\n        '>' => Coordinate {\n            x: current_coordinate.x + 1,\n            y: current_coordinate.y,\n        },\n        'v' => Coordinate {\n            x: current_coordinate.x,\n            y: current_coordinate.y - 1,\n        },\n        '\u003C' => Coordinate {\n            x: current_coordinate.x - 1,\n            y: current_coordinate.y,\n        },\n        _ => unreachable!(),\n    }\n}\n```\n\nThis works as expected and the second part of the puzzle is now solved, but I am leaving this behind puzzle a bit unsatisfied because I feel like I partly cheated my way through it, because I can't say I completely get how traits are working here. I kind of get it, but I also don't... I should try and write a post about it.","src/content/article/advent-of-code/2015-03.md","bbd0b88876c9745d",{"html":190,"metadata":191},"\u003Ch5 id=\"link-to-problem\">\u003Ca href=\"https://adventofcode.com/2015/day/3\">Link to problem\u003C/a>\u003C/h5>\n\u003Ch5 id=\"source-of-the-final-solution\">\u003Ca href=\"https://github.com/Ozencb/aoc/tree/main/aoc-2015-03\">Source of the final solution\u003C/a>\u003C/h5>\n\u003Ch5 id=\"other-posts-in-the-series\">\u003Ca href=\"/tags/advent-of-code\">Other posts in the series\u003C/a>\u003C/h5>\n\u003Ch2 id=\"part-1\">Part 1\u003C/h2>\n\u003Cp>Santa is delivering gifts in a two-dimensional grid of houses. He gets instructions over the radio by arrow characters (\u003Ccode>>\u003C/code>, \u003Ccode>&#x3C;\u003C/code>, \u003Ccode>v\u003C/code>, \u003Ccode>^\u003C/code>) and moves according to these. He delivers a gift in each move, but sometimes he gets wrong instructions and revisits some of the locations he has already visited.\u003C/p>\n\u003Cp>For the first part, I want to solve how many houses get at least 1 present. Starting location will also count as one present delivered.\u003C/p>\n\u003Cp>For example,\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>>\u003C/code> delivers presents to 2 houses: one at the starting location, and one to the east.\u003C/li>\n\u003Cli>\u003Ccode>^>v&#x3C;\u003C/code> delivers presents to 4 houses in a square, including twice to the house at his starting/ending location.\u003C/li>\n\u003C/ul>\n\u003Cp>If there is a data type that can hold non-duplicate items in Rust, like some sort of set, I can use it. I can iterate over the instructions, call a \u003Ccode>move()\u003C/code> function that takes the direction character and either returns the next coordinate which can then be added to hash set. These coordinates can maybe be some sort of struct. I will also copy file reading stuff from \u003Ca href=\"/advent-of-code-2015-02\">the previous challenge\u003C/a>.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">struct\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> starting_coordinates \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> new_coord \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> move_santa\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'v'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, starting_coordinates);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{:?} {:?}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, new_coord\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x, new_coord\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> move_santa\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(direction\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> char\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    match\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> direction {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        '^'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        '>'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        'v'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        '&#x3C;'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        _ \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> unreachable!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This succesfully moved the character one line down, giving us \u003Ccode>0 -1\u003C/code> for \u003Ccode>x y\u003C/code>. I can move on to hash sets:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> starting_coordinates \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> visited_coordinates\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> HashSet\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> HashSet\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\">([starting_coordinates]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinates \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> starting_coordinates;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> direction \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> directions {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    current_coordinates \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> move_santa\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(direction, current_coordinates);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    visited_coordinates\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">insert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(current_coordinates);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>But \u003Ccode>insert()\u003C/code> function of hash set gives me the error \u003Ccode>the method `insert` exists for struct `HashSet&#x3C;Coordinate>`, but its trait bounds were not satisfied\u003C/code>. Naturally, it needs some way to compare \u003Ccode>Coordinate\u003C/code>s so Rust can decide which ones are duplicates.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">#[derive(\u003C/span>\u003Cspan style=\"color:#B392F0\">Eq\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">Clone\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">Copy\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">struct\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">impl\u003C/span>\u003Cspan style=\"color:#B392F0\"> PartialEq\u003C/span>\u003Cspan style=\"color:#F97583\"> for\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> eq\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#79B8FF\">self\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, other\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> bool\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> other\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#79B8FF\"> self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> other\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">impl\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">hash\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">Hash\u003C/span>\u003Cspan style=\"color:#F97583\"> for\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> hash\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">H\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#79B8FF\">self\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, state\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;mut\u003C/span>\u003Cspan style=\"color:#B392F0\"> H\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    where\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        H\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">hash\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">Hasher\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        state\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">write_i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        state\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">finish\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>I had to “extend” the functionality of \u003Ccode>Coordinate\u003C/code> by adding hash and \u003Ccode>PartialEq\u003C/code> functions and add three traits, \u003Ccode>Eq\u003C/code>, \u003Ccode>Clone\u003C/code>, and \u003Ccode>Copy\u003C/code> to make it work.\u003C/p>\n\u003Cp>With everything put together, first part of the puzzle is now solved.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#B392F0\">collections\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">HashSet\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, fs};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">#[derive(\u003C/span>\u003Cspan style=\"color:#B392F0\">Eq\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">Clone\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">Copy\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">struct\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">impl\u003C/span>\u003Cspan style=\"color:#B392F0\"> PartialEq\u003C/span>\u003Cspan style=\"color:#F97583\"> for\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> eq\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#79B8FF\">self\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, other\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> bool\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> other\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#79B8FF\"> self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> other\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">impl\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">hash\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">Hash\u003C/span>\u003Cspan style=\"color:#F97583\"> for\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> hash\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">H\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#79B8FF\">self\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, state\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;mut\u003C/span>\u003Cspan style=\"color:#B392F0\"> H\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    where\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        H\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">hash\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">Hasher\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        state\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">write_i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        state\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">finish\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> filename \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"data.txt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> fs\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">read_to_string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(filename)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Something went wrong\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> directions \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">chars\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> starting_coordinates \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> visited_coordinates\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> HashSet\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> HashSet\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\">([starting_coordinates]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinates \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> starting_coordinates;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> direction \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> directions {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        current_coordinates \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> move_santa\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(direction, current_coordinates);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        visited_coordinates\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">insert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(current_coordinates);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{:?}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, visited_coordinates\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">into_iter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> move_santa\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(direction\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> char\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    match\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> direction {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        '^'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        '>'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        'v'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        '&#x3C;'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        _ \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> unreachable!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"part-2\">Part 2\u003C/h2>\n\u003Cp>Santa has a robot assistant now and they follow directions in turns. How many houses do they visit?\u003C/p>\n\u003Cp>This should be easier to implement into our current code. I just need to track one more character and move them in turns. A simple modulo operator should be enough for checking turns.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#B392F0\">collections\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">HashSet\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, fs};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">#[derive(\u003C/span>\u003Cspan style=\"color:#B392F0\">Eq\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">Clone\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">Copy\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">struct\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">impl\u003C/span>\u003Cspan style=\"color:#B392F0\"> PartialEq\u003C/span>\u003Cspan style=\"color:#F97583\"> for\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> eq\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#79B8FF\">self\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, other\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> bool\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> other\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#79B8FF\"> self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> other\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">impl\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">hash\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">Hash\u003C/span>\u003Cspan style=\"color:#F97583\"> for\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> hash\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">H\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#79B8FF\">self\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, state\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;mut\u003C/span>\u003Cspan style=\"color:#B392F0\"> H\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    where\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        H\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">hash\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">Hasher\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        state\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">write_i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        state\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">finish\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> filename \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"data.txt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> fs\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">read_to_string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(filename)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Something went wrong\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> directions \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">chars\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> starting_coordinates \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> visited_coordinates\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> HashSet\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> HashSet\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\">([starting_coordinates]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> santa_coordinate \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> starting_coordinates;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> robot_coordinate \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> starting_coordinates;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (idx, direction) \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> directions\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">enumerate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> idx \u003C/span>\u003Cspan style=\"color:#F97583\">%\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#F97583\"> ==\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            santa_coordinate \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> move_character\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(direction, santa_coordinate);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            visited_coordinates\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">insert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(santa_coordinate);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            robot_coordinate \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> move_character\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(direction, robot_coordinate);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            visited_coordinates\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">insert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(robot_coordinate);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{:?}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, visited_coordinates\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">into_iter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> move_character\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(direction\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> char\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    match\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> direction {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        '^'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        '>'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        'v'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        '&#x3C;'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        _ \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> unreachable!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This works as expected and the second part of the puzzle is now solved, but I am leaving this behind puzzle a bit unsatisfied because I feel like I partly cheated my way through it, because I can’t say I completely get how traits are working here. I kind of get it, but I also don’t… I should try and write a post about it.\u003C/p>",{"headings":192,"localImagePaths":198,"remoteImagePaths":199,"frontmatter":200,"imagePaths":203},[193,194,195,196,197],{"depth":104,"slug":105,"text":106},{"depth":104,"slug":108,"text":109},{"depth":104,"slug":111,"text":112},{"depth":72,"slug":114,"text":115},{"depth":72,"slug":117,"text":118},[],[],{"slug":179,"title":182,"description":183,"pubDate":201,"draft":15,"tags":202},"2023-07-17",[18,19,41],[],"advent-of-code/2015-03.md","advent-of-code-2015-01",{"id":205,"data":207,"body":212,"filePath":213,"digest":214,"rendered":215,"legacyId":233},{"title":208,"description":209,"draft":15,"pubDate":210,"tags":211},"Not Quite Lisp","AoC 2015 with Rust - Day 1",["Date","2023-07-15T00:00:00.000Z"],[18,19,41],"##### [Link to problem](https://adventofcode.com/2015/day/1)\n##### [Source of the final solution](https://github.com/Ozencb/aoc/tree/main/aoc-2015-01)\n##### [Other posts in the series](/tags/advent-of-code)\n\nThis is the first post of the Aoc 2015 with Rust series, which will be a documented journey of me learning Rust language. I am a professional software developer so I already know a number of programming languages. For that I reason, I intend to skip parts that are common in other languages and, instead, focus on parts that are new or cryptic to me.\n\nI will primarily use [official docs](https://www.rust-lang.org/learn) and StackOverflow for more specific situations.\n\nToolchain is ready and installed thanks to `rustup`. I will initialize projects with `cargo init`, which should give us the base setup to work on. Aand let's go!\n\n## Part 1\n\nSanta wants to deliver presents in an apartment building but for floor directions, all he got is a set of parentheses. `(` means one floor up, `)` means one floor down. `)())())` results in `-3`, and `))((((()` results in `2`.\n\nPiece of cake. I can increment or decrement a counter as I iterate through the set of these characters accordingly.\n\nI remember some basic stuff from my 15 minutes of Rust experience like how to declare variables, variables being immutable by default, the `mut` keyword, type inference etc. So I try some hello wordish things:\n\n```rust\nfn main() {\n    let text = \"oi\";\n    println!(text);\n}\n```\n\nTo my surprise, this did not work. \n\n```\n   Compiling aoc-2015-01 v0.1.0 (/home/oz/dev/aoc/aoc-2015-01)\nerror: format argument must be a string literal\n --> src/main.rs:3:14\n  |\n3 |     println!(text);\n  |              ^^^^\n  |\nhelp: you might be missing a string literal to format with\n  |\n3 |     println!(\"{}\", text);\n  |              +++++\n\nerror: could not compile `aoc-2015-01` (bin \"aoc-2015-01\") due to previous error\n```\n\nYeh, string literals...\n\n```rust\nfn main() {\n    let text = \"oi\";\n    println!(\"{}\", text);\n}\n\n//oi\n```\n\nThe method that I will use is `string.chars()`, which apparently returns an iterator (something that can be looped through), and with a `for` loop, I can check each character in the string and act upon it. The question also includes some warnings about Unicode characters, which can resolve to multiple characters (ex: `a̐` becomes `['a', '\\u{310}']`), but since our input will only consist of parantheses, I don't have to take any measures against this issue.\n\n\n\n\n```rust\nfn main() {\n    let instructions = \"))((((()\";\n    let mut currentFloor = 0;\n\n    for char in instructions.chars() {\n        if char == '(' {\n            currentFloor = currentFloor + 1;\n        } else {\n            currentFloor = currentFloor - 1;\n        }\n    }\n\n    println!(\"{}\", currentFloor);\n}\n```\n\nI found that strings has a method called `chars()` which returns an iterator and, surely, running the code prints out `2` as expected. One minor hiccup\nand surely, it prints out `2`. \n\nOne minor issue I faced when comparing the character to an opening paranthesis was, characters are expected to be surrounded by single quotes, not double quotes but I tried the latter first and the compiler kindly warned me and steered me into the right direction:\n\n```\nerror[E0308]: mismatched types\n --> src/main.rs:6:20\n  |\n6 |         if char == \"(\" {\n  |            ----    ^^^ expected `char`, found `&str`\n  |            |\n  |            expected because this is `char`\n  |\nhelp: if you meant to write a `char` literal, use single quotes\n  |\n6 |         if char == '(' {\n  |                    ~~~\n\nFor more information about this error, try `rustc --explain E0308`.\n```\n\nNow is the time for taking an input from AoC and pasting it into the `instructions` variable, and run the code, hoping that it works as expected.\n\nAoC gave me a very long string that resolved to `280`, and pasting this number into the solution box and sending it gave me this message:\n\n```\nYour puzzle answer was 280.\n\nThe first half of this puzzle is complete! It provides one gold star: *\n```\n\nNice. On to part two!\n\nP.S: At this point, I also realized that the compiler warned me about using camel case when naming the `currentFloor` variable, so I will keep that in mind for later changes.\n\n\n## Part 2\n\nThe second part of the puzzle wants me to find the position of the first character that causes Santa to enter the basement (floor -1).\n\nI want to simply add an index to the iteration, so I can pinpoint the exact location when Santa reaches the basement for the first time.\n\n```rust\nfn main() {\n    let instructions = \"))((((()\";\n    let mut currentFloor = 0;\n    let mut hasReachedBasement = false;\n\n    for (idx, char) in instructions.chars().enumerate() {\n        if char == '(' {\n            currentFloor = currentFloor + 1;\n        } else {\n            currentFloor = currentFloor - 1;\n        }\n\n        if !hasReachedBasement && currentFloor \u003C 0 {\n           println!(\"{}\", idx + 1); \n           hasReachedBasement = true;\n        }\n    }\n\n    println!(\"{}\", currentFloor);\n}\n```\n\nAnd it works! Part 2 of our puzzle is now complete.\n\n#### Retrospective\n\n~~The first blog post in the series turned out to be a lot longer than I wanted, and I found myself to be explaining basic programming concepts unintentionally, mostly because I am new to writing blog posts. I initially planned this series to be a \"log\", rather than long explanations, but here we are... I decided to post this blog as is, but going forward, I will try to keep it as concise as possible. Let's see how it goes.~~\n\nUpdate: chopped most parts according to the retro","src/content/article/advent-of-code/2015-01.md","71040773c0c677c2",{"html":216,"metadata":217},"\u003Ch5 id=\"link-to-problem\">\u003Ca href=\"https://adventofcode.com/2015/day/1\">Link to problem\u003C/a>\u003C/h5>\n\u003Ch5 id=\"source-of-the-final-solution\">\u003Ca href=\"https://github.com/Ozencb/aoc/tree/main/aoc-2015-01\">Source of the final solution\u003C/a>\u003C/h5>\n\u003Ch5 id=\"other-posts-in-the-series\">\u003Ca href=\"/tags/advent-of-code\">Other posts in the series\u003C/a>\u003C/h5>\n\u003Cp>This is the first post of the Aoc 2015 with Rust series, which will be a documented journey of me learning Rust language. I am a professional software developer so I already know a number of programming languages. For that I reason, I intend to skip parts that are common in other languages and, instead, focus on parts that are new or cryptic to me.\u003C/p>\n\u003Cp>I will primarily use \u003Ca href=\"https://www.rust-lang.org/learn\">official docs\u003C/a> and StackOverflow for more specific situations.\u003C/p>\n\u003Cp>Toolchain is ready and installed thanks to \u003Ccode>rustup\u003C/code>. I will initialize projects with \u003Ccode>cargo init\u003C/code>, which should give us the base setup to work on. Aand let’s go!\u003C/p>\n\u003Ch2 id=\"part-1\">Part 1\u003C/h2>\n\u003Cp>Santa wants to deliver presents in an apartment building but for floor directions, all he got is a set of parentheses. \u003Ccode>(\u003C/code> means one floor up, \u003Ccode>)\u003C/code> means one floor down. \u003Ccode>)())())\u003C/code> results in \u003Ccode>-3\u003C/code>, and \u003Ccode>))((((()\u003C/code> results in \u003Ccode>2\u003C/code>.\u003C/p>\n\u003Cp>Piece of cake. I can increment or decrement a counter as I iterate through the set of these characters accordingly.\u003C/p>\n\u003Cp>I remember some basic stuff from my 15 minutes of Rust experience like how to declare variables, variables being immutable by default, the \u003Ccode>mut\u003C/code> keyword, type inference etc. So I try some hello wordish things:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> text \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"oi\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(text);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>To my surprise, this did not work.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>   Compiling aoc-2015-01 v0.1.0 (/home/oz/dev/aoc/aoc-2015-01)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>error: format argument must be a string literal\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan> --> src/main.rs:3:14\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>3 |     println!(text);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |              ^^^^\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>help: you might be missing a string literal to format with\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>3 |     println!(\"{}\", text);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |              +++++\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>error: could not compile `aoc-2015-01` (bin \"aoc-2015-01\") due to previous error\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Yeh, string literals…\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> text \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"oi\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, text);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">//oi\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The method that I will use is \u003Ccode>string.chars()\u003C/code>, which apparently returns an iterator (something that can be looped through), and with a \u003Ccode>for\u003C/code> loop, I can check each character in the string and act upon it. The question also includes some warnings about Unicode characters, which can resolve to multiple characters (ex: \u003Ccode>a̐\u003C/code> becomes \u003Ccode>['a', '\\u{310}']\u003C/code>), but since our input will only consist of parantheses, I don’t have to take any measures against this issue.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> instructions \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"))((((()\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> currentFloor \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#B392F0\"> char\u003C/span>\u003Cspan style=\"color:#F97583\"> in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> instructions\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">chars\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#B392F0\"> char\u003C/span>\u003Cspan style=\"color:#F97583\"> ==\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '('\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            currentFloor \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> currentFloor \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            currentFloor \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> currentFloor \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, currentFloor);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>I found that strings has a method called \u003Ccode>chars()\u003C/code> which returns an iterator and, surely, running the code prints out \u003Ccode>2\u003C/code> as expected. One minor hiccup\nand surely, it prints out \u003Ccode>2\u003C/code>.\u003C/p>\n\u003Cp>One minor issue I faced when comparing the character to an opening paranthesis was, characters are expected to be surrounded by single quotes, not double quotes but I tried the latter first and the compiler kindly warned me and steered me into the right direction:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>error[E0308]: mismatched types\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan> --> src/main.rs:6:20\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>6 |         if char == \"(\" {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |            ----    ^^^ expected `char`, found `&#x26;str`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |            |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |            expected because this is `char`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>help: if you meant to write a `char` literal, use single quotes\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>6 |         if char == '(' {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |                    ~~~\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>For more information about this error, try `rustc --explain E0308`.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Now is the time for taking an input from AoC and pasting it into the \u003Ccode>instructions\u003C/code> variable, and run the code, hoping that it works as expected.\u003C/p>\n\u003Cp>AoC gave me a very long string that resolved to \u003Ccode>280\u003C/code>, and pasting this number into the solution box and sending it gave me this message:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Your puzzle answer was 280.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>The first half of this puzzle is complete! It provides one gold star: *\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Nice. On to part two!\u003C/p>\n\u003Cp>P.S: At this point, I also realized that the compiler warned me about using camel case when naming the \u003Ccode>currentFloor\u003C/code> variable, so I will keep that in mind for later changes.\u003C/p>\n\u003Ch2 id=\"part-2\">Part 2\u003C/h2>\n\u003Cp>The second part of the puzzle wants me to find the position of the first character that causes Santa to enter the basement (floor -1).\u003C/p>\n\u003Cp>I want to simply add an index to the iteration, so I can pinpoint the exact location when Santa reaches the basement for the first time.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> instructions \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"))((((()\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> currentFloor \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> hasReachedBasement \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> false\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (idx, \u003C/span>\u003Cspan style=\"color:#B392F0\">char\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> instructions\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">chars\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">enumerate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#B392F0\"> char\u003C/span>\u003Cspan style=\"color:#F97583\"> ==\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '('\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            currentFloor \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> currentFloor \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            currentFloor \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> currentFloor \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#F97583\"> !\u003C/span>\u003Cspan style=\"color:#E1E4E8\">hasReachedBasement \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> currentFloor \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">           println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, idx \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">); \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">           hasReachedBasement \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, currentFloor);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>And it works! Part 2 of our puzzle is now complete.\u003C/p>\n\u003Ch4 id=\"retrospective\">Retrospective\u003C/h4>\n\u003Cp>\u003Cdel>The first blog post in the series turned out to be a lot longer than I wanted, and I found myself to be explaining basic programming concepts unintentionally, mostly because I am new to writing blog posts. I initially planned this series to be a “log”, rather than long explanations, but here we are… I decided to post this blog as is, but going forward, I will try to keep it as concise as possible. Let’s see how it goes.\u003C/del>\u003C/p>\n\u003Cp>Update: chopped most parts according to the retro\u003C/p>",{"headings":218,"localImagePaths":227,"remoteImagePaths":228,"frontmatter":229,"imagePaths":232},[219,220,221,222,223,224],{"depth":104,"slug":105,"text":106},{"depth":104,"slug":108,"text":109},{"depth":104,"slug":111,"text":112},{"depth":72,"slug":114,"text":115},{"depth":72,"slug":117,"text":118},{"depth":79,"slug":225,"text":226},"retrospective","Retrospective",[],[],{"slug":205,"title":208,"description":209,"pubDate":230,"draft":15,"tags":231},"2023-07-15",[18,19,41],[],"advent-of-code/2015-01.md","advent-of-code-2015-02",{"id":234,"data":236,"body":241,"filePath":242,"digest":243,"rendered":244,"legacyId":263},{"title":237,"description":238,"draft":15,"pubDate":239,"tags":240},"I Was Told There Would Be No Math","AoC 2015 with Rust - Day 2",["Date","2023-07-16T00:00:00.000Z"],[18,19,41],"##### [Link to problem](https://adventofcode.com/2015/day/2)\n##### [Source of the final solution](https://github.com/Ozencb/aoc/tree/main/aoc-2015-02)\n##### [Other posts in the series](/tags/advent-of-code)\n\n## Part 1\n\nElves are wrapping gift boxes (rectangular prism), and they need some wrapping paper. They want to find out the exact size they need to order. The formula for calculating the size is:\n\n`(2*l*w + 2*w*h + 2*h*l) + smallest side's area`\n\nFor example, a present with dimensions `2x3x4` requires `2*6 + 2*12 + 2*8 = 52` square feet of wrapping paper plus `6` square feet of slack, for a total of `58` square feet.\n\nThe input will be a list of such dimensions and the output of the program should be the total square feet of wrapping paper they should order.\n\nIt looks like I will have to find a suitable data type that can hold width/length/height values. I can either use some sort of struct or an array. Arrays should be the more suitable data type for this case.\n\n[Arrays and Slices](https://doc.rust-lang.org/rust-by-example/primitives/array.html) page of Rust doc says that arrays require defining their lengths during compilation, which is not really suitable for holding the list of gift sizes since I cannot predict the length of it. So, I am going go with the alternative that can has a dynamic size: slices. The syntax looks something like this:\n\n```rust\nlet empty_array: [u32; 0] = [];\n```\n\nBut I can use array for holding the actual sizes of each gifts respectively in arrays with fixed-sizes of three, for width, length, and height. So, arrays within a slice should do it.\n\n```rust\nlet gift_list: [[i32; 3]; 0] = [];\n```\n\nI will also need to read and parse a text file that will hold the list of gifts, with each gift size in one line in `1x1x1` format.\n\nWith a quick search, I find `fs` module under Rust's standard library, which has a method called `read_to_string` that takes in a file path as its sole parameter, and returns the contents as the string.\n\nWell... not quite. Actually, it returns a `Result` enum which has two variants, `Ok()` and `Err()`. If everything goes accordingly, an `Ok()` case should resolve succesfully, giving us the string that I want. I paste the input into a file titled `data.txt` and try to print its contents. I initially encountered an error practically saying that `data.txt` did not exist, because Rust expected the file to be in the root directory of the project, not at the same level with `main.rs` under `src`. Moving it to the root did the trick. Anyway, our code now looks like this:\n\n```rust\nuse std::fs;\n\nfn main() {\n    let gift_list: [[i32; 3]; 0] = [];\n    let filename = \"data.txt\";\n\n    let contents = fs::read_to_string(filename);\n\n    match contents {\n        Ok(v) => println!(\"contents of the file: {}\", v),\n        Err(e) => println!(\"error parsing header: {}\", e),\n    }\n}\n```\n\nThe [Result](https://doc.rust-lang.org/std/result/enum.Result.html#) page on docs also show some other methods for handling error cases like `expect()`, which also looks nice (but there are some warnings about its usage, which I can wisely ignore).\n\n```rust\nuse std::fs;\n\nfn main() {\n    let gift_list: [[i32; 3]; 0] = [];\n    let filename = \"data.txt\";\n\n    let contents = fs::read_to_string(filename).expect(\"Something went wrong\");\n\n    println!(\"With text:\\n{contents}\");\n}\n```\n\nI now have all the contents of the file as a string in `contents` variable. I now have to parse it. I want to split this string into separate lines first, effectively separating each gift size, then split each gift size by looking at the `x`. Like many other languages, Rust has a `split()` method. I can call this method with a \"newline character\" but, while looking for possible solutions, I also saw a method called `lines()`, which supposedly splits a string into separate lines. I can use this one for the first part. Note that it returns a `Lines` iterator, but it's fine. I want to iterate on this anyway.\n\n```rust\nfn main() {\n    let gift_list: [[i32; 3]; 0] = [];\n    let filename = \"data.txt\";\n\n    let contents = fs::read_to_string(filename).expect(\"Something went wrong\");\n\n    let lines = contents.lines();\n\n    for line in lines {\n       // do stuff with line \n    }\n}\n```\n\nI used `split()` as mentioned, which also returns an iterator. \n\n```rust\nlet sizes = line.split('x');\n```\n\nI assume that sizes can only have three elements for w/l/h, so it would be handy to directly cast them into an array of size three while also casting strings into integers so I can do math. Again, I find lots of options, the simplest being a good old `for` loop. \n\n```rust\nfor line in lines {\n    let sizes = line.split('x');\n\n    for size in sizes {\n        println!(\"{}\", size);\n    }\n}\n```\n\nBut I want to slowly leave the intuitive ways aside and do it the Rust way.\n\n```rust\nlet sizes = line.split('x').collect::\u003CVec\u003C&str>>();\n```\n\nThis lets me convert the `Split` type to a good old vector. Combining multiple searches about how to map over iterators and how to cast strings to integers, I came up with a solution like this:\n\n```rust\nlet sizes = line\n    .split('x')\n    .map(|size| size.parse::\u003Ci32>().unwrap())\n    .collect::\u003CVec\u003Ci32>>();\n```\n\nAt this point, I realize that it is not as easy as I thought to push elements into slices in Rust so while trying to circumvent the issue. Then I realize, I now have line count of the input. So, instead of a slice, I can maybe declare an array with a fixed-size of line count?\n\nAand, Rust did not like that too. Rust wants to see the array size at compile time, but I am trying to assign it at runtime by looking at the line count. I checked if `Vec`s are any different than slices or arrays, and the official docs say that they are resizable, so I try using a vector instead.\n\n```rust\nuse std::fs;\n\nfn main() {\n    let filename = \"data.txt\";\n\n    let contents = fs::read_to_string(filename).expect(\"Something went wrong\");\n\n    let lines = contents.lines();\n    let line_count = lines.clone().count();\n\n    let mut gift_list = vec![vec![0; 3]; line_count];\n\n    for line in lines {\n        let sizes = line\n            .split('x')\n            .map(|size| size.parse::\u003Ci32>().unwrap())\n            .collect::\u003CVec\u003Ci32>>();\n\n        gift_list.push(sizes);\n    }\n\n    for gift in gift_list {\n        for size in gift {\n            println!(\"{}\", size);\n        }\n    }\n}\n```\n\nAlso note that I cloned `lines` before checking its size, otherwise it gets consumed and can no longer be used. Something's going on here (ownership?), but I will look into this later.\n\nCool, I can iterate over the `gift_list` that I have put together. At this point, I can maybe call a function that takes in a vector. I devised something like this but all kinds of mutability rules threw all kinds of errors.\n\n```rust\nuse std::fs;\n\nfn main() {\n    let filename = \"data.txt\";\n\n    let contents = fs::read_to_string(filename).expect(\"Something went wrong\");\n\n    let lines = contents.lines();\n    let line_count = lines.clone().count();\n\n    let mut gift_list = vec![vec![0; 3]; line_count];\n\n    for line in lines {\n        let sizes = line\n            .split('x')\n            .map(|size| size.parse::\u003Ci32>().unwrap())\n            .collect::\u003CVec\u003Ci32>>();\n\n        gift_list.push(sizes);\n    }\n\n    let total_area: i32 = gift_list.into_iter().map(|v| calculate_area(v)).sum();\n\n    println!(\"{}\", total_area);\n}\n\n// (2*l*w + 2*w*h + 2*h*l) + smallest side's area\nfn calculate_area(v: Vec\u003Ci32>) -> i32 {\n    v.sort();\n    let smallest_side = v[0] * v[1]; // since vector is now sorted, we can use first two elements for smallest side\n    (2 * v[0] * v[1]) + (2 * v[0] * v[2]) + (2 * v[1] * v[2]) + smallest_side\n}\n```\n\nRust wants extra annotations for values that I want to change (mutate). I add this to function's parameter definitions.\n\nFinally, our program seems ready to solve the first part of the puzzle.\nAnd, nice. First try! First star.\n\n## Part 2\n\nElves now need ribbons to wrap the gifts. They need some to tie it and some for making a bow.\nThe required length for tying it is the length of its smallest perimeter. And the bow is equal to its cubic feet.\n\nFor example, a present with dimensions 2x3x4 requires 2+2+3+3 = 10 feet of ribbon to wrap the present plus 2*3*4 = 24 feet of ribbon for the bow, for a total of 34 feet.\n\nIt seems I will have to work on sorted vectors again so I move the sorting part to where I initially populate the vector, and fix mut annotation accordingly:\n\n```rust\nuse std::fs;\n\nfn main() {\n    let filename = \"data.txt\";\n\n    let contents = fs::read_to_string(filename).expect(\"Something went wrong\");\n\n    let lines = contents.lines();\n    let line_count = lines.clone().count();\n\n    let mut gift_list = vec![vec![0; 3]; line_count];\n\n    for line in lines {\n        let mut sizes = line\n            .split('x')\n            .map(|size| size.parse::\u003Ci32>().unwrap())\n            .collect::\u003CVec\u003Ci32>>();\n\n        sizes.sort();\n\n        gift_list.push(sizes);\n    }\n\n    let total_area: i32 = gift_list.into_iter().map(|v| calculate_area(v)).sum();\n\n    println!(\"{}\", total_area);\n}\n\n// (2*l*w + 2*w*h + 2*h*l) + smallest side's area\nfn calculate_area(v: Vec\u003Ci32>) -> i32 {\n    let smallest_side = v[0] * v[1]; // since vector is now sorted, we can use first two elements for smallest side\n    (2 * v[0] * v[1]) + (2 * v[0] * v[2]) + (2 * v[1] * v[2]) + smallest_side\n}\n```\n\nI will add two additional functions for ribbons: one for tying and one for the bow, and an additional function that adds the two.\n\n```rust\nfn get_ribbon_size(v: Vec\u003Ci32>) -> i32 {\n    get_smallest_perimeter(v) + get_volume(v)\n}\n\nfn get_smallest_perimeter(v: Vec\u003Ci32>) -> i32 {\n    (v[0] * 2) + (v[1] * 2)\n}\n\nfn get_volume(v: Vec\u003Ci32>) -> i32 {\n    v[0] * v[1] * v[2]\n}\n```\n\n`get_ribbon_size` tells me something about the second function calls argument, something with moved values... the time has come. \n\n### Obligatory sidebar: Borrow Checking\n\nRust does not utilize a garbage collector to free up memory that is not needed anymore, but they say it is as memory-safe as it gets. Rust, by design, wants to prevent us moving data around freely to better decide when to free up memory. It essentialy gives us the convenience of garbage-collection without making us manually manage the memory. All thanks to Rust's unique ownership model.\n\nWhen passing data around, I can:\n- Directly pass the value, giving up the ownership in process\n- Clone the value and work on the clone instead\n- Pass a reference, letting the borrower use it until it's done\n\n\nPutting it all together, I get something like this:\n\n```rust\nuse std::fs;\n\nfn main() {\n    let filename = \"data.txt\";\n\n    let contents = fs::read_to_string(filename).expect(\"Something went wrong\");\n\n    let lines = contents.lines();\n    let line_count = lines.clone().count();\n\n    let mut gift_list = vec![vec![0; 3]; line_count];\n\n    for line in lines {\n        let mut sizes = line\n            .split('x')\n            .map(|size| size.parse::\u003Ci32>().unwrap())\n            .collect::\u003CVec\u003Ci32>>();\n\n        sizes.sort();\n\n        gift_list.push(sizes);\n    }\n\n    let total_area: i32 = gift_list\n        .clone()\n        .into_iter()\n        .map(|v| calculate_area(v))\n        .sum();\n    let ribbon_length: i32 = gift_list\n        .clone()\n        .into_iter()\n        .map(|v| get_ribbon_size(&v))\n        .sum();\n\n    println!(\n        \"Wrapping paper needed: {}\\nRibbon needed: {}\",\n        total_area, ribbon_length\n    );\n}\n\n// (2*l*w + 2*w*h + 2*h*l) + smallest side's area\nfn calculate_area(v: Vec\u003Ci32>) -> i32 {\n    let smallest_side = v[0] * v[1]; // since vector is now sorted, we can use first two elements for smallest side\n    (2 * v[0] * v[1]) + (2 * v[0] * v[2]) + (2 * v[1] * v[2]) + smallest_side\n}\n\nfn get_ribbon_size(v: &Vec\u003Ci32>) -> i32 {\n    get_smallest_perimeter(v) + get_volume(v)\n}\n\nfn get_smallest_perimeter(v: &Vec\u003Ci32>) -> i32 {\n    (v[0] * 2) + (v[1] * 2)\n}\n\nfn get_volume(v: &Vec\u003Ci32>) -> i32 {\n    v[0] * v[1] * v[2]\n}\n```\n\nAgain, this works as expected. Nice.","src/content/article/advent-of-code/2015-02.md","ec93bf4d6e9a2586",{"html":245,"metadata":246},"\u003Ch5 id=\"link-to-problem\">\u003Ca href=\"https://adventofcode.com/2015/day/2\">Link to problem\u003C/a>\u003C/h5>\n\u003Ch5 id=\"source-of-the-final-solution\">\u003Ca href=\"https://github.com/Ozencb/aoc/tree/main/aoc-2015-02\">Source of the final solution\u003C/a>\u003C/h5>\n\u003Ch5 id=\"other-posts-in-the-series\">\u003Ca href=\"/tags/advent-of-code\">Other posts in the series\u003C/a>\u003C/h5>\n\u003Ch2 id=\"part-1\">Part 1\u003C/h2>\n\u003Cp>Elves are wrapping gift boxes (rectangular prism), and they need some wrapping paper. They want to find out the exact size they need to order. The formula for calculating the size is:\u003C/p>\n\u003Cp>\u003Ccode>(2*l*w + 2*w*h + 2*h*l) + smallest side's area\u003C/code>\u003C/p>\n\u003Cp>For example, a present with dimensions \u003Ccode>2x3x4\u003C/code> requires \u003Ccode>2*6 + 2*12 + 2*8 = 52\u003C/code> square feet of wrapping paper plus \u003Ccode>6\u003C/code> square feet of slack, for a total of \u003Ccode>58\u003C/code> square feet.\u003C/p>\n\u003Cp>The input will be a list of such dimensions and the output of the program should be the total square feet of wrapping paper they should order.\u003C/p>\n\u003Cp>It looks like I will have to find a suitable data type that can hold width/length/height values. I can either use some sort of struct or an array. Arrays should be the more suitable data type for this case.\u003C/p>\n\u003Cp>\u003Ca href=\"https://doc.rust-lang.org/rust-by-example/primitives/array.html\">Arrays and Slices\u003C/a> page of Rust doc says that arrays require defining their lengths during compilation, which is not really suitable for holding the list of gift sizes since I cannot predict the length of it. So, I am going go with the alternative that can has a dynamic size: slices. The syntax looks something like this:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> empty_array\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#B392F0\">u32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>But I can use array for holding the actual sizes of each gifts respectively in arrays with fixed-sizes of three, for width, length, and height. So, arrays within a slice should do it.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [[\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>I will also need to read and parse a text file that will hold the list of gifts, with each gift size in one line in \u003Ccode>1x1x1\u003C/code> format.\u003C/p>\n\u003Cp>With a quick search, I find \u003Ccode>fs\u003C/code> module under Rust’s standard library, which has a method called \u003Ccode>read_to_string\u003C/code> that takes in a file path as its sole parameter, and returns the contents as the string.\u003C/p>\n\u003Cp>Well… not quite. Actually, it returns a \u003Ccode>Result\u003C/code> enum which has two variants, \u003Ccode>Ok()\u003C/code> and \u003Ccode>Err()\u003C/code>. If everything goes accordingly, an \u003Ccode>Ok()\u003C/code> case should resolve succesfully, giving us the string that I want. I paste the input into a file titled \u003Ccode>data.txt\u003C/code> and try to print its contents. I initially encountered an error practically saying that \u003Ccode>data.txt\u003C/code> did not exist, because Rust expected the file to be in the root directory of the project, not at the same level with \u003Ccode>main.rs\u003C/code> under \u003Ccode>src\u003C/code>. Moving it to the root did the trick. Anyway, our code now looks like this:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">fs;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [[\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> filename \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"data.txt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> fs\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">read_to_string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(filename);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    match\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        Ok\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"contents of the file: {}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, v),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        Err\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(e) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"error parsing header: {}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, e),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The \u003Ca href=\"https://doc.rust-lang.org/std/result/enum.Result.html#\">Result\u003C/a> page on docs also show some other methods for handling error cases like \u003Ccode>expect()\u003C/code>, which also looks nice (but there are some warnings about its usage, which I can wisely ignore).\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">fs;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [[\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> filename \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"data.txt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> fs\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">read_to_string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(filename)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Something went wrong\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"With text:\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">{contents}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>I now have all the contents of the file as a string in \u003Ccode>contents\u003C/code> variable. I now have to parse it. I want to split this string into separate lines first, effectively separating each gift size, then split each gift size by looking at the \u003Ccode>x\u003C/code>. Like many other languages, Rust has a \u003Ccode>split()\u003C/code> method. I can call this method with a “newline character” but, while looking for possible solutions, I also saw a method called \u003Ccode>lines()\u003C/code>, which supposedly splits a string into separate lines. I can use this one for the first part. Note that it returns a \u003Ccode>Lines\u003C/code> iterator, but it’s fine. I want to iterate on this anyway.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [[\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> filename \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"data.txt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> fs\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">read_to_string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(filename)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Something went wrong\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">lines\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">       // do stuff with line \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>I used \u003Ccode>split()\u003C/code> as mentioned, which also returns an iterator.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sizes \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'x'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>I assume that sizes can only have three elements for w/l/h, so it would be handy to directly cast them into an array of size three while also casting strings into integers so I can do math. Again, I find lots of options, the simplest being a good old \u003Ccode>for\u003C/code> loop.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sizes \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'x'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> size \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sizes {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, size);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>But I want to slowly leave the intuitive ways aside and do it the Rust way.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sizes \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'x'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">collect\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>>();\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This lets me convert the \u003Ccode>Split\u003C/code> type to a good old vector. Combining multiple searches about how to map over iterators and how to cast strings to integers, I came up with a solution like this:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sizes \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    .\u003C/span>\u003Cspan style=\"color:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'x'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    .\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">size\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> size\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">parse\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">unwrap\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    .\u003C/span>\u003Cspan style=\"color:#B392F0\">collect\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>>();\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>At this point, I realize that it is not as easy as I thought to push elements into slices in Rust so while trying to circumvent the issue. Then I realize, I now have line count of the input. So, instead of a slice, I can maybe declare an array with a fixed-size of line count?\u003C/p>\n\u003Cp>Aand, Rust did not like that too. Rust wants to see the array size at compile time, but I am trying to assign it at runtime by looking at the line count. I checked if \u003Ccode>Vec\u003C/code>s are any different than slices or arrays, and the official docs say that they are resizable, so I try using a vector instead.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">fs;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> filename \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"data.txt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> fs\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">read_to_string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(filename)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Something went wrong\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">lines\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line_count \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">clone\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> vec!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#B392F0\">vec!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; line_count];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sizes \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'x'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">size\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> size\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">parse\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">unwrap\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">collect\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>>();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        gift_list\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(sizes);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> size \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">            println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, size);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Also note that I cloned \u003Ccode>lines\u003C/code> before checking its size, otherwise it gets consumed and can no longer be used. Something’s going on here (ownership?), but I will look into this later.\u003C/p>\n\u003Cp>Cool, I can iterate over the \u003Ccode>gift_list\u003C/code> that I have put together. At this point, I can maybe call a function that takes in a vector. I devised something like this but all kinds of mutability rules threw all kinds of errors.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">fs;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> filename \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"data.txt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> fs\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">read_to_string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(filename)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Something went wrong\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">lines\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line_count \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">clone\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> vec!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#B392F0\">vec!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; line_count];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sizes \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'x'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">size\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> size\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">parse\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">unwrap\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">collect\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>>();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        gift_list\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(sizes);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> total_area\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">into_iter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">v\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#B392F0\"> calculate_area\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v))\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">sum\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, total_area);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// (2*l*w + 2*w*h + 2*h*l) + smallest side's area\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> calculate_area\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    v\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">sort\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> smallest_side \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; \u003C/span>\u003Cspan style=\"color:#6A737D\">// since vector is now sorted, we can use first two elements for smallest side\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    (\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> smallest_side\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Rust wants extra annotations for values that I want to change (mutate). I add this to function’s parameter definitions.\u003C/p>\n\u003Cp>Finally, our program seems ready to solve the first part of the puzzle.\nAnd, nice. First try! First star.\u003C/p>\n\u003Ch2 id=\"part-2\">Part 2\u003C/h2>\n\u003Cp>Elves now need ribbons to wrap the gifts. They need some to tie it and some for making a bow.\nThe required length for tying it is the length of its smallest perimeter. And the bow is equal to its cubic feet.\u003C/p>\n\u003Cp>For example, a present with dimensions 2x3x4 requires 2+2+3+3 = 10 feet of ribbon to wrap the present plus 2\u003Cem>3\u003C/em>4 = 24 feet of ribbon for the bow, for a total of 34 feet.\u003C/p>\n\u003Cp>It seems I will have to work on sorted vectors again so I move the sorting part to where I initially populate the vector, and fix mut annotation accordingly:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">fs;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> filename \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"data.txt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> fs\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">read_to_string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(filename)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Something went wrong\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">lines\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line_count \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">clone\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> vec!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#B392F0\">vec!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; line_count];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sizes \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'x'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">size\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> size\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">parse\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">unwrap\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">collect\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>>();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        sizes\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">sort\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        gift_list\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(sizes);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> total_area\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">into_iter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">v\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#B392F0\"> calculate_area\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v))\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">sum\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, total_area);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// (2*l*w + 2*w*h + 2*h*l) + smallest side's area\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> calculate_area\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> smallest_side \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; \u003C/span>\u003Cspan style=\"color:#6A737D\">// since vector is now sorted, we can use first two elements for smallest side\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    (\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> smallest_side\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>I will add two additional functions for ribbons: one for tying and one for the bow, and an additional function that adds the two.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> get_ribbon_size\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    get_smallest_perimeter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#B392F0\"> get_volume\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> get_smallest_perimeter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    (v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> get_volume\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Ccode>get_ribbon_size\u003C/code> tells me something about the second function calls argument, something with moved values… the time has come.\u003C/p>\n\u003Ch3 id=\"obligatory-sidebar-borrow-checking\">Obligatory sidebar: Borrow Checking\u003C/h3>\n\u003Cp>Rust does not utilize a garbage collector to free up memory that is not needed anymore, but they say it is as memory-safe as it gets. Rust, by design, wants to prevent us moving data around freely to better decide when to free up memory. It essentialy gives us the convenience of garbage-collection without making us manually manage the memory. All thanks to Rust’s unique ownership model.\u003C/p>\n\u003Cp>When passing data around, I can:\u003C/p>\n\u003Cul>\n\u003Cli>Directly pass the value, giving up the ownership in process\u003C/li>\n\u003Cli>Clone the value and work on the clone instead\u003C/li>\n\u003Cli>Pass a reference, letting the borrower use it until it’s done\u003C/li>\n\u003C/ul>\n\u003Cp>Putting it all together, I get something like this:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">fs;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> filename \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"data.txt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> fs\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">read_to_string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(filename)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Something went wrong\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">lines\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line_count \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">clone\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> vec!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#B392F0\">vec!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; line_count];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sizes \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'x'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">size\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> size\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">parse\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">unwrap\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">collect\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>>();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        sizes\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">sort\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        gift_list\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(sizes);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> total_area\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">clone\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">into_iter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">v\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#B392F0\"> calculate_area\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">sum\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ribbon_length\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">clone\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">into_iter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">v\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#B392F0\"> get_ribbon_size\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">v))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">sum\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"Wrapping paper needed: {}\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">Ribbon needed: {}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        total_area, ribbon_length\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// (2*l*w + 2*w*h + 2*h*l) + smallest side's area\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> calculate_area\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> smallest_side \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; \u003C/span>\u003Cspan style=\"color:#6A737D\">// since vector is now sorted, we can use first two elements for smallest side\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    (\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> smallest_side\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> get_ribbon_size\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    get_smallest_perimeter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#B392F0\"> get_volume\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> get_smallest_perimeter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    (v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> get_volume\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Again, this works as expected. Nice.\u003C/p>",{"headings":247,"localImagePaths":257,"remoteImagePaths":258,"frontmatter":259,"imagePaths":262},[248,249,250,251,252,253],{"depth":104,"slug":105,"text":106},{"depth":104,"slug":108,"text":109},{"depth":104,"slug":111,"text":112},{"depth":72,"slug":114,"text":115},{"depth":72,"slug":117,"text":118},{"depth":254,"slug":255,"text":256},3,"obligatory-sidebar-borrow-checking","Obligatory sidebar: Borrow Checking",[],[],{"slug":234,"title":237,"description":238,"pubDate":260,"draft":15,"tags":261},"2023-07-16",[18,19,41],[],"advent-of-code/2015-02.md","markdown-test",{"id":264,"data":266,"body":272,"filePath":273,"digest":274,"rendered":275,"legacyId":364},{"title":267,"draft":15,"pubDate":268,"tags":269},"Markdown Test",["Date","2000-01-01T00:00:00.000Z"],[270,271],"markdown","test","# h1 Heading 8-)\n## h2 Heading\n### h3 Heading\n#### h4 Heading\n##### h5 Heading\n###### h6 Heading\n\n\n## Horizontal Rules\n\n___\n\n---\n\n***\n\n\n## Typographic replacements\n\nEnable typographer option to see result.\n\n(c) (C) (r) (R) (tm) (TM) (p) (P) +-\n\ntest.. test... test..... test?..... test!....\n\n!!!!!! ???? ,,  -- ---\n\n\"Smartypants, double quotes\" and 'single quotes'\n\n\n## Emphasis\n\n**This is bold text**\n\n__This is bold text__\n\n*This is italic text*\n\n_This is italic text_\n\n~~Strikethrough~~\n\n\n## Blockquotes\n\n\n> Blockquotes can also be nested...\n>> ...by using additional greater-than signs right next to each other...\n> > > ...or with spaces between arrows.\n\n\n## Lists\n\nUnordered\n\n+ Create a list by starting a line with `+`, `-`, or `*`\n+ Sub-lists are made by indenting 2 spaces:\n  - Marker character change forces new list start:\n    * Ac tristique libero volutpat at\n    + Facilisis in pretium nisl aliquet\n    - Nulla volutpat aliquam velit\n+ Very easy!\n\nOrdered\n\n1. Lorem ipsum dolor sit amet\n2. Consectetur adipiscing elit\n3. Integer molestie lorem at massa\n\n\n1. You can use sequential numbers...\n1. ...or keep all the numbers as `1.`\n\nStart numbering with offset:\n\n57. foo\n1. bar\n\n\n## Code\n\nInline `code`\n\nIndented code\n\n    // Some comments\n    line 1 of code\n    line 2 of code\n    line 3 of code\n\n\nBlock code \"fences\"\n\n```\nSample text here...\n```\n\nSyntax highlighting\n\n``` js\nvar foo = function (bar) {\n  return bar++;\n};\n\nconsole.log(foo(5));\n```\n\n## Tables\n\n| Option | Description                                                               |\n| ------ | ------------------------------------------------------------------------- |\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default.    |\n| ext    | extension to be used for dest files.                                      |\n\nRight aligned columns\n\n| Option |                                                               Description |\n| -----: | ------------------------------------------------------------------------: |\n|   data | path to data files to supply the data that will be passed into templates. |\n| engine |    engine to be used for processing templates. Handlebars is the default. |\n|    ext |                                      extension to be used for dest files. |\n\n\n## Links\n\n[link text](http://dev.nodeca.com)\n\n[link with title](http://nodeca.github.io/pica/demo/ \"title text!\")\n\nAutoconverted link https://github.com/nodeca/pica (enable linkify to see)\n\n\n## Images\n\n![Minion](https://octodex.github.com/images/minion.png)\n![Stormtroopocat](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\")\n\nLike links, Images also have a footnote style syntax\n\n![Alt text][id]\n\nWith a reference later in the document defining the URL location:\n\n[id]: https://octodex.github.com/images/dojocat.jpg  \"The Dojocat\"\n\n\n## Plugins\n\nThe killer feature of `markdown-it` is very effective support of\n[syntax plugins](https://www.npmjs.org/browse/keyword/markdown-it-plugin).\n\n\n### [Emojies](https://github.com/markdown-it/markdown-it-emoji)\n\n> Classic markup: :wink: :crush: :cry: :tear: :laughing: :yum:\n>\n> Shortcuts (emoticons): :-) :-( 8-) ;)\n\nsee [how to change output](https://github.com/markdown-it/markdown-it-emoji#change-output) with twemoji.\n\n\n### [Subscript](https://github.com/markdown-it/markdown-it-sub) / [Superscript](https://github.com/markdown-it/markdown-it-sup)\n\n- 19^th^\n- H~2~O\n\n\n### [\\\u003Cins>](https://github.com/markdown-it/markdown-it-ins)\n\n++Inserted text++\n\n\n### [\\\u003Cmark>](https://github.com/markdown-it/markdown-it-mark)\n\n==Marked text==\n\n\n### [Footnotes](https://github.com/markdown-it/markdown-it-footnote)\n\nFootnote 1 link[^first].\n\nFootnote 2 link[^second].\n\nInline footnote^[Text of inline footnote] definition.\n\nDuplicated footnote reference[^second].\n\n[^first]: Footnote **can have markup**\n\n    and multiple paragraphs.\n\n[^second]: Footnote text.\n\n\n### [Definition lists](https://github.com/markdown-it/markdown-it-deflist)\n\nTerm 1\n\n:   Definition 1\nwith lazy continuation.\n\nTerm 2 with *inline markup*\n\n:   Definition 2\n\n        { some code, part of Definition 2 }\n\n    Third paragraph of definition 2.\n\n_Compact style:_\n\nTerm 1\n  ~ Definition 1\n\nTerm 2\n  ~ Definition 2a\n  ~ Definition 2b\n\n\n### [Abbreviations](https://github.com/markdown-it/markdown-it-abbr)\n\nThis is HTML abbreviation example.\n\nIt converts \"HTML\", but keep intact partial entries like \"xxxHTMLyyy\" and so on.\n\n*[HTML]: Hyper Text Markup Language\n\n### [Custom containers](https://github.com/markdown-it/markdown-it-container)\n\n::: warning\n*here be dragons*\n:::\n\n## Mermaid\n\n\n```mermaid\ngraph TD\n    A[Start] --> B{Is it working?}\n    B -->|Yes| C[Great!]\n    B -->|No| D[Debug]\n    D --> B\n```\n\n```mermaid\nflowchart TD\n\tA --> B\n\tB --> C\n\tC --> D\n\tD --> E\n\tE --> F\n\tF --> G\n\tG --> H\n\tH --> I\n\tH --> J\n\tH --> K\n\tH --> L\n\tH --> M\n\tH --> N\n\tH --> O\n\tH --> P\n```\n\n```mermaid\npie title What Voldemort doesn't have?\n         \"FRIENDS\" : 2\n         \"FAMILY\" : 3\n         \"NOSE\" : 45\n```\n\n```mermaid\nsequenceDiagram\n    participant Alice\n    participant Bob\n    Alice->>John: Hello John, how are you?\n    loop Healthcheck\n        John->>John: Fight against hypochondria\n    end\n    Note right of John: Rational thoughts \u003Cbr/>prevail!\n    John-->>Alice: Great!\n    John->>Bob: How about you?\n    Bob-->>John: Jolly good!\n```\n\n```mermaid\ngraph TB\n    sq[Square shape] --> ci((Circle shape))\n\n    subgraph A\n        od>Odd shape]-- Two line&lt;br/>edge comment --> ro\n        di{Diamond with &lt;br/> line break} -.-> ro(Rounded&lt;br>square&lt;br>shape)\n        di==>ro2(Rounded square shape)\n    end\n\n    %% Notice that no text in shape are added here instead that is appended further down\n    e --> od3>Really long text with linebreak&lt;br>in an Odd shape]\n\n    %% Comments after double percent signs\n    e((Inner / circle&lt;br>and some odd &lt;br>special characters)) --> f(,.?!+-*ز)\n\n    cyr[Cyrillic]-->cyr2((Circle shape Начало));\n\n     classDef green fill:#9f6,stroke:#333,stroke-width:2px;\n     classDef orange fill:#f96,stroke:#333,stroke-width:4px;\n     class sq,e green\n     class di orange\n```","src/content/article/markdown-test/markdown-test.md","c9a71723d0598436",{"html":276,"metadata":277},"\u003Ch1 id=\"h1-heading-8\">h1 Heading 8-)\u003C/h1>\n\u003Ch2 id=\"h2-heading\">h2 Heading\u003C/h2>\n\u003Ch3 id=\"h3-heading\">h3 Heading\u003C/h3>\n\u003Ch4 id=\"h4-heading\">h4 Heading\u003C/h4>\n\u003Ch5 id=\"h5-heading\">h5 Heading\u003C/h5>\n\u003Ch6 id=\"h6-heading\">h6 Heading\u003C/h6>\n\u003Ch2 id=\"horizontal-rules\">Horizontal Rules\u003C/h2>\n\u003Chr>\n\u003Chr>\n\u003Chr>\n\u003Ch2 id=\"typographic-replacements\">Typographic replacements\u003C/h2>\n\u003Cp>Enable typographer option to see result.\u003C/p>\n\u003Cp>(c) (C) (r) (R) (tm) (TM) (p) (P) +-\u003C/p>\n\u003Cp>test.. test… test… test?… test!…\u003C/p>\n\u003Cp>!!!!!! ???? ,,  — ---\u003C/p>\n\u003Cp>“Smartypants, double quotes” and ‘single quotes’\u003C/p>\n\u003Ch2 id=\"emphasis\">Emphasis\u003C/h2>\n\u003Cp>\u003Cstrong>This is bold text\u003C/strong>\u003C/p>\n\u003Cp>\u003Cstrong>This is bold text\u003C/strong>\u003C/p>\n\u003Cp>\u003Cem>This is italic text\u003C/em>\u003C/p>\n\u003Cp>\u003Cem>This is italic text\u003C/em>\u003C/p>\n\u003Cp>\u003Cdel>Strikethrough\u003C/del>\u003C/p>\n\u003Ch2 id=\"blockquotes\">Blockquotes\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Blockquotes can also be nested…\u003C/p>\n\u003Cblockquote>\n\u003Cp>…by using additional greater-than signs right next to each other…\u003C/p>\n\u003Cblockquote>\n\u003Cp>…or with spaces between arrows.\u003C/p>\n\u003C/blockquote>\n\u003C/blockquote>\n\u003C/blockquote>\n\u003Ch2 id=\"lists\">Lists\u003C/h2>\n\u003Cp>Unordered\u003C/p>\n\u003Cul>\n\u003Cli>Create a list by starting a line with \u003Ccode>+\u003C/code>, \u003Ccode>-\u003C/code>, or \u003Ccode>*\u003C/code>\u003C/li>\n\u003Cli>Sub-lists are made by indenting 2 spaces:\n\u003Cul>\n\u003Cli>Marker character change forces new list start:\n\u003Cul>\n\u003Cli>Ac tristique libero volutpat at\u003C/li>\n\u003C/ul>\n\u003Cul>\n\u003Cli>Facilisis in pretium nisl aliquet\u003C/li>\n\u003C/ul>\n\u003Cul>\n\u003Cli>Nulla volutpat aliquam velit\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Very easy!\u003C/li>\n\u003C/ul>\n\u003Cp>Ordered\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>Lorem ipsum dolor sit amet\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Consectetur adipiscing elit\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Integer molestie lorem at massa\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>You can use sequential numbers…\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>…or keep all the numbers as \u003Ccode>1.\u003C/code>\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003Cp>Start numbering with offset:\u003C/p>\n\u003Col start=\"57\">\n\u003Cli>foo\u003C/li>\n\u003Cli>bar\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"code\">Code\u003C/h2>\n\u003Cp>Inline \u003Ccode>code\u003C/code>\u003C/p>\n\u003Cp>Indented code\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>// Some comments\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>line 1 of code\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>line 2 of code\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>line 3 of code\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Block code “fences”\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Sample text here...\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Syntax highlighting\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#B392F0\"> foo\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">bar\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> bar\u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">foo\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">));\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"tables\">Tables\u003C/h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Option\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>data\u003C/td>\u003Ctd>path to data files to supply the data that will be passed into templates.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>engine\u003C/td>\u003Ctd>engine to be used for processing templates. Handlebars is the default.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>ext\u003C/td>\u003Ctd>extension to be used for dest files.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Cp>Right aligned columns\u003C/p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth align=\"right\">Option\u003C/th>\u003Cth align=\"right\">Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd align=\"right\">data\u003C/td>\u003Ctd align=\"right\">path to data files to supply the data that will be passed into templates.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd align=\"right\">engine\u003C/td>\u003Ctd align=\"right\">engine to be used for processing templates. Handlebars is the default.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd align=\"right\">ext\u003C/td>\u003Ctd align=\"right\">extension to be used for dest files.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Ch2 id=\"links\">Links\u003C/h2>\n\u003Cp>\u003Ca href=\"http://dev.nodeca.com\">link text\u003C/a>\u003C/p>\n\u003Cp>\u003Ca href=\"http://nodeca.github.io/pica/demo/\" title=\"title text!\">link with title\u003C/a>\u003C/p>\n\u003Cp>Autoconverted link \u003Ca href=\"https://github.com/nodeca/pica\">https://github.com/nodeca/pica\u003C/a> (enable linkify to see)\u003C/p>\n\u003Ch2 id=\"images\">Images\u003C/h2>\n\u003Cp>\u003Cimg src=\"https://octodex.github.com/images/minion.png\" alt=\"Minion\">\n\u003Cimg src=\"https://octodex.github.com/images/stormtroopocat.jpg\" alt=\"Stormtroopocat\" title=\"The Stormtroopocat\">\u003C/p>\n\u003Cp>Like links, Images also have a footnote style syntax\u003C/p>\n\u003Cp>\u003Cimg src=\"https://octodex.github.com/images/dojocat.jpg\" alt=\"Alt text\" title=\"The Dojocat\">\u003C/p>\n\u003Cp>With a reference later in the document defining the URL location:\u003C/p>\n\u003Ch2 id=\"plugins\">Plugins\u003C/h2>\n\u003Cp>The killer feature of \u003Ccode>markdown-it\u003C/code> is very effective support of\n\u003Ca href=\"https://www.npmjs.org/browse/keyword/markdown-it-plugin\">syntax plugins\u003C/a>.\u003C/p>\n\u003Ch3 id=\"emojies\">\u003Ca href=\"https://github.com/markdown-it/markdown-it-emoji\">Emojies\u003C/a>\u003C/h3>\n\u003Cblockquote>\n\u003Cp>Classic markup: :wink: :crush: :cry: :tear: :laughing: :yum:\u003C/p>\n\u003Cp>Shortcuts (emoticons): :-) :-( 8-) ;)\u003C/p>\n\u003C/blockquote>\n\u003Cp>see \u003Ca href=\"https://github.com/markdown-it/markdown-it-emoji#change-output\">how to change output\u003C/a> with twemoji.\u003C/p>\n\u003Ch3 id=\"subscript--superscript\">\u003Ca href=\"https://github.com/markdown-it/markdown-it-sub\">Subscript\u003C/a> / \u003Ca href=\"https://github.com/markdown-it/markdown-it-sup\">Superscript\u003C/a>\u003C/h3>\n\u003Cul>\n\u003Cli>19^th^\u003C/li>\n\u003Cli>H\u003Cdel>2\u003C/del>O\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"ins\">\u003Ca href=\"https://github.com/markdown-it/markdown-it-ins\">&#x3C;ins>\u003C/a>\u003C/h3>\n\u003Cp>++Inserted text++\u003C/p>\n\u003Ch3 id=\"mark\">\u003Ca href=\"https://github.com/markdown-it/markdown-it-mark\">&#x3C;mark>\u003C/a>\u003C/h3>\n\u003Cp>==Marked text==\u003C/p>\n\u003Ch3 id=\"footnotes\">\u003Ca href=\"https://github.com/markdown-it/markdown-it-footnote\">Footnotes\u003C/a>\u003C/h3>\n\u003Cp>Footnote 1 link\u003Csup>\u003Ca href=\"#user-content-fn-first\" id=\"user-content-fnref-first\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">1\u003C/a>\u003C/sup>.\u003C/p>\n\u003Cp>Footnote 2 link\u003Csup>\u003Ca href=\"#user-content-fn-second\" id=\"user-content-fnref-second\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">2\u003C/a>\u003C/sup>.\u003C/p>\n\u003Cp>Inline footnote^[Text of inline footnote] definition.\u003C/p>\n\u003Cp>Duplicated footnote reference\u003Csup>\u003Ca href=\"#user-content-fn-second\" id=\"user-content-fnref-second-2\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">2\u003C/a>\u003C/sup>.\u003C/p>\n\u003Ch3 id=\"definition-lists\">\u003Ca href=\"https://github.com/markdown-it/markdown-it-deflist\">Definition lists\u003C/a>\u003C/h3>\n\u003Cp>Term 1\u003C/p>\n\u003Cp>:   Definition 1\nwith lazy continuation.\u003C/p>\n\u003Cp>Term 2 with \u003Cem>inline markup\u003C/em>\u003C/p>\n\u003Cp>:   Definition 2\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>    { some code, part of Definition 2 }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Third paragraph of definition 2.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cem>Compact style:\u003C/em>\u003C/p>\n\u003Cp>Term 1\n~ Definition 1\u003C/p>\n\u003Cp>Term 2\n~ Definition 2a\n~ Definition 2b\u003C/p>\n\u003Ch3 id=\"abbreviations\">\u003Ca href=\"https://github.com/markdown-it/markdown-it-abbr\">Abbreviations\u003C/a>\u003C/h3>\n\u003Cp>This is HTML abbreviation example.\u003C/p>\n\u003Cp>It converts “HTML”, but keep intact partial entries like “xxxHTMLyyy” and so on.\u003C/p>\n\u003Cp>*[HTML]: Hyper Text Markup Language\u003C/p>\n\u003Ch3 id=\"custom-containers\">\u003Ca href=\"https://github.com/markdown-it/markdown-it-container\">Custom containers\u003C/a>\u003C/h3>\n\u003Cp>::: warning\n\u003Cem>here be dragons\u003C/em>\n:::\u003C/p>\n\u003Ch2 id=\"mermaid\">Mermaid\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"mermaid\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">graph TD\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    A[Start] --> B{Is it working?}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    B -->|Yes| C[Great!]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    B -->|No| D[Debug]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    D --> B\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"mermaid\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">flowchart TD\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\tA --> B\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\tB --> C\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\tC --> D\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\tD --> E\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\tE --> F\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\tF --> G\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\tG --> H\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\tH --> I\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\tH --> J\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\tH --> K\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\tH --> L\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\tH --> M\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\tH --> N\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\tH --> O\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\tH --> P\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"mermaid\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">pie title What Voldemort doesn't have?\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">         \"FRIENDS\" : 2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">         \"FAMILY\" : 3\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">         \"NOSE\" : 45\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"mermaid\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">sequenceDiagram\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    participant Alice\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    participant Bob\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    Alice->>John: Hello John, how are you?\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    loop Healthcheck\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        John->>John: Fight against hypochondria\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    end\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    Note right of John: Rational thoughts &#x3C;br/>prevail!\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    John-->>Alice: Great!\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    John->>Bob: How about you?\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    Bob-->>John: Jolly good!\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"mermaid\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">graph TB\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    sq[Square shape] --> ci((Circle shape))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    subgraph A\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        od>Odd shape]-- Two line&#x26;lt;br/>edge comment --> ro\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        di{Diamond with &#x26;lt;br/> line break} -.-> ro(Rounded&#x26;lt;br>square&#x26;lt;br>shape)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        di==>ro2(Rounded square shape)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    end\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    %% Notice that no text in shape are added here instead that is appended further down\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    e --> od3>Really long text with linebreak&#x26;lt;br>in an Odd shape]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    %% Comments after double percent signs\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    e((Inner / circle&#x26;lt;br>and some odd &#x26;lt;br>special characters)) --> f(,.?!+-*ز)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    cyr[Cyrillic]-->cyr2((Circle shape Начало));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">     classDef green fill:#9f6,stroke:#333,stroke-width:2px;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">     classDef orange fill:#f96,stroke:#333,stroke-width:4px;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">     class sq,e green\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">     class di orange\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Csection data-footnotes=\"\" class=\"footnotes\">\u003Ch2 class=\"sr-only\" id=\"footnote-label\">Footnotes\u003C/h2>\n\u003Col>\n\u003Cli id=\"user-content-fn-first\">\n\u003Cp>Footnote \u003Cstrong>can have markup\u003C/strong>\u003C/p>\n\u003Cp>and multiple paragraphs. \u003Ca href=\"#user-content-fnref-first\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-second\">\n\u003Cp>Footnote text. \u003Ca href=\"#user-content-fnref-second\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩\u003C/a> \u003Ca href=\"#user-content-fnref-second-2\" data-footnote-backref=\"\" aria-label=\"Back to reference 2-2\" class=\"data-footnote-backref\">↩\u003Csup>2\u003C/sup>\u003C/a>\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/section>",{"headings":278,"localImagePaths":358,"remoteImagePaths":359,"frontmatter":360,"imagePaths":363},[279,283,286,289,292,295,299,302,305,308,311,314,317,320,323,326,329,332,335,338,341,344,347,350,353,356],{"depth":280,"slug":281,"text":282},1,"h1-heading-8","h1 Heading 8-)",{"depth":72,"slug":284,"text":285},"h2-heading","h2 Heading",{"depth":254,"slug":287,"text":288},"h3-heading","h3 Heading",{"depth":79,"slug":290,"text":291},"h4-heading","h4 Heading",{"depth":104,"slug":293,"text":294},"h5-heading","h5 Heading",{"depth":296,"slug":297,"text":298},6,"h6-heading","h6 Heading",{"depth":72,"slug":300,"text":301},"horizontal-rules","Horizontal Rules",{"depth":72,"slug":303,"text":304},"typographic-replacements","Typographic replacements",{"depth":72,"slug":306,"text":307},"emphasis","Emphasis",{"depth":72,"slug":309,"text":310},"blockquotes","Blockquotes",{"depth":72,"slug":312,"text":313},"lists","Lists",{"depth":72,"slug":315,"text":316},"code","Code",{"depth":72,"slug":318,"text":319},"tables","Tables",{"depth":72,"slug":321,"text":322},"links","Links",{"depth":72,"slug":324,"text":325},"images","Images",{"depth":72,"slug":327,"text":328},"plugins","Plugins",{"depth":254,"slug":330,"text":331},"emojies","Emojies",{"depth":254,"slug":333,"text":334},"subscript--superscript","Subscript / Superscript",{"depth":254,"slug":336,"text":337},"ins","\u003Cins>",{"depth":254,"slug":339,"text":340},"mark","\u003Cmark>",{"depth":254,"slug":342,"text":343},"footnotes","Footnotes",{"depth":254,"slug":345,"text":346},"definition-lists","Definition lists",{"depth":254,"slug":348,"text":349},"abbreviations","Abbreviations",{"depth":254,"slug":351,"text":352},"custom-containers","Custom containers",{"depth":72,"slug":354,"text":355},"mermaid","Mermaid",{"depth":72,"slug":357,"text":343},"footnote-label",[],[],{"slug":264,"title":267,"pubDate":361,"draft":15,"tags":362},"2000-01-01",[270,271],[],"markdown-test/markdown-test.md","scanning-process",{"id":365,"data":367,"body":370,"filePath":371,"digest":372,"rendered":373,"legacyId":382},{"title":368,"draft":15,"pubDate":369},"Negative film scanning with DSLR",["Date","2025-09-15T00:00:00.000Z"],"...","src/content/article/photography/scanning/process/scanning-process.md","3e7d2fb6387374e5",{"html":374,"metadata":375},"\u003Cp>…\u003C/p>",{"headings":376,"localImagePaths":377,"remoteImagePaths":378,"frontmatter":379,"imagePaths":381},[],[],[],{"slug":365,"title":368,"pubDate":380,"draft":15},["Date","2025-09-15T00:00:00.000Z"],[],"photography/scanning/process/scanning-process.md","scanning-rig",{"id":383,"data":385,"body":370,"filePath":387,"digest":388,"rendered":389,"legacyId":397},{"title":368,"draft":15,"pubDate":386},["Date","2025-09-15T00:00:00.000Z"],"src/content/article/photography/scanning/rig/scanning-rig.md","1dd4065e6e953930",{"html":374,"metadata":390},{"headings":391,"localImagePaths":392,"remoteImagePaths":393,"frontmatter":394,"imagePaths":396},[],[],[],{"slug":383,"title":368,"pubDate":395,"draft":15},["Date","2025-09-15T00:00:00.000Z"],[],"photography/scanning/rig/scanning-rig.md","pinhole-redesign",{"id":398,"data":400,"body":406,"filePath":407,"assetImports":408,"digest":419,"rendered":420,"legacyId":439},{"title":401,"draft":59,"pubDate":402,"tags":403},"Pinhole Redesign",["Date","2023-07-20T00:00:00.000Z"],[404,405],"photography","pinhole","###### This is a write-in-progress post that I will be updating over time.\n\nI was into designing and building my own cameras roughly ten years ago, and I have been meaning to get back into it for quite some time now. I recently came across some of the old photographs I took with these cameras and it rekindled the passion I had for the craft.\n\nI decided to build several different cameras again, fixing the issues that previous builds had, and document the whole process in a series of blog posts.\n\nIf everything goes according to plan, I will build:\n- A 35mm panoramic with curved film plane\n- A compact, half frame 35mm with short focal length\n- A 6x6\n\nI want all of these to sport a 1/4\" tripod mount, replaceable pinhole plates, magnetic filter mounts, a lockable shutter that can be operated manually or with a cable release, a screw-lock body, leak-safe and precision film advance knobs, film counter (for medium-format), magnetic accessory mounts (spirit levels, viewfinders etc.), and hassle-free film spools (especially for the 35mm).\n\n## The Old Panoramic Pinhole\n\n![img](./assets/pinhole-old.jpeg)\n![img](./assets/pinhole-old-2.jpeg)\n\nThis was my favorite camera to shoot with for a long time. I made it from whatever material I had at home at the time: wood from an old cigar box, metal sheet from a soda can, knobs from skateboard bushings, one spool-catch (or whatever they are called) from an old FM radio antenna and the other one from a scrapped Zorki 4K, packaging paper, electrical tape, and other random stuff that I found around.\n\nI had even drawn a now-lost schematic diagrams before building it to make sure I was doing everything right.\n\nAs you can tell, it is a product-of-love but it had its problems.\n\nNamely, unintentional multiple exposures:\n\n![img](./assets/problem-1.jpeg)\n![img](./assets/problem-2.jpeg)\n\nPoor film alignment:\n\n![img](./assets/problem-3.jpeg)\n\nOccasional light leaks:\n\n![img](./assets/problem-4.jpeg)\n\nand others that I cannot remember for now. So, it wasn't the most reliable thing ever. But, when it worked, it worked beautifully.\n\n![img](./assets/panoramic-1.jpeg)\n![img](./assets/panoramic-2.jpeg)\n![img](./assets/panoramic-3.jpeg)\n![img](./assets/panoramic-4.jpeg)\n\n## Redesign\n\nI will start with the design process. BRB!","src/content/article/photography/pinhole/pinhole-redesign.md",[409,410,411,412,413,414,415,416,417,418],"./assets/pinhole-old.jpeg","./assets/pinhole-old-2.jpeg","./assets/problem-1.jpeg","./assets/problem-2.jpeg","./assets/problem-3.jpeg","./assets/problem-4.jpeg","./assets/panoramic-1.jpeg","./assets/panoramic-2.jpeg","./assets/panoramic-3.jpeg","./assets/panoramic-4.jpeg","8c3b3b8e3a61d25f",{"html":421,"metadata":422},"\u003Ch6 id=\"this-is-a-write-in-progress-post-that-i-will-be-updating-over-time\">This is a write-in-progress post that I will be updating over time.\u003C/h6>\n\u003Cp>I was into designing and building my own cameras roughly ten years ago, and I have been meaning to get back into it for quite some time now. I recently came across some of the old photographs I took with these cameras and it rekindled the passion I had for the craft.\u003C/p>\n\u003Cp>I decided to build several different cameras again, fixing the issues that previous builds had, and document the whole process in a series of blog posts.\u003C/p>\n\u003Cp>If everything goes according to plan, I will build:\u003C/p>\n\u003Cul>\n\u003Cli>A 35mm panoramic with curved film plane\u003C/li>\n\u003Cli>A compact, half frame 35mm with short focal length\u003C/li>\n\u003Cli>A 6x6\u003C/li>\n\u003C/ul>\n\u003Cp>I want all of these to sport a 1/4” tripod mount, replaceable pinhole plates, magnetic filter mounts, a lockable shutter that can be operated manually or with a cable release, a screw-lock body, leak-safe and precision film advance knobs, film counter (for medium-format), magnetic accessory mounts (spirit levels, viewfinders etc.), and hassle-free film spools (especially for the 35mm).\u003C/p>\n\u003Ch2 id=\"the-old-panoramic-pinhole\">The Old Panoramic Pinhole\u003C/h2>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./assets/pinhole-old.jpeg&#x22;,&#x22;alt&#x22;:&#x22;img&#x22;,&#x22;index&#x22;:0}\">\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./assets/pinhole-old-2.jpeg&#x22;,&#x22;alt&#x22;:&#x22;img&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>This was my favorite camera to shoot with for a long time. I made it from whatever material I had at home at the time: wood from an old cigar box, metal sheet from a soda can, knobs from skateboard bushings, one spool-catch (or whatever they are called) from an old FM radio antenna and the other one from a scrapped Zorki 4K, packaging paper, electrical tape, and other random stuff that I found around.\u003C/p>\n\u003Cp>I had even drawn a now-lost schematic diagrams before building it to make sure I was doing everything right.\u003C/p>\n\u003Cp>As you can tell, it is a product-of-love but it had its problems.\u003C/p>\n\u003Cp>Namely, unintentional multiple exposures:\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./assets/problem-1.jpeg&#x22;,&#x22;alt&#x22;:&#x22;img&#x22;,&#x22;index&#x22;:0}\">\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./assets/problem-2.jpeg&#x22;,&#x22;alt&#x22;:&#x22;img&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>Poor film alignment:\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./assets/problem-3.jpeg&#x22;,&#x22;alt&#x22;:&#x22;img&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>Occasional light leaks:\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./assets/problem-4.jpeg&#x22;,&#x22;alt&#x22;:&#x22;img&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>and others that I cannot remember for now. So, it wasn’t the most reliable thing ever. But, when it worked, it worked beautifully.\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./assets/panoramic-1.jpeg&#x22;,&#x22;alt&#x22;:&#x22;img&#x22;,&#x22;index&#x22;:0}\">\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./assets/panoramic-2.jpeg&#x22;,&#x22;alt&#x22;:&#x22;img&#x22;,&#x22;index&#x22;:0}\">\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./assets/panoramic-3.jpeg&#x22;,&#x22;alt&#x22;:&#x22;img&#x22;,&#x22;index&#x22;:0}\">\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./assets/panoramic-4.jpeg&#x22;,&#x22;alt&#x22;:&#x22;img&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Ch2 id=\"redesign\">Redesign\u003C/h2>\n\u003Cp>I will start with the design process. BRB!\u003C/p>",{"headings":423,"localImagePaths":433,"remoteImagePaths":434,"frontmatter":435,"imagePaths":438},[424,427,430],{"depth":296,"slug":425,"text":426},"this-is-a-write-in-progress-post-that-i-will-be-updating-over-time","This is a write-in-progress post that I will be updating over time.",{"depth":72,"slug":428,"text":429},"the-old-panoramic-pinhole","The Old Panoramic Pinhole",{"depth":72,"slug":431,"text":432},"redesign","Redesign",[409,410,411,412,413,414,415,416,417,418],[],{"slug":398,"title":401,"pubDate":436,"draft":59,"tags":437},"2023-07-20",[404,405],[409,410,411,412,413,414,415,416,417,418],"photography/pinhole/pinhole-redesign.md",{"id":63,"data":441,"body":446,"filePath":447,"assetImports":448,"digest":451,"rendered":452,"legacyId":462},{"title":442,"draft":59,"pubDate":443,"tags":444},"Homelab",["Date","2023-07-13T00:00:00.000Z"],[63,445],"networking","_I originally wrote this blog post in 2023. Since then, my setup has changed quite a bit so here’s the updated version for September 2025!_\n\nI run a simple home lab that covers everything I need.\n\nThe setup is a single Proxmox server hosting around 20 LXCs. Among them are a development container, the _arr_ stack, AdGuard, Syncthing, Gitea, Proxmox Backup Server, and a few others. The server has three HDDs, totaling 6 TB of storage. Using [mergerfs](https://github.com/trapexit/mergerfs), I combine them into one directory, so I don’t have to juggle mounts or manually move files around to manage space.\n\nBackups are handled weekly through Proxmox Backup Server, and an Rclone LXC pushes those backup files to Google Drive. I don’t bother backing up anything that can easily be pulled from the internet again so only the LXCs are included in the backup job. Nothing on the server is exposed publicly to the internet, since I never need remote access to anything I have on my network when I’m away from home.\n\nFor DNS, my Deco mesh points to AdGuard, giving me network-wide blocking across all devices.\n\nEverything is mounted neatly, zip-tied to a small wooden pallet screwed to the wall, and all cables, including the ethernet cable running to the secondary Deco unit, are routed cleanly through cable channels.\n\n![lab-1](./assets/lab.png \"Homelab\")\n\nNetwork:\n\n![lab-2](./assets/network.png \"Network\")","src/content/article/homelab/homelab/homelab.md",[449,450],"./assets/lab.png","./assets/network.png","9443760868a44ae0",{"html":453,"metadata":454},"\u003Cp>\u003Cem>I originally wrote this blog post in 2023. Since then, my setup has changed quite a bit so here’s the updated version for September 2025!\u003C/em>\u003C/p>\n\u003Cp>I run a simple home lab that covers everything I need.\u003C/p>\n\u003Cp>The setup is a single Proxmox server hosting around 20 LXCs. Among them are a development container, the \u003Cem>arr\u003C/em> stack, AdGuard, Syncthing, Gitea, Proxmox Backup Server, and a few others. The server has three HDDs, totaling 6 TB of storage. Using \u003Ca href=\"https://github.com/trapexit/mergerfs\">mergerfs\u003C/a>, I combine them into one directory, so I don’t have to juggle mounts or manually move files around to manage space.\u003C/p>\n\u003Cp>Backups are handled weekly through Proxmox Backup Server, and an Rclone LXC pushes those backup files to Google Drive. I don’t bother backing up anything that can easily be pulled from the internet again so only the LXCs are included in the backup job. Nothing on the server is exposed publicly to the internet, since I never need remote access to anything I have on my network when I’m away from home.\u003C/p>\n\u003Cp>For DNS, my Deco mesh points to AdGuard, giving me network-wide blocking across all devices.\u003C/p>\n\u003Cp>Everything is mounted neatly, zip-tied to a small wooden pallet screwed to the wall, and all cables, including the ethernet cable running to the secondary Deco unit, are routed cleanly through cable channels.\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./assets/lab.png&#x22;,&#x22;alt&#x22;:&#x22;lab-1&#x22;,&#x22;title&#x22;:&#x22;Homelab&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>Network:\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./assets/network.png&#x22;,&#x22;alt&#x22;:&#x22;lab-2&#x22;,&#x22;title&#x22;:&#x22;Network&#x22;,&#x22;index&#x22;:0}\">\u003C/p>",{"headings":455,"localImagePaths":456,"remoteImagePaths":457,"frontmatter":458,"imagePaths":461},[],[449,450],[],{"slug":63,"title":442,"pubDate":459,"draft":59,"tags":460},["Date","2023-07-13T00:00:00.000Z"],[63,445],[449,450],"homelab/homelab/homelab.md"]
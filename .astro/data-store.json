[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.13.7","content-config-digest","55860a7c4102fd71","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://blog.ozenc.io\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":true,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"mermaid\",\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[null],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"staticImportMetaEnv\":false,\"chromeDevtoolsWorkspace\":false},\"legacy\":{\"collections\":false}}","article",["Map",11,12,39,40,61,62,83,84,121,122,147,148,177,178,206,207,231,232,250,251,280,281,323,324],"homelab",{"id":11,"data":13,"body":19,"filePath":20,"assetImports":21,"digest":23,"rendered":24,"legacyId":38},{"title":14,"draft":15,"pubDate":16,"tags":17},"Da homelab",false,["Date","2023-07-13T00:00:00.000Z"],[11,18],"networking","Inspired by [this post](https://www.reddit.com/r/homelab/comments/14wcyh9/finally_made_a_drawing_of_my_crazy_homelab_house/), I decided to draw a diagram of my very simple home server/network setup with the goal of documenting how it evolves over time (it will, I have the itch).\n\n![homelab](./homelab.png \"Homelab\")\n\n- The modem is in a very awkward position and I can neither move it nor lay ethernet, so I can only rely on wireless mesh.\n\n### Resources\n- [Draw.io file](./homelab.drawio)","src/content/article/homelab/homelab.md",[22],"./homelab.png","91734bbe9f806f8a",{"html":25,"metadata":26},"\u003Cp>Inspired by \u003Ca href=\"https://www.reddit.com/r/homelab/comments/14wcyh9/finally_made_a_drawing_of_my_crazy_homelab_house/\">this post\u003C/a>, I decided to draw a diagram of my very simple home server/network setup with the goal of documenting how it evolves over time (it will, I have the itch).\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./homelab.png&#x22;,&#x22;alt&#x22;:&#x22;homelab&#x22;,&#x22;title&#x22;:&#x22;Homelab&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cul>\n\u003Cli>The modem is in a very awkward position and I can neither move it nor lay ethernet, so I can only rely on wireless mesh.\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"resources\">Resources\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Ca href=\"./homelab.drawio\">Draw.io file\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":27,"localImagePaths":32,"remoteImagePaths":33,"frontmatter":34,"imagePaths":37},[28],{"depth":29,"slug":30,"text":31},3,"resources","Resources",[22],[],{"slug":11,"title":14,"pubDate":35,"draft":15,"tags":36},"2023-07-13",[11,18],[22],"homelab/homelab.md","advent-of-code-intro",{"id":39,"data":41,"body":47,"filePath":48,"digest":49,"rendered":50,"legacyId":60},{"title":42,"draft":15,"pubDate":43,"tags":44},"Advent of Code: Intro",["Date","2023-07-14T00:00:00.000Z"],[45,46],"advent-of-code","advent-of-code-2015","Rust, Haskell, OCaml, Elixir, Golang... I want to learn them all. But going through docs or books is not always that much fun, and I want to keep the learning journey fun.\n\nI decided to use [Advent Of Code](https://adventofcode.com/) puzzles as the bedrock for language learning; dedicating each event year to one language and documenting everything in a long series of blog posts as I go about solving these puzzles. This should provide a decent introduction to the language as solving these require knowing the fundamentals of the language; variables, types, methods, structs, control flow, error handling, loops, maybe even file operations and data processing. They do not seem to take you to other important subjects like async programming, network operations, 3rd party packages etc., but I can always do some extra projects for these if I end up liking the language.\n\nI intend to learn the specifics about the language with simple searches to keep it concise.\n\nThe code will live in [this repo](https://github.com/Ozencb/aoc).\n\nThe first language of choice is Rust, and I will start from the 2015 event. On to learning!","src/content/article/advent-of-code/intro.md","280b41387f628c96",{"html":51,"metadata":52},"\u003Cp>Rust, Haskell, OCaml, Elixir, Golang… I want to learn them all. But going through docs or books is not always that much fun, and I want to keep the learning journey fun.\u003C/p>\n\u003Cp>I decided to use \u003Ca href=\"https://adventofcode.com/\">Advent Of Code\u003C/a> puzzles as the bedrock for language learning; dedicating each event year to one language and documenting everything in a long series of blog posts as I go about solving these puzzles. This should provide a decent introduction to the language as solving these require knowing the fundamentals of the language; variables, types, methods, structs, control flow, error handling, loops, maybe even file operations and data processing. They do not seem to take you to other important subjects like async programming, network operations, 3rd party packages etc., but I can always do some extra projects for these if I end up liking the language.\u003C/p>\n\u003Cp>I intend to learn the specifics about the language with simple searches to keep it concise.\u003C/p>\n\u003Cp>The code will live in \u003Ca href=\"https://github.com/Ozencb/aoc\">this repo\u003C/a>.\u003C/p>\n\u003Cp>The first language of choice is Rust, and I will start from the 2015 event. On to learning!\u003C/p>",{"headings":53,"localImagePaths":54,"remoteImagePaths":55,"frontmatter":56,"imagePaths":59},[],[],[],{"slug":39,"title":42,"pubDate":57,"draft":15,"tags":58},"2023-07-14",[45,46],[],"advent-of-code/intro.md","rust-traits",{"id":61,"data":63,"filePath":70,"digest":71,"rendered":72,"legacyId":82},{"title":64,"description":65,"draft":66,"pubDate":67,"tags":68},"Traits","Rust Fever",true,["Date","2023-07-19T00:00:00.000Z"],[69],"rust","src/content/article/rust/traits.md","db2e8c605f26a5c4",{"html":73,"metadata":74},"",{"headings":75,"localImagePaths":76,"remoteImagePaths":77,"frontmatter":78,"imagePaths":81},[],[],[],{"slug":61,"title":64,"description":65,"pubDate":79,"draft":66,"tags":80},"2023-07-19",[69],[],"rust/traits.md","advent-of-code-2015-05",{"id":83,"data":85,"body":90,"filePath":91,"digest":92,"rendered":93,"legacyId":120},{"title":86,"description":87,"draft":66,"pubDate":88,"tags":89},"The Ideal Stocking Stuffer","AoC 2015 with Rust - Day 5",["Date","2023-08-08T00:00:00.000Z"],[45,46,69],"##### [Link to problem](https://adventofcode.com/2015/day/5)\n##### [Source of the final solution](https://github.com/Ozencb/aoc/tree/main/aoc-2015-05)\n##### [Other posts in the series](/tags/advent-of-code)\n\n## Part 1\n\nSanta is trying to figure out which strings are naughty and which are nice.\n\nNice string rules:\n- Contains at least three vowels\n- Contains at least one letter that appears twice consecutively\n- Should not contain these strings: `ab`, `cd`, `pq`, `xy`\n\nI want to make a function for each rule, then check each string if it complies with all of these rules.\nAnd an extra challenge for myself: make it as functional as possible. No mutable arrays, no side-effects.\n\n\n```rust\nuse std::fs;\n\nfn has_consecutive_chars(text: &str) -> bool {\n    text.chars()\n        .collect::\u003CVec\u003C_>>()\n        .windows(2)\n        .any(|c| c[0] == c[1])\n}\n\nfn get_recurring_char_count(text: &str, char_set: &[char]) -> usize {\n    text.chars().filter(|c| char_set.contains(c)).count()\n}\n\nfn has_greater_number_of_vowels_than(text: &str, vowel_count: usize) -> bool {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    get_recurring_char_count(text, &vowels) >= vowel_count\n}\n\nfn contains_strings(text: &str, arr: &[&str]) -> bool {\n    arr.iter().any(|str| text.contains(str))\n}\n\nfn main() {\n    let forbidden_strings = [\"ab\", \"cd\", \"pq\", \"xy\"];\n    let filename = \"data.txt\";\n\n    let contents = fs::read_to_string(filename).expect(\"Something went wrong\");\n\n    let nice_string_count = contents\n        .lines()\n        .filter(|line| {\n            has_greater_number_of_vowels_than(line, 3)\n                && has_consecutive_chars(line)\n                && !contains_strings(line, &forbidden_strings)\n        })\n        .count();\n\n    println!(\"{:?}\", nice_string_count)\n}\n```\n\nThis all works nicely. I am still a new to the functional paradigm and I know that Rust wasn't designed with functional concepts in mind, but it is fun nonetheless. \n\nI want to keep introducing more functional concepts in these blog series as I learn more about it in the future.\n\n## Part 2\n\nFor part two, we will have to make some significant changes to our code because the rules for deciding whether a string is nice or not are all different now.\n\nA nice string must now have both:\n- Pair/pairs of of non-overlapping letters appearing more than once .It can be `xyxy` because it has two `xy`s, or `aabcdaa` because it has a pair of `aa`s in it. But `aaa` does not satisfy the requirement because the `a` in the middle overlaps with two different `aa` pairs.\n- A letter that repeats itself with another letter between them, like `xyx` or `bcb` or `aaa`","src/content/article/advent-of-code/2015-05.md","8a6c194398de0a4a",{"html":94,"metadata":95},"\u003Ch5 id=\"link-to-problem\">\u003Ca href=\"https://adventofcode.com/2015/day/5\">Link to problem\u003C/a>\u003C/h5>\n\u003Ch5 id=\"source-of-the-final-solution\">\u003Ca href=\"https://github.com/Ozencb/aoc/tree/main/aoc-2015-05\">Source of the final solution\u003C/a>\u003C/h5>\n\u003Ch5 id=\"other-posts-in-the-series\">\u003Ca href=\"/tags/advent-of-code\">Other posts in the series\u003C/a>\u003C/h5>\n\u003Ch2 id=\"part-1\">Part 1\u003C/h2>\n\u003Cp>Santa is trying to figure out which strings are naughty and which are nice.\u003C/p>\n\u003Cp>Nice string rules:\u003C/p>\n\u003Cul>\n\u003Cli>Contains at least three vowels\u003C/li>\n\u003Cli>Contains at least one letter that appears twice consecutively\u003C/li>\n\u003Cli>Should not contain these strings: \u003Ccode>ab\u003C/code>, \u003Ccode>cd\u003C/code>, \u003Ccode>pq\u003C/code>, \u003Ccode>xy\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Cp>I want to make a function for each rule, then check each string if it complies with all of these rules.\nAnd an extra challenge for myself: make it as functional as possible. No mutable arrays, no side-effects.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">fs;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> has_consecutive_chars\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(text\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> bool\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    text\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">chars\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">collect\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;_>>()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">windows\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">any\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">c\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> c[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> c[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">])\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> get_recurring_char_count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(text\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, char_set\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#B392F0\">char\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> usize\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    text\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">chars\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">filter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">c\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> char_set\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">contains\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(c))\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> has_greater_number_of_vowels_than\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(text\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, vowel_count\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> usize\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> bool\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> vowels \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'a'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'e'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'i'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'o'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'u'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    get_recurring_char_count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(text, \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">vowels) \u003C/span>\u003Cspan style=\"color:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> vowel_count\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> contains_strings\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(text\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, arr\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> bool\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    arr\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">iter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">any\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#B392F0\">str\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> text\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">contains\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> forbidden_strings \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"ab\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"cd\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"pq\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"xy\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> filename \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"data.txt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> fs\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">read_to_string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(filename)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Something went wrong\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> nice_string_count \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">lines\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">filter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">line\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">            has_greater_number_of_vowels_than\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(line, \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\"> has_consecutive_chars\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(line)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#F97583\"> !\u003C/span>\u003Cspan style=\"color:#B392F0\">contains_strings\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(line, \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">forbidden_strings)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{:?}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, nice_string_count)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This all works nicely. I am still a new to the functional paradigm and I know that Rust wasn’t designed with functional concepts in mind, but it is fun nonetheless.\u003C/p>\n\u003Cp>I want to keep introducing more functional concepts in these blog series as I learn more about it in the future.\u003C/p>\n\u003Ch2 id=\"part-2\">Part 2\u003C/h2>\n\u003Cp>For part two, we will have to make some significant changes to our code because the rules for deciding whether a string is nice or not are all different now.\u003C/p>\n\u003Cp>A nice string must now have both:\u003C/p>\n\u003Cul>\n\u003Cli>Pair/pairs of of non-overlapping letters appearing more than once .It can be \u003Ccode>xyxy\u003C/code> because it has two \u003Ccode>xy\u003C/code>s, or \u003Ccode>aabcdaa\u003C/code> because it has a pair of \u003Ccode>aa\u003C/code>s in it. But \u003Ccode>aaa\u003C/code> does not satisfy the requirement because the \u003Ccode>a\u003C/code> in the middle overlaps with two different \u003Ccode>aa\u003C/code> pairs.\u003C/li>\n\u003Cli>A letter that repeats itself with another letter between them, like \u003Ccode>xyx\u003C/code> or \u003Ccode>bcb\u003C/code> or \u003Ccode>aaa\u003C/code>\u003C/li>\n\u003C/ul>",{"headings":96,"localImagePaths":114,"remoteImagePaths":115,"frontmatter":116,"imagePaths":119},[97,101,104,107,111],{"depth":98,"slug":99,"text":100},5,"link-to-problem","Link to problem",{"depth":98,"slug":102,"text":103},"source-of-the-final-solution","Source of the final solution",{"depth":98,"slug":105,"text":106},"other-posts-in-the-series","Other posts in the series",{"depth":108,"slug":109,"text":110},2,"part-1","Part 1",{"depth":108,"slug":112,"text":113},"part-2","Part 2",[],[],{"slug":83,"title":86,"description":87,"pubDate":117,"draft":66,"tags":118},"2023-08-08",[45,46,69],[],"advent-of-code/2015-05.md","advent-of-code-2015-03",{"id":121,"data":123,"body":128,"filePath":129,"digest":130,"rendered":131,"legacyId":146},{"title":124,"description":125,"draft":15,"pubDate":126,"tags":127},"Perfectly Spherical Houses in a Vacuum","AoC 2015 with Rust - Day 3",["Date","2023-07-17T00:00:00.000Z"],[45,46,69],"##### [Link to problem](https://adventofcode.com/2015/day/3)\n##### [Source of the final solution](https://github.com/Ozencb/aoc/tree/main/aoc-2015-03)\n##### [Other posts in the series](/tags/advent-of-code)\n\n## Part 1\n\nSanta is delivering gifts in a two-dimensional grid of houses. He gets instructions over the radio by arrow characters (`>`, `\u003C`, `v`, `^`) and moves according to these. He delivers a gift in each move, but sometimes he gets wrong instructions and revisits some of the locations he has already visited. \n\nFor the first part, I want to solve how many houses get at least 1 present. Starting location will also count as one present delivered.\n\nFor example, \n\n- `>` delivers presents to 2 houses: one at the starting location, and one to the east.\n- `^>v\u003C` delivers presents to 4 houses in a square, including twice to the house at his starting/ending location.\n\n\nIf there is a data type that can hold non-duplicate items in Rust, like some sort of set, I can use it. I can iterate over the instructions, call a `move()` function that takes the direction character and either returns the next coordinate which can then be added to hash set. These coordinates can maybe be some sort of struct. I will also copy file reading stuff from [the previous challenge](/advent-of-code-2015-02).\n\n```rust\nstruct Coordinate {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let starting_coordinates = Coordinate { x: 0, y: 0 };\n\n    let new_coord = move_santa('v', starting_coordinates);\n\n    println!(\"{:?} {:?}\", new_coord.x, new_coord.y)\n}\n\nfn move_santa(direction: char, current_coordinate: Coordinate) -> Coordinate {\n    match direction {\n        '^' => Coordinate {\n            x: current_coordinate.x,\n            y: current_coordinate.y + 1,\n        },\n        '>' => Coordinate {\n            x: current_coordinate.x + 1,\n            y: current_coordinate.y,\n        },\n        'v' => Coordinate {\n            x: current_coordinate.x,\n            y: current_coordinate.y - 1,\n        },\n        '\u003C' => Coordinate {\n            x: current_coordinate.x - 1,\n            y: current_coordinate.y,\n        },\n        _ => unreachable!(),\n    }\n}\n```\n\nThis succesfully moved the character one line down, giving us `0 -1` for `x y`. I can move on to hash sets:\n\n```rust\nlet starting_coordinates = Coordinate { x: 0, y: 0 };\n\nlet mut visited_coordinates: HashSet\u003CCoordinate> = HashSet::from([starting_coordinates]);\nlet mut current_coordinates = starting_coordinates;\n\nfor direction in directions {\n    current_coordinates = move_santa(direction, current_coordinates);\n    visited_coordinates.insert(current_coordinates);\n}\n```\n\nBut `insert()` function of hash set gives me the error ```the method `insert` exists for struct `HashSet\u003CCoordinate>`, but its trait bounds were not satisfied```. Naturally, it needs some way to compare `Coordinate`s so Rust can decide which ones are duplicates. \n\n```rust\n#[derive(Eq, Clone, Copy)]\nstruct Coordinate {\n    x: i32,\n    y: i32,\n}\n\nimpl PartialEq for Coordinate {\n    fn eq(&self, other: &Coordinate) -> bool {\n        self.x == other.x && self.y == other.y\n    }\n}\n\nimpl std::hash::Hash for Coordinate {\n    fn hash\u003CH>(&self, state: &mut H)\n    where\n        H: std::hash::Hasher,\n    {\n        state.write_i32(self.x);\n        state.finish();\n    }\n}\n```\n\nI had to \"extend\" the functionality of `Coordinate` by adding hash and `PartialEq` functions and add three traits, `Eq`, `Clone`, and `Copy` to make it work.\n\nWith everything put together, first part of the puzzle is now solved.\n\n```rust\nuse std::{collections::HashSet, fs};\n\n#[derive(Eq, Clone, Copy)]\nstruct Coordinate {\n    x: i32,\n    y: i32,\n}\n\nimpl PartialEq for Coordinate {\n    fn eq(&self, other: &Coordinate) -> bool {\n        self.x == other.x && self.y == other.y\n    }\n}\n\nimpl std::hash::Hash for Coordinate {\n    fn hash\u003CH>(&self, state: &mut H)\n    where\n        H: std::hash::Hasher,\n    {\n        state.write_i32(self.x);\n        state.finish();\n    }\n}\n\nfn main() {\n    let filename = \"data.txt\";\n\n    let contents = fs::read_to_string(filename).expect(\"Something went wrong\");\n    let directions = contents.chars();\n\n    let starting_coordinates = Coordinate { x: 0, y: 0 };\n\n    let mut visited_coordinates: HashSet\u003CCoordinate> = HashSet::from([starting_coordinates]);\n    let mut current_coordinates = starting_coordinates;\n\n    for direction in directions {\n        current_coordinates = move_santa(direction, current_coordinates);\n        visited_coordinates.insert(current_coordinates);\n    }\n\n    println!(\"{:?}\", visited_coordinates.into_iter().count())\n}\n\nfn move_santa(direction: char, current_coordinate: Coordinate) -> Coordinate {\n    match direction {\n        '^' => Coordinate {\n            x: current_coordinate.x,\n            y: current_coordinate.y + 1,\n        },\n        '>' => Coordinate {\n            x: current_coordinate.x + 1,\n            y: current_coordinate.y,\n        },\n        'v' => Coordinate {\n            x: current_coordinate.x,\n            y: current_coordinate.y - 1,\n        },\n        '\u003C' => Coordinate {\n            x: current_coordinate.x - 1,\n            y: current_coordinate.y,\n        },\n        _ => unreachable!(),\n    }\n}\n```\n\n## Part 2\n\nSanta has a robot assistant now and they follow directions in turns. How many houses do they visit? \n\nThis should be easier to implement into our current code. I just need to track one more character and move them in turns. A simple modulo operator should be enough for checking turns.\n\n```rust\nuse std::{collections::HashSet, fs};\n\n#[derive(Eq, Clone, Copy)]\nstruct Coordinate {\n    x: i32,\n    y: i32,\n}\n\nimpl PartialEq for Coordinate {\n    fn eq(&self, other: &Coordinate) -> bool {\n        self.x == other.x && self.y == other.y\n    }\n}\n\nimpl std::hash::Hash for Coordinate {\n    fn hash\u003CH>(&self, state: &mut H)\n    where\n        H: std::hash::Hasher,\n    {\n        state.write_i32(self.x);\n        state.finish();\n    }\n}\n\nfn main() {\n    let filename = \"data.txt\";\n\n    let contents = fs::read_to_string(filename).expect(\"Something went wrong\");\n    let directions = contents.chars();\n\n    let starting_coordinates = Coordinate { x: 0, y: 0 };\n\n    let mut visited_coordinates: HashSet\u003CCoordinate> = HashSet::from([starting_coordinates]);\n    let mut santa_coordinate = starting_coordinates;\n    let mut robot_coordinate = starting_coordinates;\n\n    for (idx, direction) in directions.enumerate() {\n        if idx % 2 == 0 {\n            santa_coordinate = move_character(direction, santa_coordinate);\n            visited_coordinates.insert(santa_coordinate);\n        } else {\n            robot_coordinate = move_character(direction, robot_coordinate);\n            visited_coordinates.insert(robot_coordinate);\n        }\n    }\n\n    println!(\"{:?}\", visited_coordinates.into_iter().count())\n}\n\nfn move_character(direction: char, current_coordinate: Coordinate) -> Coordinate {\n    match direction {\n        '^' => Coordinate {\n            x: current_coordinate.x,\n            y: current_coordinate.y + 1,\n        },\n        '>' => Coordinate {\n            x: current_coordinate.x + 1,\n            y: current_coordinate.y,\n        },\n        'v' => Coordinate {\n            x: current_coordinate.x,\n            y: current_coordinate.y - 1,\n        },\n        '\u003C' => Coordinate {\n            x: current_coordinate.x - 1,\n            y: current_coordinate.y,\n        },\n        _ => unreachable!(),\n    }\n}\n```\n\nThis works as expected and the second part of the puzzle is now solved, but I am leaving this behind puzzle a bit unsatisfied because I feel like I partly cheated my way through it, because I can't say I completely get how traits are working here. I kind of get it, but I also don't... I should try and write a post about it.","src/content/article/advent-of-code/2015-03.md","1a65eb97b3dbe72c",{"html":132,"metadata":133},"\u003Ch5 id=\"link-to-problem\">\u003Ca href=\"https://adventofcode.com/2015/day/3\">Link to problem\u003C/a>\u003C/h5>\n\u003Ch5 id=\"source-of-the-final-solution\">\u003Ca href=\"https://github.com/Ozencb/aoc/tree/main/aoc-2015-03\">Source of the final solution\u003C/a>\u003C/h5>\n\u003Ch5 id=\"other-posts-in-the-series\">\u003Ca href=\"/tags/advent-of-code\">Other posts in the series\u003C/a>\u003C/h5>\n\u003Ch2 id=\"part-1\">Part 1\u003C/h2>\n\u003Cp>Santa is delivering gifts in a two-dimensional grid of houses. He gets instructions over the radio by arrow characters (\u003Ccode>>\u003C/code>, \u003Ccode>&#x3C;\u003C/code>, \u003Ccode>v\u003C/code>, \u003Ccode>^\u003C/code>) and moves according to these. He delivers a gift in each move, but sometimes he gets wrong instructions and revisits some of the locations he has already visited.\u003C/p>\n\u003Cp>For the first part, I want to solve how many houses get at least 1 present. Starting location will also count as one present delivered.\u003C/p>\n\u003Cp>For example,\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>>\u003C/code> delivers presents to 2 houses: one at the starting location, and one to the east.\u003C/li>\n\u003Cli>\u003Ccode>^>v&#x3C;\u003C/code> delivers presents to 4 houses in a square, including twice to the house at his starting/ending location.\u003C/li>\n\u003C/ul>\n\u003Cp>If there is a data type that can hold non-duplicate items in Rust, like some sort of set, I can use it. I can iterate over the instructions, call a \u003Ccode>move()\u003C/code> function that takes the direction character and either returns the next coordinate which can then be added to hash set. These coordinates can maybe be some sort of struct. I will also copy file reading stuff from \u003Ca href=\"/advent-of-code-2015-02\">the previous challenge\u003C/a>.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">struct\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> starting_coordinates \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> new_coord \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> move_santa\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'v'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, starting_coordinates);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{:?} {:?}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, new_coord\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x, new_coord\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> move_santa\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(direction\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> char\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    match\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> direction {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        '^'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        '>'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        'v'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        '&#x3C;'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        _ \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> unreachable!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This succesfully moved the character one line down, giving us \u003Ccode>0 -1\u003C/code> for \u003Ccode>x y\u003C/code>. I can move on to hash sets:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> starting_coordinates \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> visited_coordinates\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> HashSet\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> HashSet\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\">([starting_coordinates]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinates \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> starting_coordinates;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> direction \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> directions {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    current_coordinates \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> move_santa\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(direction, current_coordinates);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    visited_coordinates\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">insert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(current_coordinates);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>But \u003Ccode>insert()\u003C/code> function of hash set gives me the error \u003Ccode>the method `insert` exists for struct `HashSet&#x3C;Coordinate>`, but its trait bounds were not satisfied\u003C/code>. Naturally, it needs some way to compare \u003Ccode>Coordinate\u003C/code>s so Rust can decide which ones are duplicates.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">#[derive(\u003C/span>\u003Cspan style=\"color:#B392F0\">Eq\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">Clone\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">Copy\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">struct\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">impl\u003C/span>\u003Cspan style=\"color:#B392F0\"> PartialEq\u003C/span>\u003Cspan style=\"color:#F97583\"> for\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> eq\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#79B8FF\">self\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, other\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> bool\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> other\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#79B8FF\"> self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> other\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">impl\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">hash\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">Hash\u003C/span>\u003Cspan style=\"color:#F97583\"> for\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> hash\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">H\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#79B8FF\">self\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, state\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;mut\u003C/span>\u003Cspan style=\"color:#B392F0\"> H\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    where\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        H\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">hash\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">Hasher\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        state\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">write_i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        state\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">finish\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>I had to “extend” the functionality of \u003Ccode>Coordinate\u003C/code> by adding hash and \u003Ccode>PartialEq\u003C/code> functions and add three traits, \u003Ccode>Eq\u003C/code>, \u003Ccode>Clone\u003C/code>, and \u003Ccode>Copy\u003C/code> to make it work.\u003C/p>\n\u003Cp>With everything put together, first part of the puzzle is now solved.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#B392F0\">collections\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">HashSet\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, fs};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">#[derive(\u003C/span>\u003Cspan style=\"color:#B392F0\">Eq\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">Clone\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">Copy\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">struct\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">impl\u003C/span>\u003Cspan style=\"color:#B392F0\"> PartialEq\u003C/span>\u003Cspan style=\"color:#F97583\"> for\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> eq\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#79B8FF\">self\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, other\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> bool\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> other\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#79B8FF\"> self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> other\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">impl\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">hash\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">Hash\u003C/span>\u003Cspan style=\"color:#F97583\"> for\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> hash\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">H\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#79B8FF\">self\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, state\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;mut\u003C/span>\u003Cspan style=\"color:#B392F0\"> H\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    where\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        H\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">hash\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">Hasher\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        state\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">write_i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        state\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">finish\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> filename \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"data.txt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> fs\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">read_to_string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(filename)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Something went wrong\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> directions \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">chars\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> starting_coordinates \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> visited_coordinates\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> HashSet\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> HashSet\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\">([starting_coordinates]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinates \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> starting_coordinates;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> direction \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> directions {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        current_coordinates \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> move_santa\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(direction, current_coordinates);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        visited_coordinates\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">insert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(current_coordinates);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{:?}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, visited_coordinates\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">into_iter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> move_santa\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(direction\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> char\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    match\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> direction {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        '^'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        '>'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        'v'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        '&#x3C;'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        _ \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> unreachable!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"part-2\">Part 2\u003C/h2>\n\u003Cp>Santa has a robot assistant now and they follow directions in turns. How many houses do they visit?\u003C/p>\n\u003Cp>This should be easier to implement into our current code. I just need to track one more character and move them in turns. A simple modulo operator should be enough for checking turns.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#B392F0\">collections\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">HashSet\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, fs};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">#[derive(\u003C/span>\u003Cspan style=\"color:#B392F0\">Eq\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">Clone\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">Copy\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">struct\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">impl\u003C/span>\u003Cspan style=\"color:#B392F0\"> PartialEq\u003C/span>\u003Cspan style=\"color:#F97583\"> for\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> eq\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#79B8FF\">self\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, other\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> bool\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> other\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#79B8FF\"> self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> other\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">impl\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">hash\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">Hash\u003C/span>\u003Cspan style=\"color:#F97583\"> for\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> hash\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">H\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#79B8FF\">self\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, state\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;mut\u003C/span>\u003Cspan style=\"color:#B392F0\"> H\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    where\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        H\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">hash\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">Hasher\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        state\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">write_i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        state\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">finish\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> filename \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"data.txt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> fs\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">read_to_string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(filename)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Something went wrong\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> directions \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">chars\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> starting_coordinates \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> visited_coordinates\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> HashSet\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> HashSet\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\">([starting_coordinates]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> santa_coordinate \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> starting_coordinates;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> robot_coordinate \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> starting_coordinates;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (idx, direction) \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> directions\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">enumerate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> idx \u003C/span>\u003Cspan style=\"color:#F97583\">%\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#F97583\"> ==\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            santa_coordinate \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> move_character\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(direction, santa_coordinate);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            visited_coordinates\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">insert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(santa_coordinate);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            robot_coordinate \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> move_character\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(direction, robot_coordinate);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            visited_coordinates\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">insert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(robot_coordinate);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{:?}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, visited_coordinates\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">into_iter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> move_character\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(direction\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> char\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    match\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> direction {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        '^'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        '>'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        'v'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        '&#x3C;'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        _ \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> unreachable!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This works as expected and the second part of the puzzle is now solved, but I am leaving this behind puzzle a bit unsatisfied because I feel like I partly cheated my way through it, because I can’t say I completely get how traits are working here. I kind of get it, but I also don’t… I should try and write a post about it.\u003C/p>",{"headings":134,"localImagePaths":140,"remoteImagePaths":141,"frontmatter":142,"imagePaths":145},[135,136,137,138,139],{"depth":98,"slug":99,"text":100},{"depth":98,"slug":102,"text":103},{"depth":98,"slug":105,"text":106},{"depth":108,"slug":109,"text":110},{"depth":108,"slug":112,"text":113},[],[],{"slug":121,"title":124,"description":125,"pubDate":143,"draft":15,"tags":144},"2023-07-17",[45,46,69],[],"advent-of-code/2015-03.md","advent-of-code-2015-01",{"id":147,"data":149,"body":154,"filePath":155,"digest":156,"rendered":157,"legacyId":176},{"title":150,"description":151,"draft":15,"pubDate":152,"tags":153},"Not Quite Lisp","AoC 2015 with Rust - Day 1",["Date","2023-07-15T00:00:00.000Z"],[45,46,69],"##### [Link to problem](https://adventofcode.com/2015/day/1)\n##### [Source of the final solution](https://github.com/Ozencb/aoc/tree/main/aoc-2015-01)\n##### [Other posts in the series](/tags/advent-of-code)\n\nThis is the first post of the Aoc 2015 with Rust series, which will be a documented journey of me learning Rust language. I am a professional software developer so I already know a number of programming languages. For that I reason, I intend to skip parts that are common in other languages and, instead, focus on parts that are new or cryptic to me.\n\nI will primarily use [official docs](https://www.rust-lang.org/learn) and StackOverflow for more specific situations.\n\nToolchain is ready and installed thanks to `rustup`. I will initialize projects with `cargo init`, which should give us the base setup to work on. Aand let's go!\n\n## Part 1\n\nSanta wants to deliver presents in an apartment building but for floor directions, all he got is a set of parentheses. `(` means one floor up, `)` means one floor down. `)())())` results in `-3`, and `))((((()` results in `2`.\n\nPiece of cake. I can increment or decrement a counter as I iterate through the set of these characters accordingly.\n\nI remember some basic stuff from my 15 minutes of Rust experience like how to declare variables, variables being immutable by default, the `mut` keyword, type inference etc. So I try some hello wordish things:\n\n```rust\nfn main() {\n    let text = \"oi\";\n    println!(text);\n}\n```\n\nTo my surprise, this did not work. \n\n```\n   Compiling aoc-2015-01 v0.1.0 (/home/oz/dev/aoc/aoc-2015-01)\nerror: format argument must be a string literal\n --> src/main.rs:3:14\n  |\n3 |     println!(text);\n  |              ^^^^\n  |\nhelp: you might be missing a string literal to format with\n  |\n3 |     println!(\"{}\", text);\n  |              +++++\n\nerror: could not compile `aoc-2015-01` (bin \"aoc-2015-01\") due to previous error\n```\n\nYeh, string literals...\n\n```rust\nfn main() {\n    let text = \"oi\";\n    println!(\"{}\", text);\n}\n\n//oi\n```\n\nThe method that I will use is `string.chars()`, which apparently returns an iterator (something that can be looped through), and with a `for` loop, I can check each character in the string and act upon it. The question also includes some warnings about Unicode characters, which can resolve to multiple characters (ex: `a̐` becomes `['a', '\\u{310}']`), but since our input will only consist of parantheses, I don't have to take any measures against this issue.\n\n\n\n\n```rust\nfn main() {\n    let instructions = \"))((((()\";\n    let mut currentFloor = 0;\n\n    for char in instructions.chars() {\n        if char == '(' {\n            currentFloor = currentFloor + 1;\n        } else {\n            currentFloor = currentFloor - 1;\n        }\n    }\n\n    println!(\"{}\", currentFloor);\n}\n```\n\nI found that strings has a method called `chars()` which returns an iterator and, surely, running the code prints out `2` as expected. One minor hiccup\nand surely, it prints out `2`. \n\nOne minor issue I faced when comparing the character to an opening paranthesis was, characters are expected to be surrounded by single quotes, not double quotes but I tried the latter first and the compiler kindly warned me and steered me into the right direction:\n\n```\nerror[E0308]: mismatched types\n --> src/main.rs:6:20\n  |\n6 |         if char == \"(\" {\n  |            ----    ^^^ expected `char`, found `&str`\n  |            |\n  |            expected because this is `char`\n  |\nhelp: if you meant to write a `char` literal, use single quotes\n  |\n6 |         if char == '(' {\n  |                    ~~~\n\nFor more information about this error, try `rustc --explain E0308`.\n```\n\nNow is the time for taking an input from AoC and pasting it into the `instructions` variable, and run the code, hoping that it works as expected.\n\nAoC gave me a very long string that resolved to `280`, and pasting this number into the solution box and sending it gave me this message:\n\n```\nYour puzzle answer was 280.\n\nThe first half of this puzzle is complete! It provides one gold star: *\n```\n\nNice. On to part two!\n\nP.S: At this point, I also realized that the compiler warned me about using camel case when naming the `currentFloor` variable, so I will keep that in mind for later changes.\n\n\n## Part 2\n\nThe second part of the puzzle wants me to find the position of the first character that causes Santa to enter the basement (floor -1).\n\nI want to simply add an index to the iteration, so I can pinpoint the exact location when Santa reaches the basement for the first time.\n\n```rust\nfn main() {\n    let instructions = \"))((((()\";\n    let mut currentFloor = 0;\n    let mut hasReachedBasement = false;\n\n    for (idx, char) in instructions.chars().enumerate() {\n        if char == '(' {\n            currentFloor = currentFloor + 1;\n        } else {\n            currentFloor = currentFloor - 1;\n        }\n\n        if !hasReachedBasement && currentFloor \u003C 0 {\n           println!(\"{}\", idx + 1); \n           hasReachedBasement = true;\n        }\n    }\n\n    println!(\"{}\", currentFloor);\n}\n```\n\nAnd it works! Part 2 of our puzzle is now complete.\n\n#### Retrospective\n\n~~The first blog post in the series turned out to be a lot longer than I wanted, and I found myself to be explaining basic programming concepts unintentionally, mostly because I am new to writing blog posts. I initially planned this series to be a \"log\", rather than long explanations, but here we are... I decided to post this blog as is, but going forward, I will try to keep it as concise as possible. Let's see how it goes.~~\n\nUpdate: chopped most parts according to the retro","src/content/article/advent-of-code/2015-01.md","e71879e5a96a5bcb",{"html":158,"metadata":159},"\u003Ch5 id=\"link-to-problem\">\u003Ca href=\"https://adventofcode.com/2015/day/1\">Link to problem\u003C/a>\u003C/h5>\n\u003Ch5 id=\"source-of-the-final-solution\">\u003Ca href=\"https://github.com/Ozencb/aoc/tree/main/aoc-2015-01\">Source of the final solution\u003C/a>\u003C/h5>\n\u003Ch5 id=\"other-posts-in-the-series\">\u003Ca href=\"/tags/advent-of-code\">Other posts in the series\u003C/a>\u003C/h5>\n\u003Cp>This is the first post of the Aoc 2015 with Rust series, which will be a documented journey of me learning Rust language. I am a professional software developer so I already know a number of programming languages. For that I reason, I intend to skip parts that are common in other languages and, instead, focus on parts that are new or cryptic to me.\u003C/p>\n\u003Cp>I will primarily use \u003Ca href=\"https://www.rust-lang.org/learn\">official docs\u003C/a> and StackOverflow for more specific situations.\u003C/p>\n\u003Cp>Toolchain is ready and installed thanks to \u003Ccode>rustup\u003C/code>. I will initialize projects with \u003Ccode>cargo init\u003C/code>, which should give us the base setup to work on. Aand let’s go!\u003C/p>\n\u003Ch2 id=\"part-1\">Part 1\u003C/h2>\n\u003Cp>Santa wants to deliver presents in an apartment building but for floor directions, all he got is a set of parentheses. \u003Ccode>(\u003C/code> means one floor up, \u003Ccode>)\u003C/code> means one floor down. \u003Ccode>)())())\u003C/code> results in \u003Ccode>-3\u003C/code>, and \u003Ccode>))((((()\u003C/code> results in \u003Ccode>2\u003C/code>.\u003C/p>\n\u003Cp>Piece of cake. I can increment or decrement a counter as I iterate through the set of these characters accordingly.\u003C/p>\n\u003Cp>I remember some basic stuff from my 15 minutes of Rust experience like how to declare variables, variables being immutable by default, the \u003Ccode>mut\u003C/code> keyword, type inference etc. So I try some hello wordish things:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> text \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"oi\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(text);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>To my surprise, this did not work.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>   Compiling aoc-2015-01 v0.1.0 (/home/oz/dev/aoc/aoc-2015-01)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>error: format argument must be a string literal\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan> --> src/main.rs:3:14\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>3 |     println!(text);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |              ^^^^\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>help: you might be missing a string literal to format with\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>3 |     println!(\"{}\", text);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |              +++++\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>error: could not compile `aoc-2015-01` (bin \"aoc-2015-01\") due to previous error\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Yeh, string literals…\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> text \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"oi\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, text);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">//oi\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The method that I will use is \u003Ccode>string.chars()\u003C/code>, which apparently returns an iterator (something that can be looped through), and with a \u003Ccode>for\u003C/code> loop, I can check each character in the string and act upon it. The question also includes some warnings about Unicode characters, which can resolve to multiple characters (ex: \u003Ccode>a̐\u003C/code> becomes \u003Ccode>['a', '\\u{310}']\u003C/code>), but since our input will only consist of parantheses, I don’t have to take any measures against this issue.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> instructions \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"))((((()\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> currentFloor \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#B392F0\"> char\u003C/span>\u003Cspan style=\"color:#F97583\"> in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> instructions\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">chars\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#B392F0\"> char\u003C/span>\u003Cspan style=\"color:#F97583\"> ==\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '('\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            currentFloor \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> currentFloor \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            currentFloor \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> currentFloor \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, currentFloor);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>I found that strings has a method called \u003Ccode>chars()\u003C/code> which returns an iterator and, surely, running the code prints out \u003Ccode>2\u003C/code> as expected. One minor hiccup\nand surely, it prints out \u003Ccode>2\u003C/code>.\u003C/p>\n\u003Cp>One minor issue I faced when comparing the character to an opening paranthesis was, characters are expected to be surrounded by single quotes, not double quotes but I tried the latter first and the compiler kindly warned me and steered me into the right direction:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>error[E0308]: mismatched types\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan> --> src/main.rs:6:20\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>6 |         if char == \"(\" {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |            ----    ^^^ expected `char`, found `&#x26;str`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |            |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |            expected because this is `char`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>help: if you meant to write a `char` literal, use single quotes\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>6 |         if char == '(' {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |                    ~~~\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>For more information about this error, try `rustc --explain E0308`.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Now is the time for taking an input from AoC and pasting it into the \u003Ccode>instructions\u003C/code> variable, and run the code, hoping that it works as expected.\u003C/p>\n\u003Cp>AoC gave me a very long string that resolved to \u003Ccode>280\u003C/code>, and pasting this number into the solution box and sending it gave me this message:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Your puzzle answer was 280.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>The first half of this puzzle is complete! It provides one gold star: *\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Nice. On to part two!\u003C/p>\n\u003Cp>P.S: At this point, I also realized that the compiler warned me about using camel case when naming the \u003Ccode>currentFloor\u003C/code> variable, so I will keep that in mind for later changes.\u003C/p>\n\u003Ch2 id=\"part-2\">Part 2\u003C/h2>\n\u003Cp>The second part of the puzzle wants me to find the position of the first character that causes Santa to enter the basement (floor -1).\u003C/p>\n\u003Cp>I want to simply add an index to the iteration, so I can pinpoint the exact location when Santa reaches the basement for the first time.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> instructions \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"))((((()\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> currentFloor \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> hasReachedBasement \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> false\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (idx, \u003C/span>\u003Cspan style=\"color:#B392F0\">char\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> instructions\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">chars\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">enumerate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#B392F0\"> char\u003C/span>\u003Cspan style=\"color:#F97583\"> ==\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '('\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            currentFloor \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> currentFloor \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            currentFloor \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> currentFloor \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#F97583\"> !\u003C/span>\u003Cspan style=\"color:#E1E4E8\">hasReachedBasement \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> currentFloor \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">           println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, idx \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">); \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">           hasReachedBasement \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, currentFloor);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>And it works! Part 2 of our puzzle is now complete.\u003C/p>\n\u003Ch4 id=\"retrospective\">Retrospective\u003C/h4>\n\u003Cp>\u003Cdel>The first blog post in the series turned out to be a lot longer than I wanted, and I found myself to be explaining basic programming concepts unintentionally, mostly because I am new to writing blog posts. I initially planned this series to be a “log”, rather than long explanations, but here we are… I decided to post this blog as is, but going forward, I will try to keep it as concise as possible. Let’s see how it goes.\u003C/del>\u003C/p>\n\u003Cp>Update: chopped most parts according to the retro\u003C/p>",{"headings":160,"localImagePaths":170,"remoteImagePaths":171,"frontmatter":172,"imagePaths":175},[161,162,163,164,165,166],{"depth":98,"slug":99,"text":100},{"depth":98,"slug":102,"text":103},{"depth":98,"slug":105,"text":106},{"depth":108,"slug":109,"text":110},{"depth":108,"slug":112,"text":113},{"depth":167,"slug":168,"text":169},4,"retrospective","Retrospective",[],[],{"slug":147,"title":150,"description":151,"pubDate":173,"draft":15,"tags":174},"2023-07-15",[45,46,69],[],"advent-of-code/2015-01.md","advent-of-code-2015-02",{"id":177,"data":179,"body":184,"filePath":185,"digest":186,"rendered":187,"legacyId":205},{"title":180,"description":181,"draft":15,"pubDate":182,"tags":183},"I Was Told There Would Be No Math","AoC 2015 with Rust - Day 2",["Date","2023-07-16T00:00:00.000Z"],[45,46,69],"##### [Link to problem](https://adventofcode.com/2015/day/2)\n##### [Source of the final solution](https://github.com/Ozencb/aoc/tree/main/aoc-2015-02)\n##### [Other posts in the series](/tags/advent-of-code)\n\n## Part 1\n\nElves are wrapping gift boxes (rectangular prism), and they need some wrapping paper. They want to find out the exact size they need to order. The formula for calculating the size is:\n\n`(2*l*w + 2*w*h + 2*h*l) + smallest side's area`\n\nFor example, a present with dimensions `2x3x4` requires `2*6 + 2*12 + 2*8 = 52` square feet of wrapping paper plus `6` square feet of slack, for a total of `58` square feet.\n\nThe input will be a list of such dimensions and the output of the program should be the total square feet of wrapping paper they should order.\n\nIt looks like I will have to find a suitable data type that can hold width/length/height values. I can either use some sort of struct or an array. Arrays should be the more suitable data type for this case.\n\n[Arrays and Slices](https://doc.rust-lang.org/rust-by-example/primitives/array.html) page of Rust doc says that arrays require defining their lengths during compilation, which is not really suitable for holding the list of gift sizes since I cannot predict the length of it. So, I am going go with the alternative that can has a dynamic size: slices. The syntax looks something like this:\n\n```rust\nlet empty_array: [u32; 0] = [];\n```\n\nBut I can use array for holding the actual sizes of each gifts respectively in arrays with fixed-sizes of three, for width, length, and height. So, arrays within a slice should do it.\n\n```rust\nlet gift_list: [[i32; 3]; 0] = [];\n```\n\nI will also need to read and parse a text file that will hold the list of gifts, with each gift size in one line in `1x1x1` format.\n\nWith a quick search, I find `fs` module under Rust's standard library, which has a method called `read_to_string` that takes in a file path as its sole parameter, and returns the contents as the string.\n\nWell... not quite. Actually, it returns a `Result` enum which has two variants, `Ok()` and `Err()`. If everything goes accordingly, an `Ok()` case should resolve succesfully, giving us the string that I want. I paste the input into a file titled `data.txt` and try to print its contents. I initially encountered an error practically saying that `data.txt` did not exist, because Rust expected the file to be in the root directory of the project, not at the same level with `main.rs` under `src`. Moving it to the root did the trick. Anyway, our code now looks like this:\n\n```rust\nuse std::fs;\n\nfn main() {\n    let gift_list: [[i32; 3]; 0] = [];\n    let filename = \"data.txt\";\n\n    let contents = fs::read_to_string(filename);\n\n    match contents {\n        Ok(v) => println!(\"contents of the file: {}\", v),\n        Err(e) => println!(\"error parsing header: {}\", e),\n    }\n}\n```\n\nThe [Result](https://doc.rust-lang.org/std/result/enum.Result.html#) page on docs also show some other methods for handling error cases like `expect()`, which also looks nice (but there are some warnings about its usage, which I can wisely ignore).\n\n```rust\nuse std::fs;\n\nfn main() {\n    let gift_list: [[i32; 3]; 0] = [];\n    let filename = \"data.txt\";\n\n    let contents = fs::read_to_string(filename).expect(\"Something went wrong\");\n\n    println!(\"With text:\\n{contents}\");\n}\n```\n\nI now have all the contents of the file as a string in `contents` variable. I now have to parse it. I want to split this string into separate lines first, effectively separating each gift size, then split each gift size by looking at the `x`. Like many other languages, Rust has a `split()` method. I can call this method with a \"newline character\" but, while looking for possible solutions, I also saw a method called `lines()`, which supposedly splits a string into separate lines. I can use this one for the first part. Note that it returns a `Lines` iterator, but it's fine. I want to iterate on this anyway.\n\n```rust\nfn main() {\n    let gift_list: [[i32; 3]; 0] = [];\n    let filename = \"data.txt\";\n\n    let contents = fs::read_to_string(filename).expect(\"Something went wrong\");\n\n    let lines = contents.lines();\n\n    for line in lines {\n       // do stuff with line \n    }\n}\n```\n\nI used `split()` as mentioned, which also returns an iterator. \n\n```rust\nlet sizes = line.split('x');\n```\n\nI assume that sizes can only have three elements for w/l/h, so it would be handy to directly cast them into an array of size three while also casting strings into integers so I can do math. Again, I find lots of options, the simplest being a good old `for` loop. \n\n```rust\nfor line in lines {\n    let sizes = line.split('x');\n\n    for size in sizes {\n        println!(\"{}\", size);\n    }\n}\n```\n\nBut I want to slowly leave the intuitive ways aside and do it the Rust way.\n\n```rust\nlet sizes = line.split('x').collect::\u003CVec\u003C&str>>();\n```\n\nThis lets me convert the `Split` type to a good old vector. Combining multiple searches about how to map over iterators and how to cast strings to integers, I came up with a solution like this:\n\n```rust\nlet sizes = line\n    .split('x')\n    .map(|size| size.parse::\u003Ci32>().unwrap())\n    .collect::\u003CVec\u003Ci32>>();\n```\n\nAt this point, I realize that it is not as easy as I thought to push elements into slices in Rust so while trying to circumvent the issue. Then I realize, I now have line count of the input. So, instead of a slice, I can maybe declare an array with a fixed-size of line count?\n\nAand, Rust did not like that too. Rust wants to see the array size at compile time, but I am trying to assign it at runtime by looking at the line count. I checked if `Vec`s are any different than slices or arrays, and the official docs say that they are resizable, so I try using a vector instead.\n\n```rust\nuse std::fs;\n\nfn main() {\n    let filename = \"data.txt\";\n\n    let contents = fs::read_to_string(filename).expect(\"Something went wrong\");\n\n    let lines = contents.lines();\n    let line_count = lines.clone().count();\n\n    let mut gift_list = vec![vec![0; 3]; line_count];\n\n    for line in lines {\n        let sizes = line\n            .split('x')\n            .map(|size| size.parse::\u003Ci32>().unwrap())\n            .collect::\u003CVec\u003Ci32>>();\n\n        gift_list.push(sizes);\n    }\n\n    for gift in gift_list {\n        for size in gift {\n            println!(\"{}\", size);\n        }\n    }\n}\n```\n\nAlso note that I cloned `lines` before checking its size, otherwise it gets consumed and can no longer be used. Something's going on here (ownership?), but I will look into this later.\n\nCool, I can iterate over the `gift_list` that I have put together. At this point, I can maybe call a function that takes in a vector. I devised something like this but all kinds of mutability rules threw all kinds of errors.\n\n```rust\nuse std::fs;\n\nfn main() {\n    let filename = \"data.txt\";\n\n    let contents = fs::read_to_string(filename).expect(\"Something went wrong\");\n\n    let lines = contents.lines();\n    let line_count = lines.clone().count();\n\n    let mut gift_list = vec![vec![0; 3]; line_count];\n\n    for line in lines {\n        let sizes = line\n            .split('x')\n            .map(|size| size.parse::\u003Ci32>().unwrap())\n            .collect::\u003CVec\u003Ci32>>();\n\n        gift_list.push(sizes);\n    }\n\n    let total_area: i32 = gift_list.into_iter().map(|v| calculate_area(v)).sum();\n\n    println!(\"{}\", total_area);\n}\n\n// (2*l*w + 2*w*h + 2*h*l) + smallest side's area\nfn calculate_area(v: Vec\u003Ci32>) -> i32 {\n    v.sort();\n    let smallest_side = v[0] * v[1]; // since vector is now sorted, we can use first two elements for smallest side\n    (2 * v[0] * v[1]) + (2 * v[0] * v[2]) + (2 * v[1] * v[2]) + smallest_side\n}\n```\n\nRust wants extra annotations for values that I want to change (mutate). I add this to function's parameter definitions.\n\nFinally, our program seems ready to solve the first part of the puzzle.\nAnd, nice. First try! First star.\n\n## Part 2\n\nElves now need ribbons to wrap the gifts. They need some to tie it and some for making a bow.\nThe required length for tying it is the length of its smallest perimeter. And the bow is equal to its cubic feet.\n\nFor example, a present with dimensions 2x3x4 requires 2+2+3+3 = 10 feet of ribbon to wrap the present plus 2*3*4 = 24 feet of ribbon for the bow, for a total of 34 feet.\n\nIt seems I will have to work on sorted vectors again so I move the sorting part to where I initially populate the vector, and fix mut annotation accordingly:\n\n```rust\nuse std::fs;\n\nfn main() {\n    let filename = \"data.txt\";\n\n    let contents = fs::read_to_string(filename).expect(\"Something went wrong\");\n\n    let lines = contents.lines();\n    let line_count = lines.clone().count();\n\n    let mut gift_list = vec![vec![0; 3]; line_count];\n\n    for line in lines {\n        let mut sizes = line\n            .split('x')\n            .map(|size| size.parse::\u003Ci32>().unwrap())\n            .collect::\u003CVec\u003Ci32>>();\n\n        sizes.sort();\n\n        gift_list.push(sizes);\n    }\n\n    let total_area: i32 = gift_list.into_iter().map(|v| calculate_area(v)).sum();\n\n    println!(\"{}\", total_area);\n}\n\n// (2*l*w + 2*w*h + 2*h*l) + smallest side's area\nfn calculate_area(v: Vec\u003Ci32>) -> i32 {\n    let smallest_side = v[0] * v[1]; // since vector is now sorted, we can use first two elements for smallest side\n    (2 * v[0] * v[1]) + (2 * v[0] * v[2]) + (2 * v[1] * v[2]) + smallest_side\n}\n```\n\nI will add two additional functions for ribbons: one for tying and one for the bow, and an additional function that adds the two.\n\n```rust\nfn get_ribbon_size(v: Vec\u003Ci32>) -> i32 {\n    get_smallest_perimeter(v) + get_volume(v)\n}\n\nfn get_smallest_perimeter(v: Vec\u003Ci32>) -> i32 {\n    (v[0] * 2) + (v[1] * 2)\n}\n\nfn get_volume(v: Vec\u003Ci32>) -> i32 {\n    v[0] * v[1] * v[2]\n}\n```\n\n`get_ribbon_size` tells me something about the second function calls argument, something with moved values... the time has come. \n\n### Obligatory sidebar: Borrow Checking\n\nRust does not utilize a garbage collector to free up memory that is not needed anymore, but they say it is as memory-safe as it gets. Rust, by design, wants to prevent us moving data around freely to better decide when to free up memory. It essentialy gives us the convenience of garbage-collection without making us manually manage the memory. All thanks to Rust's unique ownership model.\n\nWhen passing data around, I can:\n- Directly pass the value, giving up the ownership in process\n- Clone the value and work on the clone instead\n- Pass a reference, letting the borrower use it until it's done\n\n\nPutting it all together, I get something like this:\n\n```rust\nuse std::fs;\n\nfn main() {\n    let filename = \"data.txt\";\n\n    let contents = fs::read_to_string(filename).expect(\"Something went wrong\");\n\n    let lines = contents.lines();\n    let line_count = lines.clone().count();\n\n    let mut gift_list = vec![vec![0; 3]; line_count];\n\n    for line in lines {\n        let mut sizes = line\n            .split('x')\n            .map(|size| size.parse::\u003Ci32>().unwrap())\n            .collect::\u003CVec\u003Ci32>>();\n\n        sizes.sort();\n\n        gift_list.push(sizes);\n    }\n\n    let total_area: i32 = gift_list\n        .clone()\n        .into_iter()\n        .map(|v| calculate_area(v))\n        .sum();\n    let ribbon_length: i32 = gift_list\n        .clone()\n        .into_iter()\n        .map(|v| get_ribbon_size(&v))\n        .sum();\n\n    println!(\n        \"Wrapping paper needed: {}\\nRibbon needed: {}\",\n        total_area, ribbon_length\n    );\n}\n\n// (2*l*w + 2*w*h + 2*h*l) + smallest side's area\nfn calculate_area(v: Vec\u003Ci32>) -> i32 {\n    let smallest_side = v[0] * v[1]; // since vector is now sorted, we can use first two elements for smallest side\n    (2 * v[0] * v[1]) + (2 * v[0] * v[2]) + (2 * v[1] * v[2]) + smallest_side\n}\n\nfn get_ribbon_size(v: &Vec\u003Ci32>) -> i32 {\n    get_smallest_perimeter(v) + get_volume(v)\n}\n\nfn get_smallest_perimeter(v: &Vec\u003Ci32>) -> i32 {\n    (v[0] * 2) + (v[1] * 2)\n}\n\nfn get_volume(v: &Vec\u003Ci32>) -> i32 {\n    v[0] * v[1] * v[2]\n}\n```\n\nAgain, this works as expected. Nice.","src/content/article/advent-of-code/2015-02.md","83a2ce889c173dbc",{"html":188,"metadata":189},"\u003Ch5 id=\"link-to-problem\">\u003Ca href=\"https://adventofcode.com/2015/day/2\">Link to problem\u003C/a>\u003C/h5>\n\u003Ch5 id=\"source-of-the-final-solution\">\u003Ca href=\"https://github.com/Ozencb/aoc/tree/main/aoc-2015-02\">Source of the final solution\u003C/a>\u003C/h5>\n\u003Ch5 id=\"other-posts-in-the-series\">\u003Ca href=\"/tags/advent-of-code\">Other posts in the series\u003C/a>\u003C/h5>\n\u003Ch2 id=\"part-1\">Part 1\u003C/h2>\n\u003Cp>Elves are wrapping gift boxes (rectangular prism), and they need some wrapping paper. They want to find out the exact size they need to order. The formula for calculating the size is:\u003C/p>\n\u003Cp>\u003Ccode>(2*l*w + 2*w*h + 2*h*l) + smallest side's area\u003C/code>\u003C/p>\n\u003Cp>For example, a present with dimensions \u003Ccode>2x3x4\u003C/code> requires \u003Ccode>2*6 + 2*12 + 2*8 = 52\u003C/code> square feet of wrapping paper plus \u003Ccode>6\u003C/code> square feet of slack, for a total of \u003Ccode>58\u003C/code> square feet.\u003C/p>\n\u003Cp>The input will be a list of such dimensions and the output of the program should be the total square feet of wrapping paper they should order.\u003C/p>\n\u003Cp>It looks like I will have to find a suitable data type that can hold width/length/height values. I can either use some sort of struct or an array. Arrays should be the more suitable data type for this case.\u003C/p>\n\u003Cp>\u003Ca href=\"https://doc.rust-lang.org/rust-by-example/primitives/array.html\">Arrays and Slices\u003C/a> page of Rust doc says that arrays require defining their lengths during compilation, which is not really suitable for holding the list of gift sizes since I cannot predict the length of it. So, I am going go with the alternative that can has a dynamic size: slices. The syntax looks something like this:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> empty_array\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#B392F0\">u32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>But I can use array for holding the actual sizes of each gifts respectively in arrays with fixed-sizes of three, for width, length, and height. So, arrays within a slice should do it.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [[\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>I will also need to read and parse a text file that will hold the list of gifts, with each gift size in one line in \u003Ccode>1x1x1\u003C/code> format.\u003C/p>\n\u003Cp>With a quick search, I find \u003Ccode>fs\u003C/code> module under Rust’s standard library, which has a method called \u003Ccode>read_to_string\u003C/code> that takes in a file path as its sole parameter, and returns the contents as the string.\u003C/p>\n\u003Cp>Well… not quite. Actually, it returns a \u003Ccode>Result\u003C/code> enum which has two variants, \u003Ccode>Ok()\u003C/code> and \u003Ccode>Err()\u003C/code>. If everything goes accordingly, an \u003Ccode>Ok()\u003C/code> case should resolve succesfully, giving us the string that I want. I paste the input into a file titled \u003Ccode>data.txt\u003C/code> and try to print its contents. I initially encountered an error practically saying that \u003Ccode>data.txt\u003C/code> did not exist, because Rust expected the file to be in the root directory of the project, not at the same level with \u003Ccode>main.rs\u003C/code> under \u003Ccode>src\u003C/code>. Moving it to the root did the trick. Anyway, our code now looks like this:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">fs;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [[\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> filename \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"data.txt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> fs\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">read_to_string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(filename);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    match\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        Ok\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"contents of the file: {}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, v),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        Err\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(e) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"error parsing header: {}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, e),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The \u003Ca href=\"https://doc.rust-lang.org/std/result/enum.Result.html#\">Result\u003C/a> page on docs also show some other methods for handling error cases like \u003Ccode>expect()\u003C/code>, which also looks nice (but there are some warnings about its usage, which I can wisely ignore).\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">fs;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [[\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> filename \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"data.txt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> fs\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">read_to_string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(filename)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Something went wrong\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"With text:\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">{contents}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>I now have all the contents of the file as a string in \u003Ccode>contents\u003C/code> variable. I now have to parse it. I want to split this string into separate lines first, effectively separating each gift size, then split each gift size by looking at the \u003Ccode>x\u003C/code>. Like many other languages, Rust has a \u003Ccode>split()\u003C/code> method. I can call this method with a “newline character” but, while looking for possible solutions, I also saw a method called \u003Ccode>lines()\u003C/code>, which supposedly splits a string into separate lines. I can use this one for the first part. Note that it returns a \u003Ccode>Lines\u003C/code> iterator, but it’s fine. I want to iterate on this anyway.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [[\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> filename \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"data.txt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> fs\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">read_to_string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(filename)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Something went wrong\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">lines\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">       // do stuff with line \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>I used \u003Ccode>split()\u003C/code> as mentioned, which also returns an iterator.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sizes \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'x'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>I assume that sizes can only have three elements for w/l/h, so it would be handy to directly cast them into an array of size three while also casting strings into integers so I can do math. Again, I find lots of options, the simplest being a good old \u003Ccode>for\u003C/code> loop.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sizes \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'x'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> size \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sizes {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, size);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>But I want to slowly leave the intuitive ways aside and do it the Rust way.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sizes \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'x'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">collect\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>>();\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This lets me convert the \u003Ccode>Split\u003C/code> type to a good old vector. Combining multiple searches about how to map over iterators and how to cast strings to integers, I came up with a solution like this:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sizes \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    .\u003C/span>\u003Cspan style=\"color:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'x'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    .\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">size\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> size\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">parse\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">unwrap\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    .\u003C/span>\u003Cspan style=\"color:#B392F0\">collect\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>>();\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>At this point, I realize that it is not as easy as I thought to push elements into slices in Rust so while trying to circumvent the issue. Then I realize, I now have line count of the input. So, instead of a slice, I can maybe declare an array with a fixed-size of line count?\u003C/p>\n\u003Cp>Aand, Rust did not like that too. Rust wants to see the array size at compile time, but I am trying to assign it at runtime by looking at the line count. I checked if \u003Ccode>Vec\u003C/code>s are any different than slices or arrays, and the official docs say that they are resizable, so I try using a vector instead.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">fs;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> filename \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"data.txt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> fs\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">read_to_string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(filename)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Something went wrong\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">lines\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line_count \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">clone\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> vec!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#B392F0\">vec!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; line_count];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sizes \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'x'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">size\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> size\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">parse\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">unwrap\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">collect\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>>();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        gift_list\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(sizes);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> size \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">            println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, size);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Also note that I cloned \u003Ccode>lines\u003C/code> before checking its size, otherwise it gets consumed and can no longer be used. Something’s going on here (ownership?), but I will look into this later.\u003C/p>\n\u003Cp>Cool, I can iterate over the \u003Ccode>gift_list\u003C/code> that I have put together. At this point, I can maybe call a function that takes in a vector. I devised something like this but all kinds of mutability rules threw all kinds of errors.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">fs;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> filename \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"data.txt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> fs\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">read_to_string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(filename)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Something went wrong\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">lines\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line_count \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">clone\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> vec!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#B392F0\">vec!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; line_count];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sizes \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'x'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">size\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> size\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">parse\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">unwrap\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">collect\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>>();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        gift_list\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(sizes);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> total_area\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">into_iter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">v\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#B392F0\"> calculate_area\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v))\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">sum\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, total_area);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// (2*l*w + 2*w*h + 2*h*l) + smallest side's area\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> calculate_area\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    v\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">sort\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> smallest_side \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; \u003C/span>\u003Cspan style=\"color:#6A737D\">// since vector is now sorted, we can use first two elements for smallest side\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    (\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> smallest_side\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Rust wants extra annotations for values that I want to change (mutate). I add this to function’s parameter definitions.\u003C/p>\n\u003Cp>Finally, our program seems ready to solve the first part of the puzzle.\nAnd, nice. First try! First star.\u003C/p>\n\u003Ch2 id=\"part-2\">Part 2\u003C/h2>\n\u003Cp>Elves now need ribbons to wrap the gifts. They need some to tie it and some for making a bow.\nThe required length for tying it is the length of its smallest perimeter. And the bow is equal to its cubic feet.\u003C/p>\n\u003Cp>For example, a present with dimensions 2x3x4 requires 2+2+3+3 = 10 feet of ribbon to wrap the present plus 2\u003Cem>3\u003C/em>4 = 24 feet of ribbon for the bow, for a total of 34 feet.\u003C/p>\n\u003Cp>It seems I will have to work on sorted vectors again so I move the sorting part to where I initially populate the vector, and fix mut annotation accordingly:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">fs;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> filename \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"data.txt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> fs\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">read_to_string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(filename)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Something went wrong\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">lines\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line_count \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">clone\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> vec!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#B392F0\">vec!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; line_count];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sizes \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'x'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">size\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> size\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">parse\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">unwrap\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">collect\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>>();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        sizes\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">sort\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        gift_list\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(sizes);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> total_area\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">into_iter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">v\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#B392F0\"> calculate_area\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v))\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">sum\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, total_area);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// (2*l*w + 2*w*h + 2*h*l) + smallest side's area\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> calculate_area\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> smallest_side \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; \u003C/span>\u003Cspan style=\"color:#6A737D\">// since vector is now sorted, we can use first two elements for smallest side\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    (\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> smallest_side\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>I will add two additional functions for ribbons: one for tying and one for the bow, and an additional function that adds the two.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> get_ribbon_size\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    get_smallest_perimeter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#B392F0\"> get_volume\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> get_smallest_perimeter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    (v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> get_volume\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Ccode>get_ribbon_size\u003C/code> tells me something about the second function calls argument, something with moved values… the time has come.\u003C/p>\n\u003Ch3 id=\"obligatory-sidebar-borrow-checking\">Obligatory sidebar: Borrow Checking\u003C/h3>\n\u003Cp>Rust does not utilize a garbage collector to free up memory that is not needed anymore, but they say it is as memory-safe as it gets. Rust, by design, wants to prevent us moving data around freely to better decide when to free up memory. It essentialy gives us the convenience of garbage-collection without making us manually manage the memory. All thanks to Rust’s unique ownership model.\u003C/p>\n\u003Cp>When passing data around, I can:\u003C/p>\n\u003Cul>\n\u003Cli>Directly pass the value, giving up the ownership in process\u003C/li>\n\u003Cli>Clone the value and work on the clone instead\u003C/li>\n\u003Cli>Pass a reference, letting the borrower use it until it’s done\u003C/li>\n\u003C/ul>\n\u003Cp>Putting it all together, I get something like this:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">fs;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> filename \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"data.txt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> fs\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">read_to_string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(filename)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Something went wrong\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">lines\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line_count \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">clone\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> vec!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#B392F0\">vec!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; line_count];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sizes \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'x'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">size\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> size\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">parse\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">unwrap\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">collect\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>>();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        sizes\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">sort\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        gift_list\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(sizes);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> total_area\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">clone\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">into_iter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">v\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#B392F0\"> calculate_area\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">sum\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ribbon_length\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">clone\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">into_iter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">v\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#B392F0\"> get_ribbon_size\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">v))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">sum\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"Wrapping paper needed: {}\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">Ribbon needed: {}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        total_area, ribbon_length\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// (2*l*w + 2*w*h + 2*h*l) + smallest side's area\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> calculate_area\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> smallest_side \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; \u003C/span>\u003Cspan style=\"color:#6A737D\">// since vector is now sorted, we can use first two elements for smallest side\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    (\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> smallest_side\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> get_ribbon_size\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    get_smallest_perimeter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#B392F0\"> get_volume\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> get_smallest_perimeter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    (v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> get_volume\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Again, this works as expected. Nice.\u003C/p>",{"headings":190,"localImagePaths":199,"remoteImagePaths":200,"frontmatter":201,"imagePaths":204},[191,192,193,194,195,196],{"depth":98,"slug":99,"text":100},{"depth":98,"slug":102,"text":103},{"depth":98,"slug":105,"text":106},{"depth":108,"slug":109,"text":110},{"depth":108,"slug":112,"text":113},{"depth":29,"slug":197,"text":198},"obligatory-sidebar-borrow-checking","Obligatory sidebar: Borrow Checking",[],[],{"slug":177,"title":180,"description":181,"pubDate":202,"draft":15,"tags":203},"2023-07-16",[45,46,69],[],"advent-of-code/2015-02.md","advent-of-code-2015-04",{"id":206,"data":208,"body":212,"filePath":213,"digest":214,"rendered":215,"legacyId":230},{"title":86,"description":209,"draft":15,"pubDate":210,"tags":211},"AoC 2015 with Rust - Day 4",["Date","2023-07-29T00:00:00.000Z"],[45,46,69],"##### [Link to problem](https://adventofcode.com/2015/day/4)\n##### [Source of the final solution](https://github.com/Ozencb/aoc/tree/main/aoc-2015-04)\n##### [Other posts in the series](/tags/advent-of-code)\n\n## Part 1\n\nSanta is mining coins. He is trying to find MD5 hashes that start with 5 zeroes. An input of a secret key followed by a number that produces such a hash is valid, and Santa needs to find the lowest possible number of such hashes. \n\nFor example, \n\n\n- If your secret key is `abcdef`, the answer is `609043`, because the MD5 hash of `abcdef609043` starts with five zeroes (`000001dbbfa...`), and it is the lowest such number to do so.\n- If your secret key is `pqrstuv`, the lowest number it combines with to make an MD5 hash starting with five zeroes is `1048970`; that is, the MD5 hash of `pqrstuv1048970` looks like `000006136ef....`\n\nThe idea is to make a loop with a counter starting from 0, add the value of this counter to the secret key (input), and hash the concatenated string. If the hash starts with five zeroes, break the loop and check the counter to get the result.\n\n\nI don't want to implement MD5 myself, so I added a crate by running `cargo add md5`.\n\n```\n[dependencies]\nmd5 = \"0.7.0\"\n```\n\nI put together something like this as the solution for the part 1 but it kept running for so long.\n\n```rust\nuse md5;\n\nfn main() {\n    let base_input = \"iwrupvqb\";\n    let mut counter = 0;\n\n    let result = loop {\n        let hash = md5::compute(format!(\"{}{}\", base_input, counter));\n\n        if hash.starts_with(b\"00000\") {\n            break counter;\n        }\n\n        counter = counter + 1;\n    };\n\n    println!(\"{:?}\", result);\n}\n```\n\nGiven that [AoC about page](https://adventofcode.com/about) has the following statement, I know that I am not on the right track.\n\n> You don't need a computer science background to participate - just a little programming knowledge and some problem solving skills will get you pretty far. Nor do you need a fancy computer; every problem has a solution that completes in at most 15 seconds on ten-year-old hardware.\n\nI was expecting this to be a lot faster because when I printed out the counter on each iteration, I could see that it was going through numbers really fast. \n\nI went about debugging the code by printing `hash` and `b\"00000\"`, and could see that the two was not producing exactly the same data. Since the break condition never met, the loop went on running forever.\n\nInstead, I decided to format the hash as a string, which produced a healthier comparison.\n\n```rust\nuse md5;\n\nfn main() {\n    let base_input = \"iwrupvqb\";\n    let mut counter = 0;\n\n    let result = loop {\n        let hash = md5::compute(format!(\"{}{}\", base_input, counter));\n\n        if format!(\"{:?}\", hash).starts_with(\"00000\") {\n            break counter;\n        }\n\n        counter = counter + 1;\n    };\n\n    println!(\"{:?}\", result);\n}\n```\n\nAnd this worked a lot quicker and the first part of the puzzle is done.\n\n## Part 2\n\nFor part two, we need to do the same thing but with six zeroes. Simply changing `.starts_with(\"00000\")` part with `.starts_with(\"000000\")` with works, although a bit slower. But, we can do a minor improvement and use some sort of repeating pattern to change the number of zeroes, and put the logic in some sort of function.\n\n```rust\nuse md5;\n\nfn produce_hash(base_input: &str, target_prefix: String) -> i32 {\n    let mut counter = 0;\n\n    return loop {\n        let hash = md5::compute(format!(\"{}{}\", base_input, counter));\n\n        if format!(\"{:?}\", hash).starts_with(&target_prefix) {\n            break counter;\n        }\n\n        counter = counter + 1;\n    };\n}\n\nfn main() {\n    let base_input = \"iwrupvqb\";\n\n    println!(\"{:?}\", produce_hash(base_input, \"0\".repeat(5)));\n    println!(\"{:?}\", produce_hash(base_input, \"0\".repeat(6)));\n}\n```","src/content/article/advent-of-code/2015-04.md","27673a59dc9e7994",{"html":216,"metadata":217},"\u003Ch5 id=\"link-to-problem\">\u003Ca href=\"https://adventofcode.com/2015/day/4\">Link to problem\u003C/a>\u003C/h5>\n\u003Ch5 id=\"source-of-the-final-solution\">\u003Ca href=\"https://github.com/Ozencb/aoc/tree/main/aoc-2015-04\">Source of the final solution\u003C/a>\u003C/h5>\n\u003Ch5 id=\"other-posts-in-the-series\">\u003Ca href=\"/tags/advent-of-code\">Other posts in the series\u003C/a>\u003C/h5>\n\u003Ch2 id=\"part-1\">Part 1\u003C/h2>\n\u003Cp>Santa is mining coins. He is trying to find MD5 hashes that start with 5 zeroes. An input of a secret key followed by a number that produces such a hash is valid, and Santa needs to find the lowest possible number of such hashes.\u003C/p>\n\u003Cp>For example,\u003C/p>\n\u003Cul>\n\u003Cli>If your secret key is \u003Ccode>abcdef\u003C/code>, the answer is \u003Ccode>609043\u003C/code>, because the MD5 hash of \u003Ccode>abcdef609043\u003C/code> starts with five zeroes (\u003Ccode>000001dbbfa...\u003C/code>), and it is the lowest such number to do so.\u003C/li>\n\u003Cli>If your secret key is \u003Ccode>pqrstuv\u003C/code>, the lowest number it combines with to make an MD5 hash starting with five zeroes is \u003Ccode>1048970\u003C/code>; that is, the MD5 hash of \u003Ccode>pqrstuv1048970\u003C/code> looks like \u003Ccode>000006136ef....\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Cp>The idea is to make a loop with a counter starting from 0, add the value of this counter to the secret key (input), and hash the concatenated string. If the hash starts with five zeroes, break the loop and check the counter to get the result.\u003C/p>\n\u003Cp>I don’t want to implement MD5 myself, so I added a crate by running \u003Ccode>cargo add md5\u003C/code>.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>[dependencies]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>md5 = \"0.7.0\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>I put together something like this as the solution for the part 1 but it kept running for so long.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> md5;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> base_input \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"iwrupvqb\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> counter \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> result \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> loop\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> hash \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> md5\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">compute\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">format!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}{}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, base_input, counter));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> hash\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">starts_with\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">b\"00000\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            break\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> counter;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        counter \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> counter \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{:?}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, result);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Given that \u003Ca href=\"https://adventofcode.com/about\">AoC about page\u003C/a> has the following statement, I know that I am not on the right track.\u003C/p>\n\u003Cblockquote>\n\u003Cp>You don’t need a computer science background to participate - just a little programming knowledge and some problem solving skills will get you pretty far. Nor do you need a fancy computer; every problem has a solution that completes in at most 15 seconds on ten-year-old hardware.\u003C/p>\n\u003C/blockquote>\n\u003Cp>I was expecting this to be a lot faster because when I printed out the counter on each iteration, I could see that it was going through numbers really fast.\u003C/p>\n\u003Cp>I went about debugging the code by printing \u003Ccode>hash\u003C/code> and \u003Ccode>b\"00000\"\u003C/code>, and could see that the two was not producing exactly the same data. Since the break condition never met, the loop went on running forever.\u003C/p>\n\u003Cp>Instead, I decided to format the hash as a string, which produced a healthier comparison.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> md5;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> base_input \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"iwrupvqb\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> counter \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> result \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> loop\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> hash \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> md5\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">compute\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">format!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}{}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, base_input, counter));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#B392F0\"> format!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{:?}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, hash)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">starts_with\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"00000\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            break\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> counter;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        counter \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> counter \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{:?}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, result);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>And this worked a lot quicker and the first part of the puzzle is done.\u003C/p>\n\u003Ch2 id=\"part-2\">Part 2\u003C/h2>\n\u003Cp>For part two, we need to do the same thing but with six zeroes. Simply changing \u003Ccode>.starts_with(\"00000\")\u003C/code> part with \u003Ccode>.starts_with(\"000000\")\u003C/code> with works, although a bit slower. But, we can do a minor improvement and use some sort of repeating pattern to change the number of zeroes, and put the logic in some sort of function.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> md5;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> produce_hash\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(base_input\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, target_prefix\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> String\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> counter \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#F97583\"> loop\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> hash \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> md5\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">compute\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">format!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}{}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, base_input, counter));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#B392F0\"> format!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{:?}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, hash)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">starts_with\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">target_prefix) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            break\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> counter;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        counter \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> counter \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> base_input \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"iwrupvqb\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{:?}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">produce_hash\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(base_input, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"0\"\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">repeat\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{:?}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">produce_hash\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(base_input, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"0\"\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">repeat\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">6\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":218,"localImagePaths":224,"remoteImagePaths":225,"frontmatter":226,"imagePaths":229},[219,220,221,222,223],{"depth":98,"slug":99,"text":100},{"depth":98,"slug":102,"text":103},{"depth":98,"slug":105,"text":106},{"depth":108,"slug":109,"text":110},{"depth":108,"slug":112,"text":113},[],[],{"slug":206,"title":86,"description":209,"pubDate":227,"draft":15,"tags":228},"2023-07-29",[45,46,69],[],"advent-of-code/2015-04.md","obsidian-sync-blog",{"id":231,"data":233,"body":237,"filePath":238,"digest":239,"rendered":240,"legacyId":249},{"title":234,"description":235,"draft":66,"pubDate":236},"How I publish on \"blog.ozenc.dev\" with Obsidian","... without Obsidian Blog or Obsidian Sync",["Date","2025-09-13T00:00:00.000Z"],"I have set this blog up long time ago with the hope that it would push me to write more. It has not. But I kept coming up with \"blog ideas\" since I then, and I remember how much I enjoyed writing those few blog posts.\n\nThe initial goal was to have a static website with minimal set of features","src/content/article/obsidian/obsidian-sync.md","3ef2f022a2fd1ec3",{"html":241,"metadata":242},"\u003Cp>I have set this blog up long time ago with the hope that it would push me to write more. It has not. But I kept coming up with “blog ideas” since I then, and I remember how much I enjoyed writing those few blog posts.\u003C/p>\n\u003Cp>The initial goal was to have a static website with minimal set of features\u003C/p>",{"headings":243,"localImagePaths":244,"remoteImagePaths":245,"frontmatter":246,"imagePaths":248},[],[],[],{"slug":231,"title":234,"pubDate":247,"draft":66,"description":235},"2025-09-13",[],"obsidian/obsidian-sync.md","proxmox-mount-points",{"id":250,"data":252,"body":257,"filePath":258,"digest":259,"rendered":260,"legacyId":279},{"title":253,"draft":15,"pubDate":254,"tags":255},"Sharing mountpoints on unprivileged Proxmox LXCs",["Date","2023-07-12T00:00:00.000Z"],[256,11],"proxmox","Unprivileged LXCs' increased security and isolation, unfortunately, bring about some difficulties in sharing resources between the host and the guest. This particular issue usually reveals itself when users face all kinds of `Permission denied` or `Operation not permitted` errors while trying to access a directory on the host, and usual battle tactics like `chown` and `chmod` make no difference. One can go ahead and use pure network solutions but that's not really resourceful. Fortunately, it is possible to map guest user's UID/GID mapping to that of host's by creating another user on the host with right settings and permissions.\n\n## Binding mountpoints\n\nBind mounts allow us to access previously mounted directories from a different location in [Posix](https://en.wikipedia.org/wiki/POSIX) systems. Proxmox can bind mountpoints between the host and the guest by either running this command:\n\n\n```\npct set \u003CCONTAINER_ID> -mp0 \u003CABSOLUTE_PATH_ON_HOST>,mp=\u003CABSOLUTE_PATH_ON_GUEST>\n```\n\nor by adding this line to LXC config file under `/etc/pve/lxc/\u003CCONTAINER_ID>.conf` on the host:\n\n```\nmp0: \u003CABSOLUTE_PATH_ON_HOST>,mp=\u003CABSOLUTE_PATH_ON_GUEST>\n```\n\nThis will allow you to access host's shared directory from the container but contents will only be readable. For full access, we will `chown` the mounted directory on the host with correct UID/GID.\n\n## Ownership\n\nBy default, LXCs map the guest system's user in the host by adding `100000` to it.\n\nSince the `root` has a `0:0` mapping, we can assume that any LXC's root user is mapped to `100000:100000` UID/GID. The same goes for any user in the guest; `1:1` gets mapped to `100001:100001` in the host.\n\nSo, if all we need is to use the `root` user (`0:0`) in our container to access the mountpoint, we can simply run this on the host:\n\n```\nchown 100000:100000 \u003CMOUNT_POINT_ON_HOST> -R\n```\n\nFor other users, we can follow the same formula of `Host UID/GID = Guest UID/GID + 100000` and define users with predefined UID/GIDs on the host:\n\n```\n# On the guest\nuseradd -u 1000 new-user-name\n```\n\n```\n# On the host\nchown 1000:1000 \u003CMOUNT_POINT_ON_HOST> -R\n```\n#### Sources\n\n- https://itsembedded.com/sysadmin/proxmox_bind_unprivileged_lxc/","src/content/article/proxmox-mount-points/proxmox-mount-points.md","2367e9408dba5c8b",{"html":261,"metadata":262},"\u003Cp>Unprivileged LXCs’ increased security and isolation, unfortunately, bring about some difficulties in sharing resources between the host and the guest. This particular issue usually reveals itself when users face all kinds of \u003Ccode>Permission denied\u003C/code> or \u003Ccode>Operation not permitted\u003C/code> errors while trying to access a directory on the host, and usual battle tactics like \u003Ccode>chown\u003C/code> and \u003Ccode>chmod\u003C/code> make no difference. One can go ahead and use pure network solutions but that’s not really resourceful. Fortunately, it is possible to map guest user’s UID/GID mapping to that of host’s by creating another user on the host with right settings and permissions.\u003C/p>\n\u003Ch2 id=\"binding-mountpoints\">Binding mountpoints\u003C/h2>\n\u003Cp>Bind mounts allow us to access previously mounted directories from a different location in \u003Ca href=\"https://en.wikipedia.org/wiki/POSIX\">Posix\u003C/a> systems. Proxmox can bind mountpoints between the host and the guest by either running this command:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>pct set &#x3C;CONTAINER_ID> -mp0 &#x3C;ABSOLUTE_PATH_ON_HOST>,mp=&#x3C;ABSOLUTE_PATH_ON_GUEST>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>or by adding this line to LXC config file under \u003Ccode>/etc/pve/lxc/&#x3C;CONTAINER_ID>.conf\u003C/code> on the host:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>mp0: &#x3C;ABSOLUTE_PATH_ON_HOST>,mp=&#x3C;ABSOLUTE_PATH_ON_GUEST>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This will allow you to access host’s shared directory from the container but contents will only be readable. For full access, we will \u003Ccode>chown\u003C/code> the mounted directory on the host with correct UID/GID.\u003C/p>\n\u003Ch2 id=\"ownership\">Ownership\u003C/h2>\n\u003Cp>By default, LXCs map the guest system’s user in the host by adding \u003Ccode>100000\u003C/code> to it.\u003C/p>\n\u003Cp>Since the \u003Ccode>root\u003C/code> has a \u003Ccode>0:0\u003C/code> mapping, we can assume that any LXC’s root user is mapped to \u003Ccode>100000:100000\u003C/code> UID/GID. The same goes for any user in the guest; \u003Ccode>1:1\u003C/code> gets mapped to \u003Ccode>100001:100001\u003C/code> in the host.\u003C/p>\n\u003Cp>So, if all we need is to use the \u003Ccode>root\u003C/code> user (\u003Ccode>0:0\u003C/code>) in our container to access the mountpoint, we can simply run this on the host:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>chown 100000:100000 &#x3C;MOUNT_POINT_ON_HOST> -R\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>For other users, we can follow the same formula of \u003Ccode>Host UID/GID = Guest UID/GID + 100000\u003C/code> and define users with predefined UID/GIDs on the host:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan># On the guest\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>useradd -u 1000 new-user-name\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan># On the host\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>chown 1000:1000 &#x3C;MOUNT_POINT_ON_HOST> -R\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch4 id=\"sources\">Sources\u003C/h4>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://itsembedded.com/sysadmin/proxmox_bind_unprivileged_lxc/\">https://itsembedded.com/sysadmin/proxmox_bind_unprivileged_lxc/\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":263,"localImagePaths":273,"remoteImagePaths":274,"frontmatter":275,"imagePaths":278},[264,267,270],{"depth":108,"slug":265,"text":266},"binding-mountpoints","Binding mountpoints",{"depth":108,"slug":268,"text":269},"ownership","Ownership",{"depth":167,"slug":271,"text":272},"sources","Sources",[],[],{"slug":250,"title":253,"pubDate":276,"draft":15,"tags":277},"2023-07-12",[256,11],[],"proxmox-mount-points/proxmox-mount-points.md","pinhole-redesign",{"id":280,"data":282,"body":288,"filePath":289,"assetImports":290,"digest":301,"rendered":302,"legacyId":322},{"title":283,"draft":15,"pubDate":284,"tags":285},"Pinhole Redesign",["Date","2023-07-20T00:00:00.000Z"],[286,287],"photography","pinhole","###### This is a write-in-progress post that I will be updating over time.\n\nI was into designing and building my own cameras roughly ten years ago, and I have been meaning to get back into it for quite some time now. I recently came across some of the old photographs I took with these cameras and it rekindled the passion I had for the craft.\n\nI decided to build several different cameras again, fixing the issues that previous builds had, and document the whole process in a series of blog posts.\n\nIf everything goes according to plan, I will build:\n- A 35mm panoramic with curved film plane\n- A compact, half frame 35mm with short focal length\n- A 6x6\n\nI want all of these to sport a 1/4\" tripod mount, replaceable pinhole plates, magnetic filter mounts, a lockable shutter that can be operated manually or with a cable release, a screw-lock body, leak-safe and precision film advance knobs, film counter (for medium-format), magnetic accessory mounts (spirit levels, viewfinders etc.), and hassle-free film spools (especially for the 35mm).\n\n## The Old Panoramic Pinhole\n\n![img](./assets/pinhole-old.jpeg)\n![img](./assets/pinhole-old-2.jpeg)\n\nThis was my favorite camera to shoot with for a long time. I made it from whatever material I had at home at the time: wood from an old cigar box, metal sheet from a soda can, knobs from skateboard bushings, one spool-catch (or whatever they are called) from an old FM radio antenna and the other one from a scrapped Zorki 4K, packaging paper, electrical tape, and other random stuff that I found around.\n\nI had even drawn a now-lost schematic diagrams before building it to make sure I was doing everything right.\n\nAs you can tell, it is a product-of-love but it had its problems.\n\nNamely, unintentional multiple exposures:\n\n![img](./assets/problem-1.jpeg)\n![img](./assets/problem-2.jpeg)\n\nPoor film alignment:\n\n![img](./assets/problem-3.jpeg)\n\nOccasional light leaks:\n\n![img](./assets/problem-4.jpeg)\n\nand others that I cannot remember for now. So, it wasn't the most reliable thing ever. But, when it worked, it worked beautifully.\n\n![img](./assets/panoramic-1.jpeg)\n![img](./assets/panoramic-2.jpeg)\n![img](./assets/panoramic-3.jpeg)\n![img](./assets/panoramic-4.jpeg)\n\n## Redesign\n\nI will start with the design process. BRB!","src/content/article/photography/pinhole/pinhole-redesign.md",[291,292,293,294,295,296,297,298,299,300],"./assets/pinhole-old.jpeg","./assets/pinhole-old-2.jpeg","./assets/problem-1.jpeg","./assets/problem-2.jpeg","./assets/problem-3.jpeg","./assets/problem-4.jpeg","./assets/panoramic-1.jpeg","./assets/panoramic-2.jpeg","./assets/panoramic-3.jpeg","./assets/panoramic-4.jpeg","8c3b3b8e3a61d25f",{"html":303,"metadata":304},"\u003Ch6 id=\"this-is-a-write-in-progress-post-that-i-will-be-updating-over-time\">This is a write-in-progress post that I will be updating over time.\u003C/h6>\n\u003Cp>I was into designing and building my own cameras roughly ten years ago, and I have been meaning to get back into it for quite some time now. I recently came across some of the old photographs I took with these cameras and it rekindled the passion I had for the craft.\u003C/p>\n\u003Cp>I decided to build several different cameras again, fixing the issues that previous builds had, and document the whole process in a series of blog posts.\u003C/p>\n\u003Cp>If everything goes according to plan, I will build:\u003C/p>\n\u003Cul>\n\u003Cli>A 35mm panoramic with curved film plane\u003C/li>\n\u003Cli>A compact, half frame 35mm with short focal length\u003C/li>\n\u003Cli>A 6x6\u003C/li>\n\u003C/ul>\n\u003Cp>I want all of these to sport a 1/4” tripod mount, replaceable pinhole plates, magnetic filter mounts, a lockable shutter that can be operated manually or with a cable release, a screw-lock body, leak-safe and precision film advance knobs, film counter (for medium-format), magnetic accessory mounts (spirit levels, viewfinders etc.), and hassle-free film spools (especially for the 35mm).\u003C/p>\n\u003Ch2 id=\"the-old-panoramic-pinhole\">The Old Panoramic Pinhole\u003C/h2>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./assets/pinhole-old.jpeg&#x22;,&#x22;alt&#x22;:&#x22;img&#x22;,&#x22;index&#x22;:0}\">\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./assets/pinhole-old-2.jpeg&#x22;,&#x22;alt&#x22;:&#x22;img&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>This was my favorite camera to shoot with for a long time. I made it from whatever material I had at home at the time: wood from an old cigar box, metal sheet from a soda can, knobs from skateboard bushings, one spool-catch (or whatever they are called) from an old FM radio antenna and the other one from a scrapped Zorki 4K, packaging paper, electrical tape, and other random stuff that I found around.\u003C/p>\n\u003Cp>I had even drawn a now-lost schematic diagrams before building it to make sure I was doing everything right.\u003C/p>\n\u003Cp>As you can tell, it is a product-of-love but it had its problems.\u003C/p>\n\u003Cp>Namely, unintentional multiple exposures:\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./assets/problem-1.jpeg&#x22;,&#x22;alt&#x22;:&#x22;img&#x22;,&#x22;index&#x22;:0}\">\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./assets/problem-2.jpeg&#x22;,&#x22;alt&#x22;:&#x22;img&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>Poor film alignment:\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./assets/problem-3.jpeg&#x22;,&#x22;alt&#x22;:&#x22;img&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>Occasional light leaks:\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./assets/problem-4.jpeg&#x22;,&#x22;alt&#x22;:&#x22;img&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>and others that I cannot remember for now. So, it wasn’t the most reliable thing ever. But, when it worked, it worked beautifully.\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./assets/panoramic-1.jpeg&#x22;,&#x22;alt&#x22;:&#x22;img&#x22;,&#x22;index&#x22;:0}\">\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./assets/panoramic-2.jpeg&#x22;,&#x22;alt&#x22;:&#x22;img&#x22;,&#x22;index&#x22;:0}\">\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./assets/panoramic-3.jpeg&#x22;,&#x22;alt&#x22;:&#x22;img&#x22;,&#x22;index&#x22;:0}\">\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./assets/panoramic-4.jpeg&#x22;,&#x22;alt&#x22;:&#x22;img&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Ch2 id=\"redesign\">Redesign\u003C/h2>\n\u003Cp>I will start with the design process. BRB!\u003C/p>",{"headings":305,"localImagePaths":316,"remoteImagePaths":317,"frontmatter":318,"imagePaths":321},[306,310,313],{"depth":307,"slug":308,"text":309},6,"this-is-a-write-in-progress-post-that-i-will-be-updating-over-time","This is a write-in-progress post that I will be updating over time.",{"depth":108,"slug":311,"text":312},"the-old-panoramic-pinhole","The Old Panoramic Pinhole",{"depth":108,"slug":314,"text":315},"redesign","Redesign",[291,292,293,294,295,296,297,298,299,300],[],{"slug":280,"title":283,"pubDate":319,"draft":15,"tags":320},"2023-07-20",[286,287],[291,292,293,294,295,296,297,298,299,300],"photography/pinhole/pinhole-redesign.md","markdown-test",{"id":323,"data":325,"body":331,"filePath":332,"digest":333,"rendered":334,"legacyId":422},{"title":326,"draft":66,"pubDate":327,"tags":328},"Markdown Test",["Date","2000-01-01T00:00:00.000Z"],[329,330],"markdown","test","# h1 Heading 8-)\n## h2 Heading\n### h3 Heading\n#### h4 Heading\n##### h5 Heading\n###### h6 Heading\n\n\n## Horizontal Rules\n\n___\n\n---\n\n***\n\n\n## Typographic replacements\n\nEnable typographer option to see result.\n\n(c) (C) (r) (R) (tm) (TM) (p) (P) +-\n\ntest.. test... test..... test?..... test!....\n\n!!!!!! ???? ,,  -- ---\n\n\"Smartypants, double quotes\" and 'single quotes'\n\n\n## Emphasis\n\n**This is bold text**\n\n__This is bold text__\n\n*This is italic text*\n\n_This is italic text_\n\n~~Strikethrough~~\n\n\n## Blockquotes\n\n\n> Blockquotes can also be nested...\n>> ...by using additional greater-than signs right next to each other...\n> > > ...or with spaces between arrows.\n\n\n## Lists\n\nUnordered\n\n+ Create a list by starting a line with `+`, `-`, or `*`\n+ Sub-lists are made by indenting 2 spaces:\n  - Marker character change forces new list start:\n    * Ac tristique libero volutpat at\n    + Facilisis in pretium nisl aliquet\n    - Nulla volutpat aliquam velit\n+ Very easy!\n\nOrdered\n\n1. Lorem ipsum dolor sit amet\n2. Consectetur adipiscing elit\n3. Integer molestie lorem at massa\n\n\n1. You can use sequential numbers...\n1. ...or keep all the numbers as `1.`\n\nStart numbering with offset:\n\n57. foo\n1. bar\n\n\n## Code\n\nInline `code`\n\nIndented code\n\n    // Some comments\n    line 1 of code\n    line 2 of code\n    line 3 of code\n\n\nBlock code \"fences\"\n\n```\nSample text here...\n```\n\nSyntax highlighting\n\n``` js\nvar foo = function (bar) {\n  return bar++;\n};\n\nconsole.log(foo(5));\n```\n\n## Tables\n\n| Option | Description                                                               |\n| ------ | ------------------------------------------------------------------------- |\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default.    |\n| ext    | extension to be used for dest files.                                      |\n\nRight aligned columns\n\n| Option |                                                               Description |\n| -----: | ------------------------------------------------------------------------: |\n|   data | path to data files to supply the data that will be passed into templates. |\n| engine |    engine to be used for processing templates. Handlebars is the default. |\n|    ext |                                      extension to be used for dest files. |\n\n\n## Links\n\n[link text](http://dev.nodeca.com)\n\n[link with title](http://nodeca.github.io/pica/demo/ \"title text!\")\n\nAutoconverted link https://github.com/nodeca/pica (enable linkify to see)\n\n\n## Images\n\n![Minion](https://octodex.github.com/images/minion.png)\n![Stormtroopocat](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\")\n\nLike links, Images also have a footnote style syntax\n\n![Alt text][id]\n\nWith a reference later in the document defining the URL location:\n\n[id]: https://octodex.github.com/images/dojocat.jpg  \"The Dojocat\"\n\n\n## Plugins\n\nThe killer feature of `markdown-it` is very effective support of\n[syntax plugins](https://www.npmjs.org/browse/keyword/markdown-it-plugin).\n\n\n### [Emojies](https://github.com/markdown-it/markdown-it-emoji)\n\n> Classic markup: :wink: :crush: :cry: :tear: :laughing: :yum:\n>\n> Shortcuts (emoticons): :-) :-( 8-) ;)\n\nsee [how to change output](https://github.com/markdown-it/markdown-it-emoji#change-output) with twemoji.\n\n\n### [Subscript](https://github.com/markdown-it/markdown-it-sub) / [Superscript](https://github.com/markdown-it/markdown-it-sup)\n\n- 19^th^\n- H~2~O\n\n\n### [\\\u003Cins>](https://github.com/markdown-it/markdown-it-ins)\n\n++Inserted text++\n\n\n### [\\\u003Cmark>](https://github.com/markdown-it/markdown-it-mark)\n\n==Marked text==\n\n\n### [Footnotes](https://github.com/markdown-it/markdown-it-footnote)\n\nFootnote 1 link[^first].\n\nFootnote 2 link[^second].\n\nInline footnote^[Text of inline footnote] definition.\n\nDuplicated footnote reference[^second].\n\n[^first]: Footnote **can have markup**\n\n    and multiple paragraphs.\n\n[^second]: Footnote text.\n\n\n### [Definition lists](https://github.com/markdown-it/markdown-it-deflist)\n\nTerm 1\n\n:   Definition 1\nwith lazy continuation.\n\nTerm 2 with *inline markup*\n\n:   Definition 2\n\n        { some code, part of Definition 2 }\n\n    Third paragraph of definition 2.\n\n_Compact style:_\n\nTerm 1\n  ~ Definition 1\n\nTerm 2\n  ~ Definition 2a\n  ~ Definition 2b\n\n\n### [Abbreviations](https://github.com/markdown-it/markdown-it-abbr)\n\nThis is HTML abbreviation example.\n\nIt converts \"HTML\", but keep intact partial entries like \"xxxHTMLyyy\" and so on.\n\n*[HTML]: Hyper Text Markup Language\n\n### [Custom containers](https://github.com/markdown-it/markdown-it-container)\n\n::: warning\n*here be dragons*\n:::\n\n## Mermaid\n\n\n```mermaid\ngraph TD\n    A[Start] --> B{Is it working?}\n    B -->|Yes| C[Great!]\n    B -->|No| D[Debug]\n    D --> B\n```\n\n```mermaid\nflowchart TD\n\tA --> B\n\tB --> C\n\tC --> D\n\tD --> E\n\tE --> F\n\tF --> G\n\tG --> H\n\tH --> I\n\tH --> J\n\tH --> K\n\tH --> L\n\tH --> M\n\tH --> N\n\tH --> O\n\tH --> P\n```\n\n```mermaid\npie title What Voldemort doesn't have?\n         \"FRIENDS\" : 2\n         \"FAMILY\" : 3\n         \"NOSE\" : 45\n```\n\n```mermaid\nsequenceDiagram\n    participant Alice\n    participant Bob\n    Alice->>John: Hello John, how are you?\n    loop Healthcheck\n        John->>John: Fight against hypochondria\n    end\n    Note right of John: Rational thoughts \u003Cbr/>prevail!\n    John-->>Alice: Great!\n    John->>Bob: How about you?\n    Bob-->>John: Jolly good!\n```\n\n```mermaid\ngraph TB\n    sq[Square shape] --> ci((Circle shape))\n\n    subgraph A\n        od>Odd shape]-- Two line&lt;br/>edge comment --> ro\n        di{Diamond with &lt;br/> line break} -.-> ro(Rounded&lt;br>square&lt;br>shape)\n        di==>ro2(Rounded square shape)\n    end\n\n    %% Notice that no text in shape are added here instead that is appended further down\n    e --> od3>Really long text with linebreak&lt;br>in an Odd shape]\n\n    %% Comments after double percent signs\n    e((Inner / circle&lt;br>and some odd &lt;br>special characters)) --> f(,.?!+-*ز)\n\n    cyr[Cyrillic]-->cyr2((Circle shape Начало));\n\n     classDef green fill:#9f6,stroke:#333,stroke-width:2px;\n     classDef orange fill:#f96,stroke:#333,stroke-width:4px;\n     class sq,e green\n     class di orange\n```","src/content/article/markdown-test/markdown-test.md","c9a71723d0598436",{"html":335,"metadata":336},"\u003Ch1 id=\"h1-heading-8\">h1 Heading 8-)\u003C/h1>\n\u003Ch2 id=\"h2-heading\">h2 Heading\u003C/h2>\n\u003Ch3 id=\"h3-heading\">h3 Heading\u003C/h3>\n\u003Ch4 id=\"h4-heading\">h4 Heading\u003C/h4>\n\u003Ch5 id=\"h5-heading\">h5 Heading\u003C/h5>\n\u003Ch6 id=\"h6-heading\">h6 Heading\u003C/h6>\n\u003Ch2 id=\"horizontal-rules\">Horizontal Rules\u003C/h2>\n\u003Chr>\n\u003Chr>\n\u003Chr>\n\u003Ch2 id=\"typographic-replacements\">Typographic replacements\u003C/h2>\n\u003Cp>Enable typographer option to see result.\u003C/p>\n\u003Cp>(c) (C) (r) (R) (tm) (TM) (p) (P) +-\u003C/p>\n\u003Cp>test.. test… test… test?… test!…\u003C/p>\n\u003Cp>!!!!!! ???? ,,  — ---\u003C/p>\n\u003Cp>“Smartypants, double quotes” and ‘single quotes’\u003C/p>\n\u003Ch2 id=\"emphasis\">Emphasis\u003C/h2>\n\u003Cp>\u003Cstrong>This is bold text\u003C/strong>\u003C/p>\n\u003Cp>\u003Cstrong>This is bold text\u003C/strong>\u003C/p>\n\u003Cp>\u003Cem>This is italic text\u003C/em>\u003C/p>\n\u003Cp>\u003Cem>This is italic text\u003C/em>\u003C/p>\n\u003Cp>\u003Cdel>Strikethrough\u003C/del>\u003C/p>\n\u003Ch2 id=\"blockquotes\">Blockquotes\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Blockquotes can also be nested…\u003C/p>\n\u003Cblockquote>\n\u003Cp>…by using additional greater-than signs right next to each other…\u003C/p>\n\u003Cblockquote>\n\u003Cp>…or with spaces between arrows.\u003C/p>\n\u003C/blockquote>\n\u003C/blockquote>\n\u003C/blockquote>\n\u003Ch2 id=\"lists\">Lists\u003C/h2>\n\u003Cp>Unordered\u003C/p>\n\u003Cul>\n\u003Cli>Create a list by starting a line with \u003Ccode>+\u003C/code>, \u003Ccode>-\u003C/code>, or \u003Ccode>*\u003C/code>\u003C/li>\n\u003Cli>Sub-lists are made by indenting 2 spaces:\n\u003Cul>\n\u003Cli>Marker character change forces new list start:\n\u003Cul>\n\u003Cli>Ac tristique libero volutpat at\u003C/li>\n\u003C/ul>\n\u003Cul>\n\u003Cli>Facilisis in pretium nisl aliquet\u003C/li>\n\u003C/ul>\n\u003Cul>\n\u003Cli>Nulla volutpat aliquam velit\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Very easy!\u003C/li>\n\u003C/ul>\n\u003Cp>Ordered\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>Lorem ipsum dolor sit amet\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Consectetur adipiscing elit\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Integer molestie lorem at massa\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>You can use sequential numbers…\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>…or keep all the numbers as \u003Ccode>1.\u003C/code>\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003Cp>Start numbering with offset:\u003C/p>\n\u003Col start=\"57\">\n\u003Cli>foo\u003C/li>\n\u003Cli>bar\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"code\">Code\u003C/h2>\n\u003Cp>Inline \u003Ccode>code\u003C/code>\u003C/p>\n\u003Cp>Indented code\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>// Some comments\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>line 1 of code\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>line 2 of code\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>line 3 of code\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Block code “fences”\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Sample text here...\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Syntax highlighting\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#B392F0\"> foo\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">bar\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> bar\u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">foo\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">));\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"tables\">Tables\u003C/h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Option\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>data\u003C/td>\u003Ctd>path to data files to supply the data that will be passed into templates.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>engine\u003C/td>\u003Ctd>engine to be used for processing templates. Handlebars is the default.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>ext\u003C/td>\u003Ctd>extension to be used for dest files.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Cp>Right aligned columns\u003C/p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth align=\"right\">Option\u003C/th>\u003Cth align=\"right\">Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd align=\"right\">data\u003C/td>\u003Ctd align=\"right\">path to data files to supply the data that will be passed into templates.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd align=\"right\">engine\u003C/td>\u003Ctd align=\"right\">engine to be used for processing templates. Handlebars is the default.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd align=\"right\">ext\u003C/td>\u003Ctd align=\"right\">extension to be used for dest files.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Ch2 id=\"links\">Links\u003C/h2>\n\u003Cp>\u003Ca href=\"http://dev.nodeca.com\">link text\u003C/a>\u003C/p>\n\u003Cp>\u003Ca href=\"http://nodeca.github.io/pica/demo/\" title=\"title text!\">link with title\u003C/a>\u003C/p>\n\u003Cp>Autoconverted link \u003Ca href=\"https://github.com/nodeca/pica\">https://github.com/nodeca/pica\u003C/a> (enable linkify to see)\u003C/p>\n\u003Ch2 id=\"images\">Images\u003C/h2>\n\u003Cp>\u003Cimg src=\"https://octodex.github.com/images/minion.png\" alt=\"Minion\">\n\u003Cimg src=\"https://octodex.github.com/images/stormtroopocat.jpg\" alt=\"Stormtroopocat\" title=\"The Stormtroopocat\">\u003C/p>\n\u003Cp>Like links, Images also have a footnote style syntax\u003C/p>\n\u003Cp>\u003Cimg src=\"https://octodex.github.com/images/dojocat.jpg\" alt=\"Alt text\" title=\"The Dojocat\">\u003C/p>\n\u003Cp>With a reference later in the document defining the URL location:\u003C/p>\n\u003Ch2 id=\"plugins\">Plugins\u003C/h2>\n\u003Cp>The killer feature of \u003Ccode>markdown-it\u003C/code> is very effective support of\n\u003Ca href=\"https://www.npmjs.org/browse/keyword/markdown-it-plugin\">syntax plugins\u003C/a>.\u003C/p>\n\u003Ch3 id=\"emojies\">\u003Ca href=\"https://github.com/markdown-it/markdown-it-emoji\">Emojies\u003C/a>\u003C/h3>\n\u003Cblockquote>\n\u003Cp>Classic markup: :wink: :crush: :cry: :tear: :laughing: :yum:\u003C/p>\n\u003Cp>Shortcuts (emoticons): :-) :-( 8-) ;)\u003C/p>\n\u003C/blockquote>\n\u003Cp>see \u003Ca href=\"https://github.com/markdown-it/markdown-it-emoji#change-output\">how to change output\u003C/a> with twemoji.\u003C/p>\n\u003Ch3 id=\"subscript--superscript\">\u003Ca href=\"https://github.com/markdown-it/markdown-it-sub\">Subscript\u003C/a> / \u003Ca href=\"https://github.com/markdown-it/markdown-it-sup\">Superscript\u003C/a>\u003C/h3>\n\u003Cul>\n\u003Cli>19^th^\u003C/li>\n\u003Cli>H\u003Cdel>2\u003C/del>O\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"ins\">\u003Ca href=\"https://github.com/markdown-it/markdown-it-ins\">&#x3C;ins>\u003C/a>\u003C/h3>\n\u003Cp>++Inserted text++\u003C/p>\n\u003Ch3 id=\"mark\">\u003Ca href=\"https://github.com/markdown-it/markdown-it-mark\">&#x3C;mark>\u003C/a>\u003C/h3>\n\u003Cp>==Marked text==\u003C/p>\n\u003Ch3 id=\"footnotes\">\u003Ca href=\"https://github.com/markdown-it/markdown-it-footnote\">Footnotes\u003C/a>\u003C/h3>\n\u003Cp>Footnote 1 link\u003Csup>\u003Ca href=\"#user-content-fn-first\" id=\"user-content-fnref-first\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">1\u003C/a>\u003C/sup>.\u003C/p>\n\u003Cp>Footnote 2 link\u003Csup>\u003Ca href=\"#user-content-fn-second\" id=\"user-content-fnref-second\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">2\u003C/a>\u003C/sup>.\u003C/p>\n\u003Cp>Inline footnote^[Text of inline footnote] definition.\u003C/p>\n\u003Cp>Duplicated footnote reference\u003Csup>\u003Ca href=\"#user-content-fn-second\" id=\"user-content-fnref-second-2\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">2\u003C/a>\u003C/sup>.\u003C/p>\n\u003Ch3 id=\"definition-lists\">\u003Ca href=\"https://github.com/markdown-it/markdown-it-deflist\">Definition lists\u003C/a>\u003C/h3>\n\u003Cp>Term 1\u003C/p>\n\u003Cp>:   Definition 1\nwith lazy continuation.\u003C/p>\n\u003Cp>Term 2 with \u003Cem>inline markup\u003C/em>\u003C/p>\n\u003Cp>:   Definition 2\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>    { some code, part of Definition 2 }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Third paragraph of definition 2.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cem>Compact style:\u003C/em>\u003C/p>\n\u003Cp>Term 1\n~ Definition 1\u003C/p>\n\u003Cp>Term 2\n~ Definition 2a\n~ Definition 2b\u003C/p>\n\u003Ch3 id=\"abbreviations\">\u003Ca href=\"https://github.com/markdown-it/markdown-it-abbr\">Abbreviations\u003C/a>\u003C/h3>\n\u003Cp>This is HTML abbreviation example.\u003C/p>\n\u003Cp>It converts “HTML”, but keep intact partial entries like “xxxHTMLyyy” and so on.\u003C/p>\n\u003Cp>*[HTML]: Hyper Text Markup Language\u003C/p>\n\u003Ch3 id=\"custom-containers\">\u003Ca href=\"https://github.com/markdown-it/markdown-it-container\">Custom containers\u003C/a>\u003C/h3>\n\u003Cp>::: warning\n\u003Cem>here be dragons\u003C/em>\n:::\u003C/p>\n\u003Ch2 id=\"mermaid\">Mermaid\u003C/h2>\n\u003Csvg aria-roledescription=\"flowchart-v2\" role=\"graphics-document document\" viewBox=\"0 0 277.625 395.375\" style=\"max-width: 277.625px;\" class=\"flowchart\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" id=\"mermaid-0\">\u003Cstyle>#mermaid-0{font-family:arial,sans-serif;font-size:16px;fill:#333;}@keyframes edge-animation-frame{from{stroke-dashoffset:0;}}@keyframes dash{to{stroke-dashoffset:0;}}#mermaid-0 .edge-animation-slow{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 50s linear infinite;stroke-linecap:round;}#mermaid-0 .edge-animation-fast{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 20s linear infinite;stroke-linecap:round;}#mermaid-0 .error-icon{fill:#552222;}#mermaid-0 .error-text{fill:#552222;stroke:#552222;}#mermaid-0 .edge-thickness-normal{stroke-width:1px;}#mermaid-0 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-0 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-0 .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-0 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-0 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-0 .marker{fill:#333333;stroke:#333333;}#mermaid-0 .marker.cross{stroke:#333333;}#mermaid-0 svg{font-family:arial,sans-serif;font-size:16px;}#mermaid-0 p{margin:0;}#mermaid-0 .label{font-family:arial,sans-serif;color:#333;}#mermaid-0 .cluster-label text{fill:#333;}#mermaid-0 .cluster-label span{color:#333;}#mermaid-0 .cluster-label span p{background-color:transparent;}#mermaid-0 .label text,#mermaid-0 span{fill:#333;color:#333;}#mermaid-0 .node rect,#mermaid-0 .node circle,#mermaid-0 .node ellipse,#mermaid-0 .node polygon,#mermaid-0 .node path{fill:#ECECFF;stroke:#9370DB;stroke-width:1px;}#mermaid-0 .rough-node .label text,#mermaid-0 .node .label text,#mermaid-0 .image-shape .label,#mermaid-0 .icon-shape .label{text-anchor:middle;}#mermaid-0 .node .katex path{fill:#000;stroke:#000;stroke-width:1px;}#mermaid-0 .rough-node .label,#mermaid-0 .node .label,#mermaid-0 .image-shape .label,#mermaid-0 .icon-shape .label{text-align:center;}#mermaid-0 .node.clickable{cursor:pointer;}#mermaid-0 .root .anchor path{fill:#333333!important;stroke-width:0;stroke:#333333;}#mermaid-0 .arrowheadPath{fill:#333333;}#mermaid-0 .edgePath .path{stroke:#333333;stroke-width:2.0px;}#mermaid-0 .flowchart-link{stroke:#333333;fill:none;}#mermaid-0 .edgeLabel{background-color:rgba(232,232,232, 0.8);text-align:center;}#mermaid-0 .edgeLabel p{background-color:rgba(232,232,232, 0.8);}#mermaid-0 .edgeLabel rect{opacity:0.5;background-color:rgba(232,232,232, 0.8);fill:rgba(232,232,232, 0.8);}#mermaid-0 .labelBkg{background-color:rgba(232, 232, 232, 0.5);}#mermaid-0 .cluster rect{fill:#ffffde;stroke:#aaaa33;stroke-width:1px;}#mermaid-0 .cluster text{fill:#333;}#mermaid-0 .cluster span{color:#333;}#mermaid-0 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:arial,sans-serif;font-size:12px;background:hsl(80, 100%, 96.2745098039%);border:1px solid #aaaa33;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-0 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#333;}#mermaid-0 rect.text{fill:none;stroke-width:0;}#mermaid-0 .icon-shape,#mermaid-0 .image-shape{background-color:rgba(232,232,232, 0.8);text-align:center;}#mermaid-0 .icon-shape p,#mermaid-0 .image-shape p{background-color:rgba(232,232,232, 0.8);padding:2px;}#mermaid-0 .icon-shape rect,#mermaid-0 .image-shape rect{opacity:0.5;background-color:rgba(232,232,232, 0.8);fill:rgba(232,232,232, 0.8);}#mermaid-0 .label-icon{display:inline-block;height:1em;overflow:visible;vertical-align:-0.125em;}#mermaid-0 .node .label-icon path{fill:currentColor;stroke:revert;stroke-width:revert;}#mermaid-0 :root{--mermaid-font-family:arial,sans-serif;}\u003C/style>\u003Cg>\u003Cmarker orient=\"auto\" markerHeight=\"8\" markerWidth=\"8\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"5\" viewBox=\"0 0 10 10\" class=\"marker flowchart-v2\" id=\"mermaid-0_flowchart-v2-pointEnd\">\u003Cpath style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 0 0 L 10 5 L 0 10 z\">\u003C/path>\u003C/marker>\u003Cmarker orient=\"auto\" markerHeight=\"8\" markerWidth=\"8\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"4.5\" viewBox=\"0 0 10 10\" class=\"marker flowchart-v2\" id=\"mermaid-0_flowchart-v2-pointStart\">\u003Cpath style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 0 5 L 10 10 L 10 0 z\">\u003C/path>\u003C/marker>\u003Cmarker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"11\" viewBox=\"0 0 10 10\" class=\"marker flowchart-v2\" id=\"mermaid-0_flowchart-v2-circleEnd\">\u003Ccircle style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" r=\"5\" cy=\"5\" cx=\"5\">\u003C/circle>\u003C/marker>\u003Cmarker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"-1\" viewBox=\"0 0 10 10\" class=\"marker flowchart-v2\" id=\"mermaid-0_flowchart-v2-circleStart\">\u003Ccircle style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" r=\"5\" cy=\"5\" cx=\"5\">\u003C/circle>\u003C/marker>\u003Cmarker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5.2\" refX=\"12\" viewBox=\"0 0 11 11\" class=\"marker cross flowchart-v2\" id=\"mermaid-0_flowchart-v2-crossEnd\">\u003Cpath style=\"stroke-width: 2; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 1,1 l 9,9 M 10,1 l -9,9\">\u003C/path>\u003C/marker>\u003Cmarker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5.2\" refX=\"-1\" viewBox=\"0 0 11 11\" class=\"marker cross flowchart-v2\" id=\"mermaid-0_flowchart-v2-crossStart\">\u003Cpath style=\"stroke-width: 2; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 1,1 l 9,9 M 10,1 l -9,9\">\u003C/path>\u003C/marker>\u003Cg class=\"root\">\u003Cg class=\"clusters\">\u003C/g>\u003Cg class=\"edgePaths\">\u003Cpath marker-end=\"url(#mermaid-0_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_A_B_0\" d=\"M159.781,62L159.781,66.167C159.781,70.333,159.781,78.667,159.781,86.333C159.781,94,159.781,101,159.781,104.5L159.781,108\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-0_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_B_C_0\" d=\"M124.89,224.484L114.114,236.466C103.338,248.447,81.786,272.411,71.01,289.893C60.234,307.375,60.234,318.375,60.234,323.875L60.234,329.375\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-0_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_B_D_0\" d=\"M159.781,259.375L159.781,265.542C159.781,271.708,159.781,284.042,164.762,295.874C169.744,307.707,179.706,319.039,184.687,324.705L189.669,330.371\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-0_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_D_B_0\" d=\"M222.423,333.375L223.879,327.208C225.335,321.042,228.248,308.708,222.984,292.12C217.719,275.533,204.279,254.69,197.558,244.269L190.838,233.848\">\u003C/path>\u003C/g>\u003Cg class=\"edgeLabels\">\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(60.234375, 296.375)\" class=\"edgeLabel\">\u003Cg transform=\"translate(-13.0546875, -12)\" class=\"label\">\u003CforeignObject height=\"24\" width=\"26.109375\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003Cp>Yes\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(159.78125, 296.375)\" class=\"edgeLabel\">\u003Cg transform=\"translate(-10.2265625, -12)\" class=\"label\">\u003CforeignObject height=\"24\" width=\"20.453125\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003Cp>No\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003C/g>\u003Cg class=\"nodes\">\u003Cg transform=\"translate(159.78125, 35)\" id=\"flowchart-A-0\" class=\"node default\">\u003Crect height=\"54\" width=\"93.796875\" y=\"-27\" x=\"-46.8984375\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-16.8984375, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"33.796875\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>Start\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(159.78125, 185.6875)\" id=\"flowchart-B-1\" class=\"node default\">\u003Cpolygon transform=\"translate(-73.1875, 73.6875)\" class=\"label-container\" points=\"73.6875,0 147.375,-73.6875 73.6875,-147.375 0,-73.6875\">\u003C/polygon>\u003Cg transform=\"translate(-46.6875, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"93.375\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>Is it working?\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(60.234375, 360.375)\" id=\"flowchart-C-3\" class=\"node default\">\u003Crect height=\"54\" width=\"104.46875\" y=\"-27\" x=\"-52.234375\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-22.234375, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"44.46875\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>Great!\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(216.046875, 360.375)\" id=\"flowchart-D-5\" class=\"node default\">\u003Crect height=\"54\" width=\"107.15625\" y=\"-27\" x=\"-53.578125\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-23.578125, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"47.15625\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>Debug\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003C/g>\u003C/g>\u003C/g>\u003C/svg>\n\u003Csvg aria-roledescription=\"flowchart-v2\" role=\"graphics-document document\" viewBox=\"0 0 926.046875 902\" style=\"max-width: 926.046875px;\" class=\"flowchart\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" id=\"mermaid-1\">\u003Cstyle>#mermaid-1{font-family:arial,sans-serif;font-size:16px;fill:#333;}@keyframes edge-animation-frame{from{stroke-dashoffset:0;}}@keyframes dash{to{stroke-dashoffset:0;}}#mermaid-1 .edge-animation-slow{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 50s linear infinite;stroke-linecap:round;}#mermaid-1 .edge-animation-fast{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 20s linear infinite;stroke-linecap:round;}#mermaid-1 .error-icon{fill:#552222;}#mermaid-1 .error-text{fill:#552222;stroke:#552222;}#mermaid-1 .edge-thickness-normal{stroke-width:1px;}#mermaid-1 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-1 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-1 .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-1 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-1 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-1 .marker{fill:#333333;stroke:#333333;}#mermaid-1 .marker.cross{stroke:#333333;}#mermaid-1 svg{font-family:arial,sans-serif;font-size:16px;}#mermaid-1 p{margin:0;}#mermaid-1 .label{font-family:arial,sans-serif;color:#333;}#mermaid-1 .cluster-label text{fill:#333;}#mermaid-1 .cluster-label span{color:#333;}#mermaid-1 .cluster-label span p{background-color:transparent;}#mermaid-1 .label text,#mermaid-1 span{fill:#333;color:#333;}#mermaid-1 .node rect,#mermaid-1 .node circle,#mermaid-1 .node ellipse,#mermaid-1 .node polygon,#mermaid-1 .node path{fill:#ECECFF;stroke:#9370DB;stroke-width:1px;}#mermaid-1 .rough-node .label text,#mermaid-1 .node .label text,#mermaid-1 .image-shape .label,#mermaid-1 .icon-shape .label{text-anchor:middle;}#mermaid-1 .node .katex path{fill:#000;stroke:#000;stroke-width:1px;}#mermaid-1 .rough-node .label,#mermaid-1 .node .label,#mermaid-1 .image-shape .label,#mermaid-1 .icon-shape .label{text-align:center;}#mermaid-1 .node.clickable{cursor:pointer;}#mermaid-1 .root .anchor path{fill:#333333!important;stroke-width:0;stroke:#333333;}#mermaid-1 .arrowheadPath{fill:#333333;}#mermaid-1 .edgePath .path{stroke:#333333;stroke-width:2.0px;}#mermaid-1 .flowchart-link{stroke:#333333;fill:none;}#mermaid-1 .edgeLabel{background-color:rgba(232,232,232, 0.8);text-align:center;}#mermaid-1 .edgeLabel p{background-color:rgba(232,232,232, 0.8);}#mermaid-1 .edgeLabel rect{opacity:0.5;background-color:rgba(232,232,232, 0.8);fill:rgba(232,232,232, 0.8);}#mermaid-1 .labelBkg{background-color:rgba(232, 232, 232, 0.5);}#mermaid-1 .cluster rect{fill:#ffffde;stroke:#aaaa33;stroke-width:1px;}#mermaid-1 .cluster text{fill:#333;}#mermaid-1 .cluster span{color:#333;}#mermaid-1 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:arial,sans-serif;font-size:12px;background:hsl(80, 100%, 96.2745098039%);border:1px solid #aaaa33;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-1 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#333;}#mermaid-1 rect.text{fill:none;stroke-width:0;}#mermaid-1 .icon-shape,#mermaid-1 .image-shape{background-color:rgba(232,232,232, 0.8);text-align:center;}#mermaid-1 .icon-shape p,#mermaid-1 .image-shape p{background-color:rgba(232,232,232, 0.8);padding:2px;}#mermaid-1 .icon-shape rect,#mermaid-1 .image-shape rect{opacity:0.5;background-color:rgba(232,232,232, 0.8);fill:rgba(232,232,232, 0.8);}#mermaid-1 .label-icon{display:inline-block;height:1em;overflow:visible;vertical-align:-0.125em;}#mermaid-1 .node .label-icon path{fill:currentColor;stroke:revert;stroke-width:revert;}#mermaid-1 :root{--mermaid-font-family:arial,sans-serif;}\u003C/style>\u003Cg>\u003Cmarker orient=\"auto\" markerHeight=\"8\" markerWidth=\"8\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"5\" viewBox=\"0 0 10 10\" class=\"marker flowchart-v2\" id=\"mermaid-1_flowchart-v2-pointEnd\">\u003Cpath style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 0 0 L 10 5 L 0 10 z\">\u003C/path>\u003C/marker>\u003Cmarker orient=\"auto\" markerHeight=\"8\" markerWidth=\"8\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"4.5\" viewBox=\"0 0 10 10\" class=\"marker flowchart-v2\" id=\"mermaid-1_flowchart-v2-pointStart\">\u003Cpath style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 0 5 L 10 10 L 10 0 z\">\u003C/path>\u003C/marker>\u003Cmarker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"11\" viewBox=\"0 0 10 10\" class=\"marker flowchart-v2\" id=\"mermaid-1_flowchart-v2-circleEnd\">\u003Ccircle style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" r=\"5\" cy=\"5\" cx=\"5\">\u003C/circle>\u003C/marker>\u003Cmarker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"-1\" viewBox=\"0 0 10 10\" class=\"marker flowchart-v2\" id=\"mermaid-1_flowchart-v2-circleStart\">\u003Ccircle style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" r=\"5\" cy=\"5\" cx=\"5\">\u003C/circle>\u003C/marker>\u003Cmarker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5.2\" refX=\"12\" viewBox=\"0 0 11 11\" class=\"marker cross flowchart-v2\" id=\"mermaid-1_flowchart-v2-crossEnd\">\u003Cpath style=\"stroke-width: 2; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 1,1 l 9,9 M 10,1 l -9,9\">\u003C/path>\u003C/marker>\u003Cmarker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5.2\" refX=\"-1\" viewBox=\"0 0 11 11\" class=\"marker cross flowchart-v2\" id=\"mermaid-1_flowchart-v2-crossStart\">\u003Cpath style=\"stroke-width: 2; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 1,1 l 9,9 M 10,1 l -9,9\">\u003C/path>\u003C/marker>\u003Cg class=\"root\">\u003Cg class=\"clusters\">\u003C/g>\u003Cg class=\"edgePaths\">\u003Cpath marker-end=\"url(#mermaid-1_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_A_B_0\" d=\"M456.137,62L456.137,66.167C456.137,70.333,456.137,78.667,456.137,86.333C456.137,94,456.137,101,456.137,104.5L456.137,108\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-1_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_B_C_0\" d=\"M456.137,166L456.137,170.167C456.137,174.333,456.137,182.667,456.137,190.333C456.137,198,456.137,205,456.137,208.5L456.137,212\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-1_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_C_D_0\" d=\"M456.137,270L456.137,274.167C456.137,278.333,456.137,286.667,456.137,294.333C456.137,302,456.137,309,456.137,312.5L456.137,316\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-1_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_D_E_0\" d=\"M456.137,374L456.137,378.167C456.137,382.333,456.137,390.667,456.137,398.333C456.137,406,456.137,413,456.137,416.5L456.137,420\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-1_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_E_F_0\" d=\"M456.137,478L456.137,482.167C456.137,486.333,456.137,494.667,456.137,502.333C456.137,510,456.137,517,456.137,520.5L456.137,524\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-1_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_F_G_0\" d=\"M456.137,582L456.137,586.167C456.137,590.333,456.137,598.667,456.137,606.333C456.137,614,456.137,621,456.137,624.5L456.137,628\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-1_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_G_H_0\" d=\"M456.137,686L456.137,690.167C456.137,694.333,456.137,702.667,456.137,710.333C456.137,718,456.137,725,456.137,728.5L456.137,732\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-1_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_H_I_0\" d=\"M420.355,767.474L357.001,775.395C293.646,783.316,166.936,799.158,103.581,810.579C40.227,822,40.227,829,40.227,832.5L40.227,836\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-1_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_H_J_0\" d=\"M420.355,769.209L376.372,776.841C332.388,784.472,244.421,799.736,200.437,810.868C156.453,822,156.453,829,156.453,832.5L156.453,836\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-1_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_H_K_0\" d=\"M420.355,773.317L396.261,780.264C372.167,787.211,323.978,801.106,299.883,811.553C275.789,822,275.789,829,275.789,832.5L275.789,836\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-1_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_H_L_0\" d=\"M424.693,790L419.84,794.167C414.988,798.333,405.283,806.667,400.431,814.333C395.578,822,395.578,829,395.578,832.5L395.578,836\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-1_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_H_M_0\" d=\"M487.581,790L492.433,794.167C497.286,798.333,506.99,806.667,511.843,814.333C516.695,822,516.695,829,516.695,832.5L516.695,836\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-1_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_H_N_0\" d=\"M491.918,773.167L516.455,780.139C540.992,787.111,590.066,801.056,614.604,811.528C639.141,822,639.141,829,639.141,832.5L639.141,836\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-1_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_H_O_0\" d=\"M491.918,769.1L536.79,776.75C581.661,784.4,671.405,799.7,716.277,810.85C761.148,822,761.148,829,761.148,832.5L761.148,836\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-1_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_H_P_0\" d=\"M491.918,767.362L557.05,775.301C622.182,783.241,752.447,799.121,817.579,810.56C882.711,822,882.711,829,882.711,832.5L882.711,836\">\u003C/path>\u003C/g>\u003Cg class=\"edgeLabels\">\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003C/g>\u003Cg class=\"nodes\">\u003Cg transform=\"translate(456.13671875, 35)\" id=\"flowchart-A-0\" class=\"node default\">\u003Crect height=\"54\" width=\"70.671875\" y=\"-27\" x=\"-35.3359375\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-5.3359375, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"10.671875\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>A\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(456.13671875, 139)\" id=\"flowchart-B-1\" class=\"node default\">\u003Crect height=\"54\" width=\"70.671875\" y=\"-27\" x=\"-35.3359375\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-5.3359375, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"10.671875\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>B\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(456.13671875, 243)\" id=\"flowchart-C-3\" class=\"node default\">\u003Crect height=\"54\" width=\"71.5625\" y=\"-27\" x=\"-35.78125\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-5.78125, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"11.5625\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>C\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(456.13671875, 347)\" id=\"flowchart-D-5\" class=\"node default\">\u003Crect height=\"54\" width=\"71.5625\" y=\"-27\" x=\"-35.78125\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-5.78125, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"11.5625\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>D\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(456.13671875, 451)\" id=\"flowchart-E-7\" class=\"node default\">\u003Crect height=\"54\" width=\"70.671875\" y=\"-27\" x=\"-35.3359375\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-5.3359375, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"10.671875\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>E\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(456.13671875, 555)\" id=\"flowchart-F-9\" class=\"node default\">\u003Crect height=\"54\" width=\"69.78125\" y=\"-27\" x=\"-34.890625\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-4.890625, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"9.78125\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>F\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(456.13671875, 659)\" id=\"flowchart-G-11\" class=\"node default\">\u003Crect height=\"54\" width=\"72.453125\" y=\"-27\" x=\"-36.2265625\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-6.2265625, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"12.453125\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>G\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(456.13671875, 763)\" id=\"flowchart-H-13\" class=\"node default\">\u003Crect height=\"54\" width=\"71.5625\" y=\"-27\" x=\"-35.78125\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-5.78125, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"11.5625\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>H\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(40.2265625, 867)\" id=\"flowchart-I-15\" class=\"node default\">\u003Crect height=\"54\" width=\"64.453125\" y=\"-27\" x=\"-32.2265625\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-2.2265625, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"4.453125\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>I\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(156.453125, 867)\" id=\"flowchart-J-17\" class=\"node default\">\u003Crect height=\"54\" width=\"68\" y=\"-27\" x=\"-34\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-4, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"8\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>J\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(275.7890625, 867)\" id=\"flowchart-K-19\" class=\"node default\">\u003Crect height=\"54\" width=\"70.671875\" y=\"-27\" x=\"-35.3359375\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-5.3359375, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"10.671875\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>K\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(395.578125, 867)\" id=\"flowchart-L-21\" class=\"node default\">\u003Crect height=\"54\" width=\"68.90625\" y=\"-27\" x=\"-34.453125\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-4.453125, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"8.90625\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>L\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(516.6953125, 867)\" id=\"flowchart-M-23\" class=\"node default\">\u003Crect height=\"54\" width=\"73.328125\" y=\"-27\" x=\"-36.6640625\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-6.6640625, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"13.328125\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>M\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(639.140625, 867)\" id=\"flowchart-N-25\" class=\"node default\">\u003Crect height=\"54\" width=\"71.5625\" y=\"-27\" x=\"-35.78125\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-5.78125, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"11.5625\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>N\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(761.1484375, 867)\" id=\"flowchart-O-27\" class=\"node default\">\u003Crect height=\"54\" width=\"72.453125\" y=\"-27\" x=\"-36.2265625\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-6.2265625, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"12.453125\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>O\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(882.7109375, 867)\" id=\"flowchart-P-29\" class=\"node default\">\u003Crect height=\"54\" width=\"70.671875\" y=\"-27\" x=\"-35.3359375\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-5.3359375, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"10.671875\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>P\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003C/g>\u003C/g>\u003C/g>\u003C/svg>\n\u003Csvg aria-roledescription=\"pie\" role=\"graphics-document document\" style=\"max-width: 586.625px;\" viewBox=\"0 0 586.625 450\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" id=\"mermaid-2\">\u003Cstyle>#mermaid-2{font-family:arial,sans-serif;font-size:16px;fill:#333;}@keyframes edge-animation-frame{from{stroke-dashoffset:0;}}@keyframes dash{to{stroke-dashoffset:0;}}#mermaid-2 .edge-animation-slow{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 50s linear infinite;stroke-linecap:round;}#mermaid-2 .edge-animation-fast{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 20s linear infinite;stroke-linecap:round;}#mermaid-2 .error-icon{fill:#552222;}#mermaid-2 .error-text{fill:#552222;stroke:#552222;}#mermaid-2 .edge-thickness-normal{stroke-width:1px;}#mermaid-2 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-2 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-2 .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-2 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-2 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-2 .marker{fill:#333333;stroke:#333333;}#mermaid-2 .marker.cross{stroke:#333333;}#mermaid-2 svg{font-family:arial,sans-serif;font-size:16px;}#mermaid-2 p{margin:0;}#mermaid-2 .pieCircle{stroke:black;stroke-width:2px;opacity:0.7;}#mermaid-2 .pieOuterCircle{stroke:black;stroke-width:2px;fill:none;}#mermaid-2 .pieTitleText{text-anchor:middle;font-size:25px;fill:black;font-family:arial,sans-serif;}#mermaid-2 .slice{font-family:arial,sans-serif;fill:#333;font-size:17px;}#mermaid-2 .legend text{fill:black;font-family:arial,sans-serif;font-size:17px;}#mermaid-2 :root{--mermaid-font-family:arial,sans-serif;}\u003C/style>\u003Cg>\u003C/g>\u003Cg transform=\"translate(225,225)\">\u003Ccircle class=\"pieOuterCircle\" r=\"186\" cy=\"0\" cx=\"0\">\u003C/circle>\u003Cpath class=\"pieCircle\" fill=\"#ECECFF\" d=\"M0,-185A185,185,0,1,1,-108.74,-149.668L0,0Z\">\u003C/path>\u003Cpath class=\"pieCircle\" fill=\"#ffffde\" d=\"M-108.74,-149.668A185,185,0,0,1,-46.008,-179.188L0,0Z\">\u003C/path>\u003Cpath class=\"pieCircle\" fill=\"hsl(80, 100%, 56.2745098039%)\" d=\"M-46.008,-179.188A185,185,0,0,1,0,-185L0,0Z\">\u003C/path>\u003Ctext style=\"text-anchor: middle;\" class=\"slice\" transform=\"translate(42.87610796952391,131.95909163595257)\">90%\u003C/text>\u003Ctext style=\"text-anchor: middle;\" class=\"slice\" transform=\"translate(-59.07687670465376,-125.54475352966024)\">6%\u003C/text>\u003Ctext style=\"text-anchor: middle;\" class=\"slice\" transform=\"translate(-17.389986157047144,-137.6559148073838)\">4%\u003C/text>\u003Ctext class=\"pieTitleText\" y=\"-200\" x=\"0\">What Voldemort doesn't have?\u003C/text>\u003Cg transform=\"translate(216,-33)\" class=\"legend\">\u003Crect style=\"fill: rgb(181, 255, 32); stroke: rgb(181, 255, 32);\" height=\"18\" width=\"18\">\u003C/rect>\u003Ctext y=\"14\" x=\"22\">FRIENDS\u003C/text>\u003C/g>\u003Cg transform=\"translate(216,-11)\" class=\"legend\">\u003Crect style=\"fill: rgb(255, 255, 222); stroke: rgb(255, 255, 222);\" height=\"18\" width=\"18\">\u003C/rect>\u003Ctext y=\"14\" x=\"22\">FAMILY\u003C/text>\u003C/g>\u003Cg transform=\"translate(216,11)\" class=\"legend\">\u003Crect style=\"fill: rgb(236, 236, 255); stroke: rgb(236, 236, 255);\" height=\"18\" width=\"18\">\u003C/rect>\u003Ctext y=\"14\" x=\"22\">NOSE\u003C/text>\u003C/g>\u003C/g>\u003C/svg>\n\u003Csvg aria-roledescription=\"sequence\" role=\"graphics-document document\" viewBox=\"-50 -10 750 571\" style=\"max-width: 750px;\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" id=\"mermaid-3\">\u003Cg>\u003Crect class=\"actor actor-bottom\" ry=\"3\" rx=\"3\" name=\"John\" height=\"65\" width=\"150\" stroke=\"#666\" fill=\"#eaeaea\" y=\"485\" x=\"400\">\u003C/rect>\u003Ctext style=\"text-anchor: middle; font-size: 16px; font-weight: 400; font-family: arial, sans-serif;\" class=\"actor actor-box\" alignment-baseline=\"central\" dominant-baseline=\"central\" y=\"517.5\" x=\"475\">\u003Ctspan dy=\"0\" x=\"475\">John\u003C/tspan>\u003C/text>\u003C/g>\u003Cg>\u003Crect class=\"actor actor-bottom\" ry=\"3\" rx=\"3\" name=\"Bob\" height=\"65\" width=\"150\" stroke=\"#666\" fill=\"#eaeaea\" y=\"485\" x=\"200\">\u003C/rect>\u003Ctext style=\"text-anchor: middle; font-size: 16px; font-weight: 400; font-family: arial, sans-serif;\" class=\"actor actor-box\" alignment-baseline=\"central\" dominant-baseline=\"central\" y=\"517.5\" x=\"275\">\u003Ctspan dy=\"0\" x=\"275\">Bob\u003C/tspan>\u003C/text>\u003C/g>\u003Cg>\u003Crect class=\"actor actor-bottom\" ry=\"3\" rx=\"3\" name=\"Alice\" height=\"65\" width=\"150\" stroke=\"#666\" fill=\"#eaeaea\" y=\"485\" x=\"0\">\u003C/rect>\u003Ctext style=\"text-anchor: middle; font-size: 16px; font-weight: 400; font-family: arial, sans-serif;\" class=\"actor actor-box\" alignment-baseline=\"central\" dominant-baseline=\"central\" y=\"517.5\" x=\"75\">\u003Ctspan dy=\"0\" x=\"75\">Alice\u003C/tspan>\u003C/text>\u003C/g>\u003Cg>\u003Cline name=\"John\" stroke=\"#999\" stroke-width=\"0.5px\" class=\"actor-line 200\" y2=\"485\" x2=\"475\" y1=\"65\" x1=\"475\" id=\"actor2\">\u003C/line>\u003Cg id=\"root-2\">\u003Crect class=\"actor actor-top\" ry=\"3\" rx=\"3\" name=\"John\" height=\"65\" width=\"150\" stroke=\"#666\" fill=\"#eaeaea\" y=\"0\" x=\"400\">\u003C/rect>\u003Ctext style=\"text-anchor: middle; font-size: 16px; font-weight: 400; font-family: arial, sans-serif;\" class=\"actor actor-box\" alignment-baseline=\"central\" dominant-baseline=\"central\" y=\"32.5\" x=\"475\">\u003Ctspan dy=\"0\" x=\"475\">John\u003C/tspan>\u003C/text>\u003C/g>\u003C/g>\u003Cg>\u003Cline name=\"Bob\" stroke=\"#999\" stroke-width=\"0.5px\" class=\"actor-line 200\" y2=\"485\" x2=\"275\" y1=\"65\" x1=\"275\" id=\"actor1\">\u003C/line>\u003Cg id=\"root-1\">\u003Crect class=\"actor actor-top\" ry=\"3\" rx=\"3\" name=\"Bob\" height=\"65\" width=\"150\" stroke=\"#666\" fill=\"#eaeaea\" y=\"0\" x=\"200\">\u003C/rect>\u003Ctext style=\"text-anchor: middle; font-size: 16px; font-weight: 400; font-family: arial, sans-serif;\" class=\"actor actor-box\" alignment-baseline=\"central\" dominant-baseline=\"central\" y=\"32.5\" x=\"275\">\u003Ctspan dy=\"0\" x=\"275\">Bob\u003C/tspan>\u003C/text>\u003C/g>\u003C/g>\u003Cg>\u003Cline name=\"Alice\" stroke=\"#999\" stroke-width=\"0.5px\" class=\"actor-line 200\" y2=\"485\" x2=\"75\" y1=\"65\" x1=\"75\" id=\"actor0\">\u003C/line>\u003Cg id=\"root-0\">\u003Crect class=\"actor actor-top\" ry=\"3\" rx=\"3\" name=\"Alice\" height=\"65\" width=\"150\" stroke=\"#666\" fill=\"#eaeaea\" y=\"0\" x=\"0\">\u003C/rect>\u003Ctext style=\"text-anchor: middle; font-size: 16px; font-weight: 400; font-family: arial, sans-serif;\" class=\"actor actor-box\" alignment-baseline=\"central\" dominant-baseline=\"central\" y=\"32.5\" x=\"75\">\u003Ctspan dy=\"0\" x=\"75\">Alice\u003C/tspan>\u003C/text>\u003C/g>\u003C/g>\u003Cstyle>#mermaid-3{font-family:arial,sans-serif;font-size:16px;fill:#333;}@keyframes edge-animation-frame{from{stroke-dashoffset:0;}}@keyframes dash{to{stroke-dashoffset:0;}}#mermaid-3 .edge-animation-slow{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 50s linear infinite;stroke-linecap:round;}#mermaid-3 .edge-animation-fast{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 20s linear infinite;stroke-linecap:round;}#mermaid-3 .error-icon{fill:#552222;}#mermaid-3 .error-text{fill:#552222;stroke:#552222;}#mermaid-3 .edge-thickness-normal{stroke-width:1px;}#mermaid-3 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-3 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-3 .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-3 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-3 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-3 .marker{fill:#333333;stroke:#333333;}#mermaid-3 .marker.cross{stroke:#333333;}#mermaid-3 svg{font-family:arial,sans-serif;font-size:16px;}#mermaid-3 p{margin:0;}#mermaid-3 .actor{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;}#mermaid-3 text.actor>tspan{fill:black;stroke:none;}#mermaid-3 .actor-line{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);}#mermaid-3 .innerArc{stroke-width:1.5;stroke-dasharray:none;}#mermaid-3 .messageLine0{stroke-width:1.5;stroke-dasharray:none;stroke:#333;}#mermaid-3 .messageLine1{stroke-width:1.5;stroke-dasharray:2,2;stroke:#333;}#mermaid-3 #arrowhead path{fill:#333;stroke:#333;}#mermaid-3 .sequenceNumber{fill:white;}#mermaid-3 #sequencenumber{fill:#333;}#mermaid-3 #crosshead path{fill:#333;stroke:#333;}#mermaid-3 .messageText{fill:#333;stroke:none;}#mermaid-3 .labelBox{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;}#mermaid-3 .labelText,#mermaid-3 .labelText>tspan{fill:black;stroke:none;}#mermaid-3 .loopText,#mermaid-3 .loopText>tspan{fill:black;stroke:none;}#mermaid-3 .loopLine{stroke-width:2px;stroke-dasharray:2,2;stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);}#mermaid-3 .note{stroke:#aaaa33;fill:#fff5ad;}#mermaid-3 .noteText,#mermaid-3 .noteText>tspan{fill:black;stroke:none;}#mermaid-3 .activation0{fill:#f4f4f4;stroke:#666;}#mermaid-3 .activation1{fill:#f4f4f4;stroke:#666;}#mermaid-3 .activation2{fill:#f4f4f4;stroke:#666;}#mermaid-3 .actorPopupMenu{position:absolute;}#mermaid-3 .actorPopupMenuPanel{position:absolute;fill:#ECECFF;box-shadow:0px 8px 16px 0px rgba(0,0,0,0.2);filter:drop-shadow(3px 5px 2px rgb(0 0 0 / 0.4));}#mermaid-3 .actor-man line{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;}#mermaid-3 .actor-man circle,#mermaid-3 line{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;stroke-width:2px;}#mermaid-3 :root{--mermaid-font-family:arial,sans-serif;}\u003C/style>\u003Cg>\u003C/g>\u003Cdefs>\u003Csymbol height=\"24\" width=\"24\" id=\"computer\">\u003Cpath d=\"M2 2v13h20v-13h-20zm18 11h-16v-9h16v9zm-10.228 6l.466-1h3.524l.467 1h-4.457zm14.228 3h-24l2-6h2.104l-1.33 4h18.45l-1.297-4h2.073l2 6zm-5-10h-14v-7h14v7z\" transform=\"scale(.5)\">\u003C/path>\u003C/symbol>\u003C/defs>\u003Cdefs>\u003Csymbol clip-rule=\"evenodd\" fill-rule=\"evenodd\" id=\"database\">\u003Cpath d=\"M12.258.001l.256.004.255.005.253.008.251.01.249.012.247.015.246.016.242.019.241.02.239.023.236.024.233.027.231.028.229.031.225.032.223.034.22.036.217.038.214.04.211.041.208.043.205.045.201.046.198.048.194.05.191.051.187.053.183.054.18.056.175.057.172.059.168.06.163.061.16.063.155.064.15.066.074.033.073.033.071.034.07.034.069.035.068.035.067.035.066.035.064.036.064.036.062.036.06.036.06.037.058.037.058.037.055.038.055.038.053.038.052.038.051.039.05.039.048.039.047.039.045.04.044.04.043.04.041.04.04.041.039.041.037.041.036.041.034.041.033.042.032.042.03.042.029.042.027.042.026.043.024.043.023.043.021.043.02.043.018.044.017.043.015.044.013.044.012.044.011.045.009.044.007.045.006.045.004.045.002.045.001.045v17l-.001.045-.002.045-.004.045-.006.045-.007.045-.009.044-.011.045-.012.044-.013.044-.015.044-.017.043-.018.044-.02.043-.021.043-.023.043-.024.043-.026.043-.027.042-.029.042-.03.042-.032.042-.033.042-.034.041-.036.041-.037.041-.039.041-.04.041-.041.04-.043.04-.044.04-.045.04-.047.039-.048.039-.05.039-.051.039-.052.038-.053.038-.055.038-.055.038-.058.037-.058.037-.06.037-.06.036-.062.036-.064.036-.064.036-.066.035-.067.035-.068.035-.069.035-.07.034-.071.034-.073.033-.074.033-.15.066-.155.064-.16.063-.163.061-.168.06-.172.059-.175.057-.18.056-.183.054-.187.053-.191.051-.194.05-.198.048-.201.046-.205.045-.208.043-.211.041-.214.04-.217.038-.22.036-.223.034-.225.032-.229.031-.231.028-.233.027-.236.024-.239.023-.241.02-.242.019-.246.016-.247.015-.249.012-.251.01-.253.008-.255.005-.256.004-.258.001-.258-.001-.256-.004-.255-.005-.253-.008-.251-.01-.249-.012-.247-.015-.245-.016-.243-.019-.241-.02-.238-.023-.236-.024-.234-.027-.231-.028-.228-.031-.226-.032-.223-.034-.22-.036-.217-.038-.214-.04-.211-.041-.208-.043-.204-.045-.201-.046-.198-.048-.195-.05-.19-.051-.187-.053-.184-.054-.179-.056-.176-.057-.172-.059-.167-.06-.164-.061-.159-.063-.155-.064-.151-.066-.074-.033-.072-.033-.072-.034-.07-.034-.069-.035-.068-.035-.067-.035-.066-.035-.064-.036-.063-.036-.062-.036-.061-.036-.06-.037-.058-.037-.057-.037-.056-.038-.055-.038-.053-.038-.052-.038-.051-.039-.049-.039-.049-.039-.046-.039-.046-.04-.044-.04-.043-.04-.041-.04-.04-.041-.039-.041-.037-.041-.036-.041-.034-.041-.033-.042-.032-.042-.03-.042-.029-.042-.027-.042-.026-.043-.024-.043-.023-.043-.021-.043-.02-.043-.018-.044-.017-.043-.015-.044-.013-.044-.012-.044-.011-.045-.009-.044-.007-.045-.006-.045-.004-.045-.002-.045-.001-.045v-17l.001-.045.002-.045.004-.045.006-.045.007-.045.009-.044.011-.045.012-.044.013-.044.015-.044.017-.043.018-.044.02-.043.021-.043.023-.043.024-.043.026-.043.027-.042.029-.042.03-.042.032-.042.033-.042.034-.041.036-.041.037-.041.039-.041.04-.041.041-.04.043-.04.044-.04.046-.04.046-.039.049-.039.049-.039.051-.039.052-.038.053-.038.055-.038.056-.038.057-.037.058-.037.06-.037.061-.036.062-.036.063-.036.064-.036.066-.035.067-.035.068-.035.069-.035.07-.034.072-.034.072-.033.074-.033.151-.066.155-.064.159-.063.164-.061.167-.06.172-.059.176-.057.179-.056.184-.054.187-.053.19-.051.195-.05.198-.048.201-.046.204-.045.208-.043.211-.041.214-.04.217-.038.22-.036.223-.034.226-.032.228-.031.231-.028.234-.027.236-.024.238-.023.241-.02.243-.019.245-.016.247-.015.249-.012.251-.01.253-.008.255-.005.256-.004.258-.001.258.001zm-9.258 20.499v.01l.001.021.003.021.004.022.005.021.006.022.007.022.009.023.01.022.011.023.012.023.013.023.015.023.016.024.017.023.018.024.019.024.021.024.022.025.023.024.024.025.052.049.056.05.061.051.066.051.07.051.075.051.079.052.084.052.088.052.092.052.097.052.102.051.105.052.11.052.114.051.119.051.123.051.127.05.131.05.135.05.139.048.144.049.147.047.152.047.155.047.16.045.163.045.167.043.171.043.176.041.178.041.183.039.187.039.19.037.194.035.197.035.202.033.204.031.209.03.212.029.216.027.219.025.222.024.226.021.23.02.233.018.236.016.24.015.243.012.246.01.249.008.253.005.256.004.259.001.26-.001.257-.004.254-.005.25-.008.247-.011.244-.012.241-.014.237-.016.233-.018.231-.021.226-.021.224-.024.22-.026.216-.027.212-.028.21-.031.205-.031.202-.034.198-.034.194-.036.191-.037.187-.039.183-.04.179-.04.175-.042.172-.043.168-.044.163-.045.16-.046.155-.046.152-.047.148-.048.143-.049.139-.049.136-.05.131-.05.126-.05.123-.051.118-.052.114-.051.11-.052.106-.052.101-.052.096-.052.092-.052.088-.053.083-.051.079-.052.074-.052.07-.051.065-.051.06-.051.056-.05.051-.05.023-.024.023-.025.021-.024.02-.024.019-.024.018-.024.017-.024.015-.023.014-.024.013-.023.012-.023.01-.023.01-.022.008-.022.006-.022.006-.022.004-.022.004-.021.001-.021.001-.021v-4.127l-.077.055-.08.053-.083.054-.085.053-.087.052-.09.052-.093.051-.095.05-.097.05-.1.049-.102.049-.105.048-.106.047-.109.047-.111.046-.114.045-.115.045-.118.044-.12.043-.122.042-.124.042-.126.041-.128.04-.13.04-.132.038-.134.038-.135.037-.138.037-.139.035-.142.035-.143.034-.144.033-.147.032-.148.031-.15.03-.151.03-.153.029-.154.027-.156.027-.158.026-.159.025-.161.024-.162.023-.163.022-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.011-.178.01-.179.008-.179.008-.181.006-.182.005-.182.004-.184.003-.184.002h-.37l-.184-.002-.184-.003-.182-.004-.182-.005-.181-.006-.179-.008-.179-.008-.178-.01-.176-.011-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.022-.162-.023-.161-.024-.159-.025-.157-.026-.156-.027-.155-.027-.153-.029-.151-.03-.15-.03-.148-.031-.146-.032-.145-.033-.143-.034-.141-.035-.14-.035-.137-.037-.136-.037-.134-.038-.132-.038-.13-.04-.128-.04-.126-.041-.124-.042-.122-.042-.12-.044-.117-.043-.116-.045-.113-.045-.112-.046-.109-.047-.106-.047-.105-.048-.102-.049-.1-.049-.097-.05-.095-.05-.093-.052-.09-.051-.087-.052-.085-.053-.083-.054-.08-.054-.077-.054v4.127zm0-5.654v.011l.001.021.003.021.004.021.005.022.006.022.007.022.009.022.01.022.011.023.012.023.013.023.015.024.016.023.017.024.018.024.019.024.021.024.022.024.023.025.024.024.052.05.056.05.061.05.066.051.07.051.075.052.079.051.084.052.088.052.092.052.097.052.102.052.105.052.11.051.114.051.119.052.123.05.127.051.131.05.135.049.139.049.144.048.147.048.152.047.155.046.16.045.163.045.167.044.171.042.176.042.178.04.183.04.187.038.19.037.194.036.197.034.202.033.204.032.209.03.212.028.216.027.219.025.222.024.226.022.23.02.233.018.236.016.24.014.243.012.246.01.249.008.253.006.256.003.259.001.26-.001.257-.003.254-.006.25-.008.247-.01.244-.012.241-.015.237-.016.233-.018.231-.02.226-.022.224-.024.22-.025.216-.027.212-.029.21-.03.205-.032.202-.033.198-.035.194-.036.191-.037.187-.039.183-.039.179-.041.175-.042.172-.043.168-.044.163-.045.16-.045.155-.047.152-.047.148-.048.143-.048.139-.05.136-.049.131-.05.126-.051.123-.051.118-.051.114-.052.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.051.07-.052.065-.051.06-.05.056-.051.051-.049.023-.025.023-.024.021-.025.02-.024.019-.024.018-.024.017-.024.015-.023.014-.023.013-.024.012-.022.01-.023.01-.023.008-.022.006-.022.006-.022.004-.021.004-.022.001-.021.001-.021v-4.139l-.077.054-.08.054-.083.054-.085.052-.087.053-.09.051-.093.051-.095.051-.097.05-.1.049-.102.049-.105.048-.106.047-.109.047-.111.046-.114.045-.115.044-.118.044-.12.044-.122.042-.124.042-.126.041-.128.04-.13.039-.132.039-.134.038-.135.037-.138.036-.139.036-.142.035-.143.033-.144.033-.147.033-.148.031-.15.03-.151.03-.153.028-.154.028-.156.027-.158.026-.159.025-.161.024-.162.023-.163.022-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.011-.178.009-.179.009-.179.007-.181.007-.182.005-.182.004-.184.003-.184.002h-.37l-.184-.002-.184-.003-.182-.004-.182-.005-.181-.007-.179-.007-.179-.009-.178-.009-.176-.011-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.022-.162-.023-.161-.024-.159-.025-.157-.026-.156-.027-.155-.028-.153-.028-.151-.03-.15-.03-.148-.031-.146-.033-.145-.033-.143-.033-.141-.035-.14-.036-.137-.036-.136-.037-.134-.038-.132-.039-.13-.039-.128-.04-.126-.041-.124-.042-.122-.043-.12-.043-.117-.044-.116-.044-.113-.046-.112-.046-.109-.046-.106-.047-.105-.048-.102-.049-.1-.049-.097-.05-.095-.051-.093-.051-.09-.051-.087-.053-.085-.052-.083-.054-.08-.054-.077-.054v4.139zm0-5.666v.011l.001.02.003.022.004.021.005.022.006.021.007.022.009.023.01.022.011.023.012.023.013.023.015.023.016.024.017.024.018.023.019.024.021.025.022.024.023.024.024.025.052.05.056.05.061.05.066.051.07.051.075.052.079.051.084.052.088.052.092.052.097.052.102.052.105.051.11.052.114.051.119.051.123.051.127.05.131.05.135.05.139.049.144.048.147.048.152.047.155.046.16.045.163.045.167.043.171.043.176.042.178.04.183.04.187.038.19.037.194.036.197.034.202.033.204.032.209.03.212.028.216.027.219.025.222.024.226.021.23.02.233.018.236.017.24.014.243.012.246.01.249.008.253.006.256.003.259.001.26-.001.257-.003.254-.006.25-.008.247-.01.244-.013.241-.014.237-.016.233-.018.231-.02.226-.022.224-.024.22-.025.216-.027.212-.029.21-.03.205-.032.202-.033.198-.035.194-.036.191-.037.187-.039.183-.039.179-.041.175-.042.172-.043.168-.044.163-.045.16-.045.155-.047.152-.047.148-.048.143-.049.139-.049.136-.049.131-.051.126-.05.123-.051.118-.052.114-.051.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.052.07-.051.065-.051.06-.051.056-.05.051-.049.023-.025.023-.025.021-.024.02-.024.019-.024.018-.024.017-.024.015-.023.014-.024.013-.023.012-.023.01-.022.01-.023.008-.022.006-.022.006-.022.004-.022.004-.021.001-.021.001-.021v-4.153l-.077.054-.08.054-.083.053-.085.053-.087.053-.09.051-.093.051-.095.051-.097.05-.1.049-.102.048-.105.048-.106.048-.109.046-.111.046-.114.046-.115.044-.118.044-.12.043-.122.043-.124.042-.126.041-.128.04-.13.039-.132.039-.134.038-.135.037-.138.036-.139.036-.142.034-.143.034-.144.033-.147.032-.148.032-.15.03-.151.03-.153.028-.154.028-.156.027-.158.026-.159.024-.161.024-.162.023-.163.023-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.01-.178.01-.179.009-.179.007-.181.006-.182.006-.182.004-.184.003-.184.001-.185.001-.185-.001-.184-.001-.184-.003-.182-.004-.182-.006-.181-.006-.179-.007-.179-.009-.178-.01-.176-.01-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.023-.162-.023-.161-.024-.159-.024-.157-.026-.156-.027-.155-.028-.153-.028-.151-.03-.15-.03-.148-.032-.146-.032-.145-.033-.143-.034-.141-.034-.14-.036-.137-.036-.136-.037-.134-.038-.132-.039-.13-.039-.128-.041-.126-.041-.124-.041-.122-.043-.12-.043-.117-.044-.116-.044-.113-.046-.112-.046-.109-.046-.106-.048-.105-.048-.102-.048-.1-.05-.097-.049-.095-.051-.093-.051-.09-.052-.087-.052-.085-.053-.083-.053-.08-.054-.077-.054v4.153zm8.74-8.179l-.257.004-.254.005-.25.008-.247.011-.244.012-.241.014-.237.016-.233.018-.231.021-.226.022-.224.023-.22.026-.216.027-.212.028-.21.031-.205.032-.202.033-.198.034-.194.036-.191.038-.187.038-.183.04-.179.041-.175.042-.172.043-.168.043-.163.045-.16.046-.155.046-.152.048-.148.048-.143.048-.139.049-.136.05-.131.05-.126.051-.123.051-.118.051-.114.052-.11.052-.106.052-.101.052-.096.052-.092.052-.088.052-.083.052-.079.052-.074.051-.07.052-.065.051-.06.05-.056.05-.051.05-.023.025-.023.024-.021.024-.02.025-.019.024-.018.024-.017.023-.015.024-.014.023-.013.023-.012.023-.01.023-.01.022-.008.022-.006.023-.006.021-.004.022-.004.021-.001.021-.001.021.001.021.001.021.004.021.004.022.006.021.006.023.008.022.01.022.01.023.012.023.013.023.014.023.015.024.017.023.018.024.019.024.02.025.021.024.023.024.023.025.051.05.056.05.06.05.065.051.07.052.074.051.079.052.083.052.088.052.092.052.096.052.101.052.106.052.11.052.114.052.118.051.123.051.126.051.131.05.136.05.139.049.143.048.148.048.152.048.155.046.16.046.163.045.168.043.172.043.175.042.179.041.183.04.187.038.191.038.194.036.198.034.202.033.205.032.21.031.212.028.216.027.22.026.224.023.226.022.231.021.233.018.237.016.241.014.244.012.247.011.25.008.254.005.257.004.26.001.26-.001.257-.004.254-.005.25-.008.247-.011.244-.012.241-.014.237-.016.233-.018.231-.021.226-.022.224-.023.22-.026.216-.027.212-.028.21-.031.205-.032.202-.033.198-.034.194-.036.191-.038.187-.038.183-.04.179-.041.175-.042.172-.043.168-.043.163-.045.16-.046.155-.046.152-.048.148-.048.143-.048.139-.049.136-.05.131-.05.126-.051.123-.051.118-.051.114-.052.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.051.07-.052.065-.051.06-.05.056-.05.051-.05.023-.025.023-.024.021-.024.02-.025.019-.024.018-.024.017-.023.015-.024.014-.023.013-.023.012-.023.01-.023.01-.022.008-.022.006-.023.006-.021.004-.022.004-.021.001-.021.001-.021-.001-.021-.001-.021-.004-.021-.004-.022-.006-.021-.006-.023-.008-.022-.01-.022-.01-.023-.012-.023-.013-.023-.014-.023-.015-.024-.017-.023-.018-.024-.019-.024-.02-.025-.021-.024-.023-.024-.023-.025-.051-.05-.056-.05-.06-.05-.065-.051-.07-.052-.074-.051-.079-.052-.083-.052-.088-.052-.092-.052-.096-.052-.101-.052-.106-.052-.11-.052-.114-.052-.118-.051-.123-.051-.126-.051-.131-.05-.136-.05-.139-.049-.143-.048-.148-.048-.152-.048-.155-.046-.16-.046-.163-.045-.168-.043-.172-.043-.175-.042-.179-.041-.183-.04-.187-.038-.191-.038-.194-.036-.198-.034-.202-.033-.205-.032-.21-.031-.212-.028-.216-.027-.22-.026-.224-.023-.226-.022-.231-.021-.233-.018-.237-.016-.241-.014-.244-.012-.247-.011-.25-.008-.254-.005-.257-.004-.26-.001-.26.001z\" transform=\"scale(.5)\">\u003C/path>\u003C/symbol>\u003C/defs>\u003Cdefs>\u003Csymbol height=\"24\" width=\"24\" id=\"clock\">\u003Cpath d=\"M12 2c5.514 0 10 4.486 10 10s-4.486 10-10 10-10-4.486-10-10 4.486-10 10-10zm0-2c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm5.848 12.459c.202.038.202.333.001.372-1.907.361-6.045 1.111-6.547 1.111-.719 0-1.301-.582-1.301-1.301 0-.512.77-5.447 1.125-7.445.034-.192.312-.181.343.014l.985 6.238 5.394 1.011z\" transform=\"scale(.5)\">\u003C/path>\u003C/symbol>\u003C/defs>\u003Cdefs>\u003Cmarker orient=\"auto-start-reverse\" markerHeight=\"12\" markerWidth=\"12\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"7.9\" id=\"arrowhead\">\u003Cpath d=\"M -1 0 L 10 5 L 0 10 z\">\u003C/path>\u003C/marker>\u003C/defs>\u003Cdefs>\u003Cmarker refY=\"4.5\" refX=\"4\" orient=\"auto\" markerHeight=\"8\" markerWidth=\"15\" id=\"crosshead\">\u003Cpath style=\"stroke-dasharray: 0, 0;\" d=\"M 1,2 L 6,7 M 6,2 L 1,7\" stroke-width=\"1pt\" stroke=\"#000000\" fill=\"none\">\u003C/path>\u003C/marker>\u003C/defs>\u003Cdefs>\u003Cmarker orient=\"auto\" markerHeight=\"28\" markerWidth=\"20\" refY=\"7\" refX=\"15.5\" id=\"filled-head\">\u003Cpath d=\"M 18,7 L9,13 L14,7 L9,1 Z\">\u003C/path>\u003C/marker>\u003C/defs>\u003Cdefs>\u003Cmarker orient=\"auto\" markerHeight=\"40\" markerWidth=\"60\" refY=\"15\" refX=\"15\" id=\"sequencenumber\">\u003Ccircle r=\"6\" cy=\"15\" cx=\"15\">\u003C/circle>\u003C/marker>\u003C/defs>\u003Cg>\u003Cline class=\"loopLine\" y2=\"119\" x2=\"582\" y1=\"119\" x1=\"370\">\u003C/line>\u003Cline class=\"loopLine\" y2=\"268\" x2=\"582\" y1=\"119\" x1=\"582\">\u003C/line>\u003Cline class=\"loopLine\" y2=\"268\" x2=\"582\" y1=\"268\" x1=\"370\">\u003C/line>\u003Cline class=\"loopLine\" y2=\"268\" x2=\"370\" y1=\"119\" x1=\"370\">\u003C/line>\u003Cpolygon class=\"labelBox\" points=\"370,119 420,119 420,132 411.6,139 370,139\">\u003C/polygon>\u003Ctext style=\"font-family: arial, sans-serif; font-size: 16px; font-weight: 400;\" class=\"labelText\" alignment-baseline=\"middle\" dominant-baseline=\"middle\" text-anchor=\"middle\" y=\"132\" x=\"395\">loop\u003C/text>\u003Ctext style=\"font-family: arial, sans-serif; font-size: 16px; font-weight: 400;\" class=\"loopText\" text-anchor=\"middle\" y=\"137\" x=\"501\">\u003Ctspan x=\"501\">[Healthcheck]\u003C/tspan>\u003C/text>\u003C/g>\u003Cg>\u003Crect class=\"note\" height=\"55\" width=\"150\" stroke=\"#666\" fill=\"#EDF2AE\" y=\"278\" x=\"500\">\u003C/rect>\u003Ctext style=\"font-family: arial, sans-serif; font-size: 16px; font-weight: 400;\" dy=\"1em\" class=\"noteText\" alignment-baseline=\"middle\" dominant-baseline=\"middle\" text-anchor=\"middle\" y=\"283\" x=\"575\">\u003Ctspan x=\"575\">Rational thoughts \u003C/tspan>\u003C/text>\u003Ctext style=\"font-family: arial, sans-serif; font-size: 16px; font-weight: 400;\" dy=\"1em\" class=\"noteText\" alignment-baseline=\"middle\" dominant-baseline=\"middle\" text-anchor=\"middle\" y=\"300\" x=\"575\">\u003Ctspan x=\"575\">prevail!\u003C/tspan>\u003C/text>\u003C/g>\u003Ctext style=\"font-family: arial, sans-serif; font-size: 16px; font-weight: 400;\" dy=\"1em\" class=\"messageText\" alignment-baseline=\"middle\" dominant-baseline=\"middle\" text-anchor=\"middle\" y=\"80\" x=\"274\">Hello John, how are you?\u003C/text>\u003Cline style=\"fill: none;\" marker-end=\"url(#arrowhead)\" stroke=\"none\" stroke-width=\"2\" class=\"messageLine0\" y2=\"109\" x2=\"471\" y1=\"109\" x1=\"76\">\u003C/line>\u003Ctext style=\"font-family: arial, sans-serif; font-size: 16px; font-weight: 400;\" dy=\"1em\" class=\"messageText\" alignment-baseline=\"middle\" dominant-baseline=\"middle\" text-anchor=\"middle\" y=\"169\" x=\"476\">Fight against hypochondria\u003C/text>\u003Cpath style=\"fill: none;\" marker-end=\"url(#arrowhead)\" stroke=\"none\" stroke-width=\"2\" class=\"messageLine0\" d=\"M 476,198 C 536,188 536,228 476,218\">\u003C/path>\u003Ctext style=\"font-family: arial, sans-serif; font-size: 16px; font-weight: 400;\" dy=\"1em\" class=\"messageText\" alignment-baseline=\"middle\" dominant-baseline=\"middle\" text-anchor=\"middle\" y=\"348\" x=\"277\">Great!\u003C/text>\u003Cline style=\"stroke-dasharray: 3, 3; fill: none;\" marker-end=\"url(#arrowhead)\" stroke=\"none\" stroke-width=\"2\" class=\"messageLine1\" y2=\"377\" x2=\"79\" y1=\"377\" x1=\"474\">\u003C/line>\u003Ctext style=\"font-family: arial, sans-serif; font-size: 16px; font-weight: 400;\" dy=\"1em\" class=\"messageText\" alignment-baseline=\"middle\" dominant-baseline=\"middle\" text-anchor=\"middle\" y=\"392\" x=\"377\">How about you?\u003C/text>\u003Cline style=\"fill: none;\" marker-end=\"url(#arrowhead)\" stroke=\"none\" stroke-width=\"2\" class=\"messageLine0\" y2=\"421\" x2=\"279\" y1=\"421\" x1=\"474\">\u003C/line>\u003Ctext style=\"font-family: arial, sans-serif; font-size: 16px; font-weight: 400;\" dy=\"1em\" class=\"messageText\" alignment-baseline=\"middle\" dominant-baseline=\"middle\" text-anchor=\"middle\" y=\"436\" x=\"374\">Jolly good!\u003C/text>\u003Cline style=\"stroke-dasharray: 3, 3; fill: none;\" marker-end=\"url(#arrowhead)\" stroke=\"none\" stroke-width=\"2\" class=\"messageLine1\" y2=\"465\" x2=\"471\" y1=\"465\" x1=\"276\">\u003C/line>\u003C/svg>\n\u003Csvg aria-roledescription=\"flowchart-v2\" role=\"graphics-document document\" viewBox=\"0 0 1738.671875 670.875\" style=\"max-width: 1738.671875px;\" class=\"flowchart\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" id=\"mermaid-4\">\u003Cstyle>#mermaid-4{font-family:arial,sans-serif;font-size:16px;fill:#333;}@keyframes edge-animation-frame{from{stroke-dashoffset:0;}}@keyframes dash{to{stroke-dashoffset:0;}}#mermaid-4 .edge-animation-slow{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 50s linear infinite;stroke-linecap:round;}#mermaid-4 .edge-animation-fast{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 20s linear infinite;stroke-linecap:round;}#mermaid-4 .error-icon{fill:#552222;}#mermaid-4 .error-text{fill:#552222;stroke:#552222;}#mermaid-4 .edge-thickness-normal{stroke-width:1px;}#mermaid-4 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-4 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-4 .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-4 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-4 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-4 .marker{fill:#333333;stroke:#333333;}#mermaid-4 .marker.cross{stroke:#333333;}#mermaid-4 svg{font-family:arial,sans-serif;font-size:16px;}#mermaid-4 p{margin:0;}#mermaid-4 .label{font-family:arial,sans-serif;color:#333;}#mermaid-4 .cluster-label text{fill:#333;}#mermaid-4 .cluster-label span{color:#333;}#mermaid-4 .cluster-label span p{background-color:transparent;}#mermaid-4 .label text,#mermaid-4 span{fill:#333;color:#333;}#mermaid-4 .node rect,#mermaid-4 .node circle,#mermaid-4 .node ellipse,#mermaid-4 .node polygon,#mermaid-4 .node path{fill:#ECECFF;stroke:#9370DB;stroke-width:1px;}#mermaid-4 .rough-node .label text,#mermaid-4 .node .label text,#mermaid-4 .image-shape .label,#mermaid-4 .icon-shape .label{text-anchor:middle;}#mermaid-4 .node .katex path{fill:#000;stroke:#000;stroke-width:1px;}#mermaid-4 .rough-node .label,#mermaid-4 .node .label,#mermaid-4 .image-shape .label,#mermaid-4 .icon-shape .label{text-align:center;}#mermaid-4 .node.clickable{cursor:pointer;}#mermaid-4 .root .anchor path{fill:#333333!important;stroke-width:0;stroke:#333333;}#mermaid-4 .arrowheadPath{fill:#333333;}#mermaid-4 .edgePath .path{stroke:#333333;stroke-width:2.0px;}#mermaid-4 .flowchart-link{stroke:#333333;fill:none;}#mermaid-4 .edgeLabel{background-color:rgba(232,232,232, 0.8);text-align:center;}#mermaid-4 .edgeLabel p{background-color:rgba(232,232,232, 0.8);}#mermaid-4 .edgeLabel rect{opacity:0.5;background-color:rgba(232,232,232, 0.8);fill:rgba(232,232,232, 0.8);}#mermaid-4 .labelBkg{background-color:rgba(232, 232, 232, 0.5);}#mermaid-4 .cluster rect{fill:#ffffde;stroke:#aaaa33;stroke-width:1px;}#mermaid-4 .cluster text{fill:#333;}#mermaid-4 .cluster span{color:#333;}#mermaid-4 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:arial,sans-serif;font-size:12px;background:hsl(80, 100%, 96.2745098039%);border:1px solid #aaaa33;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-4 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#333;}#mermaid-4 rect.text{fill:none;stroke-width:0;}#mermaid-4 .icon-shape,#mermaid-4 .image-shape{background-color:rgba(232,232,232, 0.8);text-align:center;}#mermaid-4 .icon-shape p,#mermaid-4 .image-shape p{background-color:rgba(232,232,232, 0.8);padding:2px;}#mermaid-4 .icon-shape rect,#mermaid-4 .image-shape rect{opacity:0.5;background-color:rgba(232,232,232, 0.8);fill:rgba(232,232,232, 0.8);}#mermaid-4 .label-icon{display:inline-block;height:1em;overflow:visible;vertical-align:-0.125em;}#mermaid-4 .node .label-icon path{fill:currentColor;stroke:revert;stroke-width:revert;}#mermaid-4 :root{--mermaid-font-family:arial,sans-serif;}#mermaid-4 .green>*{fill:#9f6!important;stroke:#333!important;stroke-width:2px!important;}#mermaid-4 .green span{fill:#9f6!important;stroke:#333!important;stroke-width:2px!important;}#mermaid-4 .orange>*{fill:#f96!important;stroke:#333!important;stroke-width:4px!important;}#mermaid-4 .orange span{fill:#f96!important;stroke:#333!important;stroke-width:4px!important;}\u003C/style>\u003Cg>\u003Cmarker orient=\"auto\" markerHeight=\"8\" markerWidth=\"8\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"5\" viewBox=\"0 0 10 10\" class=\"marker flowchart-v2\" id=\"mermaid-4_flowchart-v2-pointEnd\">\u003Cpath style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 0 0 L 10 5 L 0 10 z\">\u003C/path>\u003C/marker>\u003Cmarker orient=\"auto\" markerHeight=\"8\" markerWidth=\"8\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"4.5\" viewBox=\"0 0 10 10\" class=\"marker flowchart-v2\" id=\"mermaid-4_flowchart-v2-pointStart\">\u003Cpath style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 0 5 L 10 10 L 10 0 z\">\u003C/path>\u003C/marker>\u003Cmarker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"11\" viewBox=\"0 0 10 10\" class=\"marker flowchart-v2\" id=\"mermaid-4_flowchart-v2-circleEnd\">\u003Ccircle style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" r=\"5\" cy=\"5\" cx=\"5\">\u003C/circle>\u003C/marker>\u003Cmarker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"-1\" viewBox=\"0 0 10 10\" class=\"marker flowchart-v2\" id=\"mermaid-4_flowchart-v2-circleStart\">\u003Ccircle style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" r=\"5\" cy=\"5\" cx=\"5\">\u003C/circle>\u003C/marker>\u003Cmarker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5.2\" refX=\"12\" viewBox=\"0 0 11 11\" class=\"marker cross flowchart-v2\" id=\"mermaid-4_flowchart-v2-crossEnd\">\u003Cpath style=\"stroke-width: 2; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 1,1 l 9,9 M 10,1 l -9,9\">\u003C/path>\u003C/marker>\u003Cmarker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5.2\" refX=\"-1\" viewBox=\"0 0 11 11\" class=\"marker cross flowchart-v2\" id=\"mermaid-4_flowchart-v2-crossStart\">\u003Cpath style=\"stroke-width: 2; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 1,1 l 9,9 M 10,1 l -9,9\">\u003C/path>\u003C/marker>\u003Cg class=\"root\">\u003Cg class=\"clusters\">\u003C/g>\u003Cg class=\"edgePaths\">\u003Cpath marker-end=\"url(#mermaid-4_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_sq_ci_0\" d=\"M1019.117,255.375L1019.117,291.771C1019.117,328.167,1019.117,400.958,1019.117,445.87C1019.117,490.781,1019.117,507.813,1019.117,516.328L1019.117,524.844\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-4_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_e_od3_0\" d=\"M1310.282,327.289L1299.893,351.7C1289.504,376.11,1268.727,424.93,1258.416,459.35C1248.105,493.771,1248.262,513.792,1248.34,523.802L1248.418,533.813\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-4_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_e_f_0\" d=\"M1394.476,327.289L1404.865,351.7C1415.254,376.11,1436.031,424.93,1446.499,462.1C1456.967,499.271,1457.125,524.792,1457.205,537.552L1457.284,550.313\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-4_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_cyr_cyr2_0\" d=\"M1648.609,255.375L1648.609,291.771C1648.609,328.167,1648.609,400.958,1648.609,440.854C1648.609,480.75,1648.609,487.75,1648.609,491.25L1648.609,494.75\">\u003C/path>\u003C/g>\u003Cg class=\"edgeLabels\">\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003C/g>\u003Cg class=\"nodes\">\u003Cg transform=\"translate(0, 0)\" class=\"root\">\u003Cg class=\"clusters\">\u003Cg data-look=\"classic\" id=\"A\" class=\"cluster\">\u003Crect height=\"440.75\" width=\"881.296875\" y=\"8\" x=\"8\" style=\"\">\u003C/rect>\u003Cg transform=\"translate(443.3125, 8)\" class=\"cluster-label\">\u003CforeignObject height=\"24\" width=\"10.671875\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>A\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003C/g>\u003Cg class=\"edgePaths\">\u003Cpath marker-end=\"url(#mermaid-4_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_od_ro_0\" d=\"M236.516,66.75L273.93,66.667C311.344,66.583,386.172,66.417,445.922,68.268C505.672,70.119,550.343,73.988,572.679,75.922L595.015,77.857\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-4_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-dotted edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_di_ro_0\" d=\"M291.632,242.882L319.86,234.485C348.088,226.088,404.544,209.294,464.857,188.348C525.17,167.402,589.34,142.305,621.426,129.756L653.511,117.207\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-4_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-thick edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_di_ro2_0\" d=\"M300.089,298.161L326.908,303.592C353.726,309.024,407.363,319.887,461.26,325.4C515.156,330.913,569.313,331.075,596.391,331.157L623.469,331.238\">\u003C/path>\u003C/g>\u003Cg class=\"edgeLabels\">\u003Cg transform=\"translate(461, 66.25)\" class=\"edgeLabel\">\u003Cg transform=\"translate(-100, -24)\" class=\"label\">\u003CforeignObject height=\"48\" width=\"200\">\u003Cdiv style=\"display: table; white-space: break-spaces; line-height: 1.5; max-width: 200px; text-align: center; width: 200px;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003Cp>Two line&#x3C;br/>edge comment\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003C/g>\u003Cg class=\"nodes\">\u003Cg transform=\"translate(184.5, 66.25)\" id=\"flowchart-od-2\" class=\"node default\">\u003Cg transform=\"translate(4.875,0)\" class=\"basic label-container\">\u003Cpath style=\"\" fill=\"#ECECFF\" stroke-width=\"0\" stroke=\"none\" d=\"M-56.390625 -19.5 C-53.6828818575725 -14.084513715144995, -50.97513871514499 -8.66902743028999, -46.640625 0 C-49.164940047628015 5.048630095256026, -51.68925509525603 10.097260190512053, -56.390625 19.5 C-33.60176465792611 19.5, -10.81290431585223 19.5, 46.640625 19.5 C46.640625 9.319133669412397, 46.640625 -0.861732661175207, 46.640625 -19.5 C5.952167249373879 -19.5, -34.73629050125224 -19.5, -56.390625 -19.5\">\u003C/path>\u003Cpath style=\"\" stroke-dasharray=\"0 0\" fill=\"none\" stroke-width=\"1.3\" stroke=\"#9370DB\" d=\"M-56.390625 -19.5 C-54.056835133084 -14.832420266168, -51.723045266168 -10.164840532336003, -46.640625 0 M-56.390625 -19.5 C-54.33362789354126 -15.386005787082524, -52.276630787082524 -11.272011574165047, -46.640625 0 M-46.640625 0 C-48.635646888947846 3.9900437778956883, -50.630668777895686 7.980087555791377, -56.390625 19.5 M-46.640625 0 C-49.625054973146064 5.968859946292131, -52.60948494629213 11.937719892584262, -56.390625 19.5 M-56.390625 19.5 C-18.37675082652862 19.5, 19.637123346942758 19.5, 46.640625 19.5 M-56.390625 19.5 C-24.59678872303175 19.5, 7.1970475539365 19.5, 46.640625 19.5 M46.640625 19.5 C46.640625 6.201218460704931, 46.640625 -7.097563078590138, 46.640625 -19.5 M46.640625 19.5 C46.640625 5.9230899713224865, 46.640625 -7.653820057355027, 46.640625 -19.5 M46.640625 -19.5 C13.683346651444445 -19.5, -19.27393169711111 -19.5, -56.390625 -19.5 M46.640625 -19.5 C12.58438913714 -19.5, -21.47184672572 -19.5, -56.390625 -19.5\">\u003C/path>\u003C/g>\u003Cg transform=\"translate(-34.265625, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"78.28125\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>Odd shape\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(725.1484375, 88.25)\" id=\"flowchart-ro-3\" class=\"node default\">\u003Cg class=\"basic label-container outer-path\">\u003Cpath style=\"\" fill=\"#ECECFF\" stroke-width=\"0\" stroke=\"none\" d=\"M-121.6484375 -27 C-29.56613178560214 -27, 62.51617392879572 -27, 121.6484375 -27 C121.6484375 -27, 121.6484375 -27, 121.6484375 -27 C121.80157509518894 -26.99366618221157, 121.95471269037787 -26.98733236442314, 122.06133422736166 -26.982922465033347 C122.21586666968287 -26.963660016186168, 122.37039911200408 -26.94439756733899, 122.47141045140367 -26.931806517013612 C122.59376356067509 -26.906151767830835, 122.7161166699465 -26.880497018648057, 122.875864935704 -26.847001329696653 C122.99750231715252 -26.81078831224326, 123.11913969860105 -26.77457529478987, 123.27193484602341 -26.729086208503173 C123.36603885371164 -26.692366710758485, 123.46014286139986 -26.6556472130138, 123.65691462326485 -26.578866633275286 C123.78188608008507 -26.517771810814875, 123.90685753690528 -26.456676988354463, 124.02817446518537 -26.397368756032446 C124.10455154746109 -26.351857893401355, 124.1809286297368 -26.306347030770265, 124.38317829061214 -26.185832391312644 C124.45386612437768 -26.135362248077765, 124.52455395814324 -26.084892104842886, 124.71950106344833 -25.94570254698197 C124.79632084964867 -25.880639506954097, 124.873140635849 -25.815576466926224, 125.0348453581287 -25.678619553365657 C125.1080592751412 -25.605405636353158, 125.18127319215371 -25.53219171934066, 125.32705705336566 -25.386407858128706 C125.38450140255746 -25.31858344320064, 125.44194575174927 -25.25075902827258, 125.59414004698196 -25.07106356344834 C125.67212845991152 -24.96183399492605, 125.75011687284109 -24.85260442640376, 125.83426989131264 -24.734740790612136 C125.9078348533533 -24.611282854779695, 125.98139981539394 -24.487824918947254, 126.04580625603245 -24.37973696518537 C126.09152140186652 -24.2862251397384, 126.13723654770057 -24.192713314291428, 126.22730413327528 -24.008477123264846 C126.27968169997109 -23.874244923976512, 126.33205926666689 -23.74001272468818, 126.37752370850318 -23.623497346023417 C126.41700997753466 -23.490865306333713, 126.45649624656615 -23.35823326664401, 126.49543882969665 -23.227427435703994 C126.51247567919444 -23.146174974672633, 126.52951252869222 -23.064922513641267, 126.58024401701361 -22.82297295140367 C126.59288136329047 -22.72159020406375, 126.60551870956733 -22.620207456723836, 126.63135996503335 -22.412896727361662 C126.63575581274554 -22.306614928619283, 126.64015166045772 -22.200333129876903, 126.6484375 -22 C126.6484375 -22, 126.6484375 -22, 126.6484375 -22 C126.6484375 -10.689844381507042, 126.6484375 0.6203112369859163, 126.6484375 22 C126.6484375 22, 126.6484375 22, 126.6484375 22 C126.64367645318967 22.115111498857516, 126.63891540637934 22.230222997715035, 126.63135996503335 22.412896727361662 C126.61103904831522 22.575920697759862, 126.59071813159707 22.73894466815806, 126.58024401701361 22.82297295140367 C126.54678760998695 22.982533873071514, 126.5133312029603 23.142094794739357, 126.49543882969665 23.227427435703994 C126.46780915368844 23.32023388145891, 126.44017947768023 23.413040327213828, 126.37752370850318 23.623497346023417 C126.3221660475377 23.76536687238015, 126.26680838657225 23.90723639873688, 126.22730413327528 24.008477123264846 C126.1602083696447 24.145723701447654, 126.09311260601415 24.282970279630458, 126.04580625603245 24.379736965185366 C125.97701712820478 24.495180017064136, 125.90822800037711 24.610623068942907, 125.83426989131264 24.734740790612133 C125.77330778330924 24.820123535346728, 125.71234567530584 24.905506280081326, 125.59414004698196 25.07106356344834 C125.51353205863393 25.166237235448335, 125.43292407028589 25.261410907448333, 125.32705705336566 25.386407858128706 C125.21732445556732 25.496140455927048, 125.10759185776897 25.605873053725393, 125.0348453581287 25.678619553365657 C124.91218161894838 25.78251044094825, 124.78951787976807 25.886401328530845, 124.71950106344833 25.94570254698197 C124.60504439284296 26.02742303906551, 124.49058772223759 26.109143531149055, 124.38317829061214 26.185832391312644 C124.24609196223818 26.267518112648606, 124.10900563386423 26.349203833984568, 124.02817446518537 26.397368756032446 C123.95022280660618 26.4354769998072, 123.87227114802697 26.47358524358195, 123.65691462326485 26.578866633275286 C123.54726997583965 26.62165010746254, 123.43762532841447 26.664433581649792, 123.27193484602341 26.729086208503173 C123.19069743977772 26.75327163222087, 123.10946003353203 26.777457055938562, 122.875864935704 26.847001329696653 C122.76719960823378 26.869786052845196, 122.65853428076358 26.89257077599374, 122.47141045140367 26.931806517013612 C122.36344221839823 26.94526474322261, 122.25547398539281 26.958722969431605, 122.06133422736166 26.982922465033347 C121.94044580308469 26.987922447246444, 121.81955737880773 26.992922429459536, 121.6484375 27 C121.6484375 27, 121.6484375 27, 121.6484375 27 C27.769584468549596 27, -66.10926856290081 27, -121.6484375 27 C-121.6484375 27, -121.6484375 27, -121.6484375 27 C-121.78973098987707 26.994156058030892, -121.93102447975414 26.988312116061785, -122.06133422736166 26.982922465033347 C-122.1842951598126 26.967595400787417, -122.30725609226356 26.952268336541483, -122.47141045140367 26.931806517013612 C-122.597690261571 26.905328425234963, -122.72397007173832 26.878850333456313, -122.875864935704 26.847001329696653 C-123.00512892921168 26.808517771457858, -123.13439292271937 26.770034213219063, -123.27193484602341 26.729086208503173 C-123.38291177529223 26.685782876327362, -123.49388870456103 26.642479544151552, -123.65691462326485 26.578866633275286 C-123.74314248060791 26.536712402464847, -123.82937033795099 26.494558171654408, -124.02817446518537 26.397368756032446 C-124.14094027032867 26.33017492099126, -124.25370607547198 26.262981085950074, -124.38317829061214 26.185832391312644 C-124.49120334317129 26.108703986250774, -124.59922839573044 26.0315755811889, -124.71950106344833 25.94570254698197 C-124.83302662027839 25.849551305048564, -124.94655217710846 25.753400063115162, -125.0348453581287 25.67861955336566 C-125.14816806596417 25.565296845530202, -125.26149077379962 25.451974137694748, -125.32705705336566 25.386407858128706 C-125.41502218545862 25.282547622923428, -125.50298731755157 25.17868738771815, -125.59414004698196 25.07106356344834 C-125.66518732398544 24.97155566066819, -125.73623460098891 24.872047757888037, -125.83426989131264 24.734740790612133 C-125.89409628572344 24.63433914616932, -125.95392268013424 24.533937501726513, -126.04580625603245 24.37973696518537 C-126.10653350895815 24.255517383865975, -126.16726076188385 24.131297802546584, -126.22730413327528 24.00847712326485 C-126.26103496574343 23.922032408253116, -126.2947657982116 23.83558769324138, -126.37752370850318 23.623497346023417 C-126.41589669352537 23.494604761403245, -126.45426967854756 23.365712176783077, -126.49543882969665 23.227427435703994 C-126.52674925871952 23.078101152438638, -126.55805968774237 22.928774869173285, -126.58024401701361 22.82297295140367 C-126.595788008799 22.69827172400134, -126.61133200058441 22.573570496599014, -126.63135996503335 22.412896727361662 C-126.63814794166588 22.248778583703825, -126.6449359182984 22.084660440045987, -126.6484375 22 C-126.6484375 22, -126.6484375 22, -126.6484375 22 C-126.6484375 12.322787323407226, -126.6484375 2.6455746468144525, -126.6484375 -22 C-126.6484375 -22, -126.6484375 -22, -126.6484375 -22 C-126.64211929947308 -22.152760004618624, -126.63580109894616 -22.305520009237245, -126.63135996503335 -22.41289672736166 C-126.61429435204941 -22.549805117101695, -126.59722873906547 -22.686713506841734, -126.58024401701361 -22.82297295140367 C-126.55829285848957 -22.92766282688798, -126.53634169996553 -23.032352702372286, -126.49543882969665 -23.227427435703994 C-126.46540999797772 -23.32829250343691, -126.43538116625878 -23.429157571169828, -126.37752370850318 -23.623497346023417 C-126.33466268703847 -23.733340730088297, -126.29180166557377 -23.84318411415318, -126.22730413327528 -24.008477123264846 C-126.15645404978328 -24.15340328547062, -126.08560396629127 -24.298329447676394, -126.04580625603245 -24.379736965185366 C-125.99368981179529 -24.46719964374817, -125.94157336755814 -24.55466232231098, -125.83426989131264 -24.734740790612133 C-125.7653687873137 -24.831242791073546, -125.69646768331476 -24.92774479153496, -125.59414004698196 -25.07106356344834 C-125.51887020084371 -25.15993450285105, -125.44360035470545 -25.24880544225376, -125.32705705336566 -25.386407858128706 C-125.24870099096697 -25.4647639205274, -125.17034492856827 -25.543119982926093, -125.0348453581287 -25.678619553365657 C-124.96315986733624 -25.739334067002606, -124.89147437654378 -25.800048580639555, -124.71950106344833 -25.945702546981966 C-124.61178745163679 -26.022608587624063, -124.50407383982522 -26.09951462826616, -124.38317829061214 -26.185832391312644 C-124.26425501645178 -26.256695281497606, -124.14533174229142 -26.32755817168257, -124.02817446518537 -26.397368756032446 C-123.89364350892718 -26.463136932999827, -123.759112552669 -26.52890510996721, -123.65691462326485 -26.578866633275286 C-123.51263631392564 -26.635164204277157, -123.36835800458643 -26.691461775279024, -123.27193484602341 -26.729086208503173 C-123.11594362230758 -26.775526807928507, -122.95995239859174 -26.821967407353842, -122.875864935704 -26.847001329696653 C-122.74741757677363 -26.87393390865743, -122.61897021784324 -26.90086648761821, -122.47141045140367 -26.931806517013612 C-122.33319851974994 -26.949034616327644, -122.1949865880962 -26.96626271564168, -122.06133422736167 -26.982922465033347 C-121.96578140280523 -26.986874559090744, -121.87022857824881 -26.99082665314814, -121.6484375 -27 C-121.6484375 -27, -121.6484375 -27, -121.6484375 -27\">\u003C/path>\u003Cpath style=\"\" stroke-dasharray=\"0 0\" fill=\"none\" stroke-width=\"1.3\" stroke=\"#9370DB\" d=\"M-121.6484375 -27 C-30.828838653374746 -27, 59.99076019325051 -27, 121.6484375 -27 M-121.6484375 -27 C-48.66685860122749 -27, 24.314720297545023 -27, 121.6484375 -27 M121.6484375 -27 C121.6484375 -27, 121.6484375 -27, 121.6484375 -27 M121.6484375 -27 C121.6484375 -27, 121.6484375 -27, 121.6484375 -27 M121.6484375 -27 C121.81233593010353 -26.993221110787296, 121.97623436020706 -26.986442221574592, 122.06133422736166 -26.982922465033347 M121.6484375 -27 C121.77428451490802 -26.99479492896136, 121.90013152981602 -26.989589857922713, 122.06133422736166 -26.982922465033347 M122.06133422736166 -26.982922465033347 C122.22493960904686 -26.962529075473867, 122.38854499073204 -26.942135685914387, 122.47141045140367 -26.931806517013612 M122.06133422736166 -26.982922465033347 C122.18810579567341 -26.967120405522724, 122.31487736398518 -26.951318346012098, 122.47141045140367 -26.931806517013612 M122.47141045140367 -26.931806517013612 C122.58247061322419 -26.908519649906836, 122.6935307750447 -26.885232782800063, 122.875864935704 -26.847001329696653 M122.47141045140367 -26.931806517013612 C122.59037946323024 -26.906861338447182, 122.70934847505679 -26.881916159880753, 122.875864935704 -26.847001329696653 M122.875864935704 -26.847001329696653 C123.01173096121016 -26.806552261372538, 123.14759698671634 -26.766103193048423, 123.27193484602341 -26.729086208503173 M122.875864935704 -26.847001329696653 C122.96733282425329 -26.819770159434558, 123.05880071280257 -26.792538989172463, 123.27193484602341 -26.729086208503173 M123.27193484602341 -26.729086208503173 C123.38358849058237 -26.685518821201754, 123.49524213514132 -26.64195143390034, 123.65691462326485 -26.578866633275286 M123.27193484602341 -26.729086208503173 C123.41497948324941 -26.673270017853657, 123.55802412047541 -26.61745382720414, 123.65691462326485 -26.578866633275286 M123.65691462326485 -26.578866633275286 C123.7996712937952 -26.509077149636333, 123.94242796432553 -26.43928766599738, 124.02817446518537 -26.397368756032446 M123.65691462326485 -26.578866633275286 C123.77896582513388 -26.519199436468938, 123.9010170270029 -26.459532239662593, 124.02817446518537 -26.397368756032446 M124.02817446518537 -26.397368756032446 C124.1078263004038 -26.349906564195184, 124.18747813562223 -26.302444372357925, 124.38317829061214 -26.185832391312644 M124.02817446518537 -26.397368756032446 C124.15948905651547 -26.319122243473764, 124.29080364784556 -26.240875730915082, 124.38317829061214 -26.185832391312644 M124.38317829061214 -26.185832391312644 C124.48583535586414 -26.11253665552132, 124.58849242111613 -26.039240919730002, 124.71950106344833 -25.94570254698197 M124.38317829061214 -26.185832391312644 C124.47367316321277 -26.121220294168403, 124.5641680358134 -26.056608197024158, 124.71950106344833 -25.94570254698197 M124.71950106344833 -25.94570254698197 C124.80498525276182 -25.87330113184981, 124.89046944207533 -25.80089971671765, 125.0348453581287 -25.678619553365657 M124.71950106344833 -25.94570254698197 C124.78609887444071 -25.88929707833011, 124.85269668543307 -25.83289160967825, 125.0348453581287 -25.678619553365657 M125.0348453581287 -25.678619553365657 C125.12099362890883 -25.59247128258553, 125.20714189968896 -25.506323011805407, 125.32705705336566 -25.386407858128706 M125.0348453581287 -25.678619553365657 C125.1465114993279 -25.56695341216647, 125.25817764052708 -25.455287270967283, 125.32705705336566 -25.386407858128706 M125.32705705336566 -25.386407858128706 C125.39956779289486 -25.300794589743543, 125.47207853242405 -25.215181321358376, 125.59414004698196 -25.07106356344834 M125.32705705336566 -25.386407858128706 C125.39107026191289 -25.310827605615316, 125.45508347046011 -25.23524735310193, 125.59414004698196 -25.07106356344834 M125.59414004698196 -25.07106356344834 C125.6583004078352 -24.981201386889325, 125.72246076868844 -24.891339210330308, 125.83426989131264 -24.734740790612136 M125.59414004698196 -25.07106356344834 C125.69008633429527 -24.93668242693241, 125.78603262160857 -24.80230129041648, 125.83426989131264 -24.734740790612136 M125.83426989131264 -24.734740790612136 C125.91858181577383 -24.593247124724197, 126.00289374023501 -24.451753458836258, 126.04580625603245 -24.37973696518537 M125.83426989131264 -24.734740790612136 C125.91262020184047 -24.603252003813736, 125.99097051236828 -24.47176321701534, 126.04580625603245 -24.37973696518537 M126.04580625603245 -24.37973696518537 C126.10201316663958 -24.264763891869887, 126.15822007724671 -24.149790818554404, 126.22730413327528 -24.008477123264846 M126.04580625603245 -24.37973696518537 C126.08627808696146 -24.29695051180535, 126.12674991789046 -24.214164058425325, 126.22730413327528 -24.008477123264846 M126.22730413327528 -24.008477123264846 C126.27522856972567 -23.885657318714742, 126.32315300617606 -23.762837514164637, 126.37752370850318 -23.623497346023417 M126.22730413327528 -24.008477123264846 C126.28408082357623 -23.862970936395353, 126.34085751387718 -23.717464749525863, 126.37752370850318 -23.623497346023417 M126.37752370850318 -23.623497346023417 C126.40475035829982 -23.532044641449904, 126.43197700809648 -23.440591936876388, 126.49543882969665 -23.227427435703994 M126.37752370850318 -23.623497346023417 C126.42415485246948 -23.466866094476607, 126.4707859964358 -23.310234842929795, 126.49543882969665 -23.227427435703994 M126.49543882969665 -23.227427435703994 C126.51807539961595 -23.119468683383584, 126.54071196953525 -23.01150993106317, 126.58024401701361 -22.82297295140367 M126.49543882969665 -23.227427435703994 C126.51856132960259 -23.117151177009596, 126.54168382950853 -23.0068749183152, 126.58024401701361 -22.82297295140367 M126.58024401701361 -22.82297295140367 C126.59393652797695 -22.713125175689335, 126.60762903894029 -22.603277399975, 126.63135996503335 -22.412896727361662 M126.58024401701361 -22.82297295140367 C126.59086685339449 -22.737751551812195, 126.60148968977538 -22.65253015222072, 126.63135996503335 -22.412896727361662 M126.63135996503335 -22.412896727361662 C126.63523537321109 -22.31919799643239, 126.63911078138881 -22.225499265503117, 126.6484375 -22 M126.63135996503335 -22.412896727361662 C126.63727053770378 -22.269992255655307, 126.64318111037421 -22.12708778394895, 126.6484375 -22 M126.6484375 -22 C126.6484375 -22, 126.6484375 -22, 126.6484375 -22 M126.6484375 -22 C126.6484375 -22, 126.6484375 -22, 126.6484375 -22 M126.6484375 -22 C126.6484375 -9.985105897914886, 126.6484375 2.0297882041702273, 126.6484375 22 M126.6484375 -22 C126.6484375 -10.330089254805808, 126.6484375 1.3398214903883847, 126.6484375 22 M126.6484375 22 C126.6484375 22, 126.6484375 22, 126.6484375 22 M126.6484375 22 C126.6484375 22, 126.6484375 22, 126.6484375 22 M126.6484375 22 C126.64433923944699 22.099086804595327, 126.640240978894 22.198173609190654, 126.63135996503335 22.412896727361662 M126.6484375 22 C126.64335672750765 22.122841753136882, 126.6382759550153 22.24568350627376, 126.63135996503335 22.412896727361662 M126.63135996503335 22.412896727361662 C126.61777577367158 22.521875512185293, 126.60419158230981 22.630854297008923, 126.58024401701361 22.82297295140367 M126.63135996503335 22.412896727361662 C126.6110414023984 22.575901812195166, 126.59072283976344 22.73890689702867, 126.58024401701361 22.82297295140367 M126.58024401701361 22.82297295140367 C126.55922494743369 22.92321749087559, 126.53820587785377 23.02346203034751, 126.49543882969665 23.227427435703994 M126.58024401701361 22.82297295140367 C126.55553132838973 22.940833167851114, 126.53081863976587 23.058693384298557, 126.49543882969665 23.227427435703994 M126.49543882969665 23.227427435703994 C126.47175906742815 23.306966355082114, 126.44807930515965 23.386505274460234, 126.37752370850318 23.623497346023417 M126.49543882969665 23.227427435703994 C126.46513656623833 23.329210944459586, 126.43483430278 23.430994453215174, 126.37752370850318 23.623497346023417 M126.37752370850318 23.623497346023417 C126.34543057043108 23.705745009999493, 126.31333743235899 23.787992673975566, 126.22730413327528 24.008477123264846 M126.37752370850318 23.623497346023417 C126.33415052408195 23.734653291254965, 126.2907773396607 23.845809236486513, 126.22730413327528 24.008477123264846 M126.22730413327528 24.008477123264846 C126.17721098623822 24.110944293310027, 126.12711783920116 24.21341146335521, 126.04580625603245 24.379736965185366 M126.22730413327528 24.008477123264846 C126.15627822369544 24.153762943481876, 126.08525231411559 24.299048763698906, 126.04580625603245 24.379736965185366 M126.04580625603245 24.379736965185366 C125.98926141912165 24.474631445564928, 125.93271658221084 24.56952592594449, 125.83426989131264 24.734740790612133 M126.04580625603245 24.379736965185366 C125.99452571076985 24.4657968242659, 125.94324516550724 24.551856683346436, 125.83426989131264 24.734740790612133 M125.83426989131264 24.734740790612133 C125.78146435238328 24.808699549563304, 125.7286588134539 24.882658308514475, 125.59414004698196 25.07106356344834 M125.83426989131264 24.734740790612133 C125.77177238953972 24.82227398812114, 125.7092748877668 24.90980718563015, 125.59414004698196 25.07106356344834 M125.59414004698196 25.07106356344834 C125.52742103630256 25.149838550502352, 125.46070202562314 25.228613537556367, 125.32705705336566 25.386407858128706 M125.59414004698196 25.07106356344834 C125.50494607784563 25.176374683809097, 125.41575210870931 25.281685804169854, 125.32705705336566 25.386407858128706 M125.32705705336566 25.386407858128706 C125.2565432392155 25.45692167227887, 125.18602942506533 25.52743548642903, 125.0348453581287 25.678619553365657 M125.32705705336566 25.386407858128706 C125.24389855623004 25.469566355264337, 125.1607400590944 25.55272485239997, 125.0348453581287 25.678619553365657 M125.0348453581287 25.678619553365657 C124.95110659387367 25.74954266888177, 124.86736782961866 25.820465784397882, 124.71950106344833 25.94570254698197 M125.0348453581287 25.678619553365657 C124.90929603640268 25.784954404697192, 124.78374671467665 25.891289256028728, 124.71950106344833 25.94570254698197 M124.71950106344833 25.94570254698197 C124.59030042603807 26.037950029027616, 124.46109978862782 26.130197511073263, 124.38317829061214 26.185832391312644 M124.71950106344833 25.94570254698197 C124.59318606958783 26.035889719133785, 124.46687107572731 26.126076891285603, 124.38317829061214 26.185832391312644 M124.38317829061214 26.185832391312644 C124.26867226775983 26.254063171033344, 124.15416624490753 26.32229395075404, 124.02817446518537 26.397368756032446 M124.38317829061214 26.185832391312644 C124.27699814400518 26.24910202563743, 124.17081799739822 26.312371659962213, 124.02817446518537 26.397368756032446 M124.02817446518537 26.397368756032446 C123.94206645776558 26.439464395785613, 123.85595845034577 26.481560035538784, 123.65691462326485 26.578866633275286 M124.02817446518537 26.397368756032446 C123.94525483808916 26.437905691624188, 123.86233521099292 26.478442627215927, 123.65691462326485 26.578866633275286 M123.65691462326485 26.578866633275286 C123.57761224430013 26.609810517569684, 123.4983098653354 26.640754401864083, 123.27193484602341 26.729086208503173 M123.65691462326485 26.578866633275286 C123.5629838749596 26.61551852499895, 123.46905312665434 26.652170416722612, 123.27193484602341 26.729086208503173 M123.27193484602341 26.729086208503173 C123.13990494538584 26.768393212971873, 123.00787504474826 26.807700217440573, 122.875864935704 26.847001329696653 M123.27193484602341 26.729086208503173 C123.11818427553116 26.77485973656174, 122.96443370503891 26.82063326462031, 122.875864935704 26.847001329696653 M122.875864935704 26.847001329696653 C122.73847051719676 26.87580990977203, 122.6010760986895 26.904618489847408, 122.47141045140367 26.931806517013612 M122.875864935704 26.847001329696653 C122.72480563377816 26.878675134520332, 122.57374633185232 26.910348939344008, 122.47141045140367 26.931806517013612 M122.47141045140367 26.931806517013612 C122.35134759555827 26.946772336387394, 122.23128473971286 26.96173815576117, 122.06133422736166 26.982922465033347 M122.47141045140367 26.931806517013612 C122.3077843896803 26.952202484337164, 122.14415832795692 26.972598451660716, 122.06133422736166 26.982922465033347 M122.06133422736166 26.982922465033347 C121.91126144486009 26.98912952123137, 121.76118866235852 26.99533657742939, 121.6484375 27 M122.06133422736166 26.982922465033347 C121.96002814163208 26.98711251573304, 121.85872205590249 26.99130256643273, 121.6484375 27 M121.6484375 27 C121.6484375 27, 121.6484375 27, 121.6484375 27 M121.6484375 27 C121.6484375 27, 121.6484375 27, 121.6484375 27 M121.6484375 27 C27.97625637996758 27, -65.69592474006484 27, -121.6484375 27 M121.6484375 27 C39.787391990572914 27, -42.07365351885417 27, -121.6484375 27 M-121.6484375 27 C-121.6484375 27, -121.6484375 27, -121.6484375 27 M-121.6484375 27 C-121.6484375 27, -121.6484375 27, -121.6484375 27 M-121.6484375 27 C-121.77985427845725 26.994564561836928, -121.9112710569145 26.98912912367386, -122.06133422736166 26.982922465033347 M-121.6484375 27 C-121.77409811571569 26.99480263848898, -121.89975873143138 26.989605276977958, -122.06133422736166 26.982922465033347 M-122.06133422736166 26.982922465033347 C-122.15913692184738 26.970731371879385, -122.2569396163331 26.95854027872542, -122.47141045140367 26.931806517013612 M-122.06133422736166 26.982922465033347 C-122.2061357592478 26.964872972906946, -122.35093729113396 26.946823480780548, -122.47141045140367 26.931806517013612 M-122.47141045140367 26.931806517013612 C-122.55554419460977 26.914165526174774, -122.63967793781586 26.89652453533593, -122.875864935704 26.847001329696653 M-122.47141045140367 26.931806517013612 C-122.61332301135944 26.90205058229948, -122.75523557131521 26.87229464758535, -122.875864935704 26.847001329696653 M-122.875864935704 26.847001329696653 C-123.01785082137262 26.80473030006232, -123.15983670704124 26.762459270427993, -123.27193484602341 26.729086208503173 M-122.875864935704 26.847001329696653 C-123.01435929055228 26.805769773824668, -123.15285364540054 26.764538217952683, -123.27193484602341 26.729086208503173 M-123.27193484602341 26.729086208503173 C-123.35329084328494 26.697340999862767, -123.43464684054645 26.665595791222362, -123.65691462326485 26.578866633275286 M-123.27193484602341 26.729086208503173 C-123.40243651165068 26.67816430055899, -123.53293817727796 26.627242392614807, -123.65691462326485 26.578866633275286 M-123.65691462326485 26.578866633275286 C-123.78513313778262 26.516184421033252, -123.9133516523004 26.453502208791217, -124.02817446518537 26.397368756032446 M-123.65691462326485 26.578866633275286 C-123.80368369378684 26.50711560680594, -123.95045276430882 26.435364580336593, -124.02817446518537 26.397368756032446 M-124.02817446518537 26.397368756032446 C-124.1333109239965 26.33472102464621, -124.23844738280765 26.27207329325998, -124.38317829061214 26.185832391312644 M-124.02817446518537 26.397368756032446 C-124.15149552730557 26.32388535302142, -124.27481658942575 26.2504019500104, -124.38317829061214 26.185832391312644 M-124.38317829061214 26.185832391312644 C-124.50228936507828 26.10078871874651, -124.62140043954443 26.01574504618038, -124.71950106344833 25.94570254698197 M-124.38317829061214 26.185832391312644 C-124.45677834473376 26.13328296270894, -124.53037839885539 26.080733534105235, -124.71950106344833 25.94570254698197 M-124.71950106344833 25.94570254698197 C-124.80553639178449 25.872834340908753, -124.89157172012065 25.799966134835532, -125.0348453581287 25.67861955336566 M-124.71950106344833 25.94570254698197 C-124.83938534976785 25.844165735890375, -124.95926963608738 25.74262892479878, -125.0348453581287 25.67861955336566 M-125.0348453581287 25.67861955336566 C-125.14216786596471 25.571297045529658, -125.24949037380071 25.463974537693655, -125.32705705336566 25.386407858128706 M-125.0348453581287 25.67861955336566 C-125.11244204188563 25.601022869608734, -125.19003872564255 25.52342618585181, -125.32705705336566 25.386407858128706 M-125.32705705336566 25.386407858128706 C-125.42858271599611 25.26653673477238, -125.53010837862657 25.14666561141605, -125.59414004698196 25.07106356344834 M-125.32705705336566 25.386407858128706 C-125.42624497426435 25.2692969012194, -125.52543289516304 25.152185944310094, -125.59414004698196 25.07106356344834 M-125.59414004698196 25.07106356344834 C-125.64344656077371 25.002005494121093, -125.69275307456547 24.93294742479385, -125.83426989131264 24.734740790612133 M-125.59414004698196 25.07106356344834 C-125.66192655292156 24.976122654699452, -125.72971305886117 24.881181745950563, -125.83426989131264 24.734740790612133 M-125.83426989131264 24.734740790612133 C-125.88982184562305 24.64151258223175, -125.94537379993345 24.548284373851367, -126.04580625603245 24.37973696518537 M-125.83426989131264 24.734740790612133 C-125.87943243897006 24.658948256285292, -125.92459498662747 24.583155721958452, -126.04580625603245 24.37973696518537 M-126.04580625603245 24.37973696518537 C-126.08320146675497 24.303243839026898, -126.12059667747751 24.226750712868427, -126.22730413327528 24.00847712326485 M-126.04580625603245 24.37973696518537 C-126.10070583162027 24.267438088394815, -126.1556054072081 24.155139211604258, -126.22730413327528 24.00847712326485 M-126.22730413327528 24.00847712326485 C-126.26900250240632 23.901613361767414, -126.31070087153736 23.79474960026998, -126.37752370850318 23.623497346023417 M-126.22730413327528 24.00847712326485 C-126.27734389369479 23.880236207989398, -126.32738365411429 23.75199529271395, -126.37752370850318 23.623497346023417 M-126.37752370850318 23.623497346023417 C-126.40959668644219 23.515766112171427, -126.4416696643812 23.408034878319437, -126.49543882969665 23.227427435703994 M-126.37752370850318 23.623497346023417 C-126.42027069213789 23.47991275904882, -126.46301767577259 23.33632817207422, -126.49543882969665 23.227427435703994 M-126.49543882969665 23.227427435703994 C-126.52596225450674 23.081854547638738, -126.55648567931684 22.936281659573478, -126.58024401701361 22.82297295140367 M-126.49543882969665 23.227427435703994 C-126.51654173280107 23.126783075820228, -126.5376446359055 23.026138715936465, -126.58024401701361 22.82297295140367 M-126.58024401701361 22.82297295140367 C-126.59938877272184 22.66938469890753, -126.61853352843006 22.51579644641139, -126.63135996503335 22.412896727361662 M-126.58024401701361 22.82297295140367 C-126.59587858318582 22.69754509358598, -126.61151314935805 22.57211723576829, -126.63135996503335 22.412896727361662 M-126.63135996503335 22.412896727361662 C-126.63767598917111 22.260189342981317, -126.64399201330889 22.107481958600967, -126.6484375 22 M-126.63135996503335 22.412896727361662 C-126.63784488709045 22.25610576778825, -126.64432980914754 22.099314808214835, -126.6484375 22 M-126.6484375 22 C-126.6484375 22, -126.6484375 22, -126.6484375 22 M-126.6484375 22 C-126.6484375 22, -126.6484375 22, -126.6484375 22 M-126.6484375 22 C-126.6484375 7.319968369838097, -126.6484375 -7.360063260323805, -126.6484375 -22 M-126.6484375 22 C-126.6484375 7.18308856102888, -126.6484375 -7.63382287794224, -126.6484375 -22 M-126.6484375 -22 C-126.6484375 -22, -126.6484375 -22, -126.6484375 -22 M-126.6484375 -22 C-126.6484375 -22, -126.6484375 -22, -126.6484375 -22 M-126.6484375 -22 C-126.64475668814549 -22.088993825615145, -126.641075876291 -22.177987651230286, -126.63135996503335 -22.41289672736166 M-126.6484375 -22 C-126.64258866210469 -22.14141186245901, -126.63673982420939 -22.282823724918018, -126.63135996503335 -22.41289672736166 M-126.63135996503335 -22.41289672736166 C-126.61837911245108 -22.517035244165257, -126.6053982598688 -22.621173760968855, -126.58024401701361 -22.82297295140367 M-126.63135996503335 -22.41289672736166 C-126.6139973239067 -22.55218801684072, -126.59663468278005 -22.691479306319778, -126.58024401701361 -22.82297295140367 M-126.58024401701361 -22.82297295140367 C-126.56018563086128 -22.91863578151825, -126.54012724470896 -23.01429861163283, -126.49543882969665 -23.227427435703994 M-126.58024401701361 -22.82297295140367 C-126.55575450888384 -22.939768771267588, -126.53126500075406 -23.056564591131504, -126.49543882969665 -23.227427435703994 M-126.49543882969665 -23.227427435703994 C-126.45303604335714 -23.369855884343984, -126.41063325701764 -23.51228433298397, -126.37752370850318 -23.623497346023417 M-126.49543882969665 -23.227427435703994 C-126.4538185557086 -23.367227471688093, -126.41219828172055 -23.507027507672195, -126.37752370850318 -23.623497346023417 M-126.37752370850318 -23.623497346023417 C-126.3253448337832 -23.757220341418165, -126.27316595906325 -23.890943336812914, -126.22730413327528 -24.008477123264846 M-126.37752370850318 -23.623497346023417 C-126.33764532973176 -23.725696871969888, -126.29776695096034 -23.827896397916362, -126.22730413327528 -24.008477123264846 M-126.22730413327528 -24.008477123264846 C-126.17114261207793 -24.123357351058626, -126.11498109088058 -24.238237578852406, -126.04580625603245 -24.379736965185366 M-126.22730413327528 -24.008477123264846 C-126.17916846819566 -24.106940199966797, -126.13103280311603 -24.205403276668747, -126.04580625603245 -24.379736965185366 M-126.04580625603245 -24.379736965185366 C-125.98770923252 -24.47723635078815, -125.92961220900756 -24.574735736390934, -125.83426989131264 -24.734740790612133 M-126.04580625603245 -24.379736965185366 C-125.98209658743158 -24.48665558459123, -125.91838691883073 -24.593574203997093, -125.83426989131264 -24.734740790612133 M-125.83426989131264 -24.734740790612133 C-125.75364510569035 -24.847662828834384, -125.67302032006808 -24.96058486705663, -125.59414004698196 -25.07106356344834 M-125.83426989131264 -24.734740790612133 C-125.77734695409046 -24.81446632467853, -125.7204240168683 -24.894191858744925, -125.59414004698196 -25.07106356344834 M-125.59414004698196 -25.07106356344834 C-125.50221946167854 -25.1795939934343, -125.41029887637512 -25.288124423420257, -125.32705705336566 -25.386407858128706 M-125.59414004698196 -25.07106356344834 C-125.49401442323995 -25.18928166401268, -125.39388879949794 -25.30749976457702, -125.32705705336566 -25.386407858128706 M-125.32705705336566 -25.386407858128706 C-125.21576273683428 -25.49770217466009, -125.10446842030288 -25.60899649119148, -125.0348453581287 -25.678619553365657 M-125.32705705336566 -25.386407858128706 C-125.22905002323094 -25.48441488826343, -125.13104299309622 -25.58242191839815, -125.0348453581287 -25.678619553365657 M-125.0348453581287 -25.678619553365657 C-124.91105667124931 -25.78346322304769, -124.7872679843699 -25.88830689272972, -124.71950106344833 -25.945702546981966 M-125.0348453581287 -25.678619553365657 C-124.96823456105315 -25.73503602066893, -124.90162376397758 -25.791452487972204, -124.71950106344833 -25.945702546981966 M-124.71950106344833 -25.945702546981966 C-124.62183455633019 -26.01543509275288, -124.52416804921205 -26.085167638523796, -124.38317829061214 -26.185832391312644 M-124.71950106344833 -25.945702546981966 C-124.62994704593548 -26.009642886505222, -124.54039302842261 -26.07358322602848, -124.38317829061214 -26.185832391312644 M-124.38317829061214 -26.185832391312644 C-124.25632849532256 -26.261418462895815, -124.129478700033 -26.337004534478982, -124.02817446518537 -26.397368756032446 M-124.38317829061214 -26.185832391312644 C-124.27785500518114 -26.248591447200663, -124.17253171975014 -26.311350503088683, -124.02817446518537 -26.397368756032446 M-124.02817446518537 -26.397368756032446 C-123.91378593275338 -26.453289902014546, -123.7993974003214 -26.509211047996647, -123.65691462326485 -26.578866633275286 M-124.02817446518537 -26.397368756032446 C-123.91238969568651 -26.45397248072399, -123.79660492618764 -26.510576205415532, -123.65691462326485 -26.578866633275286 M-123.65691462326485 -26.578866633275286 C-123.53329196256236 -26.62710434516846, -123.40966930185986 -26.675342057061627, -123.27193484602341 -26.729086208503173 M-123.65691462326485 -26.578866633275286 C-123.55643037623275 -26.61807570813739, -123.45594612920067 -26.65728478299949, -123.27193484602341 -26.729086208503173 M-123.27193484602341 -26.729086208503173 C-123.14587341726248 -26.766616321907097, -123.01981198850153 -26.804146435311022, -122.875864935704 -26.847001329696653 M-123.27193484602341 -26.729086208503173 C-123.13852276723203 -26.768804705236924, -123.00511068844067 -26.80852320197068, -122.875864935704 -26.847001329696653 M-122.875864935704 -26.847001329696653 C-122.7375714403946 -26.8759984263532, -122.5992779450852 -26.904995523009745, -122.47141045140367 -26.931806517013612 M-122.875864935704 -26.847001329696653 C-122.75869231970339 -26.87156984366811, -122.64151970370277 -26.89613835763956, -122.47141045140367 -26.931806517013612 M-122.47141045140367 -26.931806517013612 C-122.36761568556983 -26.944744521082193, -122.26382091973598 -26.957682525150773, -122.06133422736167 -26.982922465033347 M-122.47141045140367 -26.931806517013612 C-122.31738729635617 -26.95100548326833, -122.16336414130866 -26.970204449523045, -122.06133422736167 -26.982922465033347 M-122.06133422736167 -26.982922465033347 C-121.89860361990748 -26.989653052743986, -121.73587301245327 -26.996383640454628, -121.6484375 -27 M-122.06133422736167 -26.982922465033347 C-121.9778817320406 -26.986374085771555, -121.89442923671953 -26.989825706509766, -121.6484375 -27 M-121.6484375 -27 C-121.6484375 -27, -121.6484375 -27, -121.6484375 -27 M-121.6484375 -27 C-121.6484375 -27, -121.6484375 -27, -121.6484375 -27\">\u003C/path>\u003C/g>\u003Cg transform=\"translate(-111.6484375, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"223.296875\">\u003Cdiv style=\"display: table; white-space: break-spaces; line-height: 1.5; max-width: 200px; text-align: center; width: 200px;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>Rounded&#x3C;br>square&#x3C;br>shape\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(184.5, 274.75)\" id=\"flowchart-di-4\" class=\"node default orange\">\u003Cpolygon style=\"fill:#f96 !important;stroke:#333 !important;stroke-width:4px !important\" transform=\"translate(-138.5, 139)\" class=\"label-container\" points=\"139,0 278,-139 139,-278 0,-139\">\u003C/polygon>\u003Cg transform=\"translate(-100, -24)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"48\" width=\"200\">\u003Cdiv style=\"display: table; white-space: break-spaces; line-height: 1.5; max-width: 200px; text-align: center; width: 200px;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>Diamond with &#x3C;br/> line break\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(725.1484375, 330.75)\" id=\"flowchart-ro2-7\" class=\"node default\">\u003Cg class=\"basic label-container outer-path\">\u003Cpath style=\"\" fill=\"#ECECFF\" stroke-width=\"0\" stroke=\"none\" d=\"M-93.1796875 -27 C-51.282805279131004 -27, -9.385923058262009 -27, 93.1796875 -27 C93.1796875 -27, 93.1796875 -27, 93.1796875 -27 C93.33420663357218 -26.993609041361367, 93.48872576714436 -26.98721808272273, 93.59258422736166 -26.982922465033347 C93.6991924777768 -26.969633760477443, 93.80580072819195 -26.956345055921535, 94.00266045140367 -26.931806517013612 C94.13869313157039 -26.90328346344252, 94.27472581173711 -26.874760409871428, 94.407114935704 -26.847001329696653 C94.50330157588793 -26.818365326205917, 94.59948821607186 -26.789729322715182, 94.80318484602341 -26.729086208503173 C94.91452015168082 -26.685643037426594, 95.02585545733822 -26.642199866350015, 95.18816462326485 -26.578866633275286 C95.30532111247004 -26.52159231568153, 95.42247760167521 -26.464317998087772, 95.55942446518537 -26.397368756032446 C95.63348649942768 -26.353237362607214, 95.70754853366999 -26.309105969181978, 95.91442829061214 -26.185832391312644 C96.01806345897124 -26.111838303325694, 96.12169862733036 -26.037844215338747, 96.25075106344833 -25.94570254698197 C96.3493779871186 -25.86216980366178, 96.44800491078887 -25.778637060341584, 96.5660953581287 -25.678619553365657 C96.654953515969 -25.589761395525368, 96.74381167380929 -25.50090323768508, 96.85830705336566 -25.386407858128706 C96.94435374735657 -25.28481271851034, 97.03040044134747 -25.183217578891973, 97.12539004698196 -25.07106356344834 C97.20783303183812 -24.955594978754085, 97.29027601669428 -24.840126394059826, 97.36551989131264 -24.734740790612136 C97.44534042524238 -24.600784650587716, 97.52516095917211 -24.466828510563293, 97.57705625603245 -24.37973696518537 C97.64215339200449 -24.246578645222648, 97.70725052797651 -24.11342032525993, 97.75855413327528 -24.008477123264846 C97.79374129860709 -23.918300146990994, 97.82892846393888 -23.828123170717145, 97.90877370850318 -23.623497346023417 C97.95578212274339 -23.46559886596479, 98.0027905369836 -23.307700385906163, 98.02668882969665 -23.227427435703994 C98.0598689496569 -23.069184187476846, 98.09304906961717 -22.9109409392497, 98.11149401701361 -22.82297295140367 C98.125710066841 -22.708925100197753, 98.13992611666838 -22.594877248991835, 98.16260996503335 -22.412896727361662 C98.16745895185313 -22.295659035105793, 98.17230793867292 -22.178421342849923, 98.1796875 -22 C98.1796875 -22, 98.1796875 -22, 98.1796875 -22 C98.1796875 -11.563696992535593, 98.1796875 -1.127393985071187, 98.1796875 22 C98.1796875 22, 98.1796875 22, 98.1796875 22 C98.17489363014596 22.115905086887278, 98.17009976029193 22.231810173774555, 98.16260996503335 22.412896727361662 C98.146578684098 22.541507217965982, 98.13054740316267 22.670117708570306, 98.11149401701361 22.82297295140367 C98.09006059539367 22.925193626368863, 98.0686271737737 23.027414301334055, 98.02668882969665 23.227427435703994 C97.99096809838959 23.34741125713534, 97.95524736708252 23.46739507856669, 97.90877370850318 23.623497346023417 C97.85782888736613 23.754057733131376, 97.80688406622907 23.884618120239335, 97.75855413327528 24.008477123264846 C97.71756635808083 24.092318957508496, 97.67657858288636 24.176160791752142, 97.57705625603245 24.379736965185366 C97.52079084150604 24.47416251429865, 97.46452542697965 24.568588063411934, 97.36551989131264 24.734740790612133 C97.309484779852 24.813222847330913, 97.25344966839134 24.891704904049693, 97.12539004698196 25.07106356344834 C97.0717314888945 25.134418103265894, 97.01807293080705 25.197772643083447, 96.85830705336566 25.386407858128706 C96.79353117821296 25.451183733281404, 96.72875530306027 25.515959608434102, 96.5660953581287 25.678619553365657 C96.48317928215096 25.748845887453932, 96.40026320617321 25.819072221542203, 96.25075106344833 25.94570254698197 C96.14873736110903 26.01853893048272, 96.04672365876972 26.091375313983473, 95.91442829061214 26.185832391312644 C95.84089195288828 26.229650537605046, 95.76735561516443 26.273468683897445, 95.55942446518537 26.397368756032446 C95.44403561969807 26.45377892526893, 95.32864677421077 26.51018909450542, 95.18816462326485 26.578866633275286 C95.03946698853477 26.636888630395763, 94.89076935380469 26.69491062751624, 94.80318484602341 26.729086208503173 C94.71511863242489 26.755304656254342, 94.62705241882638 26.78152310400551, 94.407114935704 26.847001329696653 C94.30830375122581 26.867719856339225, 94.20949256674761 26.888438382981796, 94.00266045140367 26.931806517013612 C93.90802683629785 26.94360258483483, 93.81339322119203 26.95539865265605, 93.59258422736166 26.982922465033347 C93.43207867472188 26.98956102379612, 93.27157312208209 26.996199582558898, 93.1796875 27 C93.1796875 27, 93.1796875 27, 93.1796875 27 C46.15732580542147 27, -0.8650358891570562 27, -93.1796875 27 C-93.1796875 27, -93.1796875 27, -93.1796875 27 C-93.33961062708025 26.993385530536557, -93.49953375416048 26.986771061073114, -93.59258422736166 26.982922465033347 C-93.74762963816494 26.963596074731562, -93.90267504896822 26.944269684429774, -94.00266045140367 26.931806517013612 C-94.16080010177485 26.898648119239468, -94.31893975214605 26.865489721465323, -94.407114935704 26.847001329696653 C-94.53075613703781 26.810191749216212, -94.65439733837161 26.773382168735772, -94.80318484602341 26.729086208503173 C-94.92657711530117 26.6809383956229, -95.04996938457894 26.632790582742622, -95.18816462326485 26.578866633275286 C-95.31429152872897 26.51720694639257, -95.44041843419309 26.45554725950985, -95.55942446518537 26.397368756032446 C-95.63661800145704 26.35137139241772, -95.71381153772869 26.305374028802998, -95.91442829061214 26.185832391312644 C-96.03716885841408 26.09819731031355, -96.15990942621602 26.01056222931446, -96.25075106344833 25.94570254698197 C-96.34910202458856 25.862403532002173, -96.44745298572879 25.779104517022375, -96.5660953581287 25.67861955336566 C-96.6514118247482 25.59330308674617, -96.73672829136768 25.50798662012668, -96.85830705336566 25.386407858128706 C-96.96351049247954 25.262194392283803, -97.06871393159341 25.137980926438896, -97.12539004698196 25.07106356344834 C-97.18919661026291 24.98169691122061, -97.25300317354387 24.89233025899288, -97.36551989131264 24.734740790612133 C-97.42392570263355 24.636723192202805, -97.48233151395445 24.538705593793477, -97.57705625603245 24.37973696518537 C-97.62357449846357 24.28458237939212, -97.67009274089467 24.18942779359887, -97.75855413327528 24.00847712326485 C-97.80579033080983 23.88742112389197, -97.85302652834437 23.766365124519087, -97.90877370850318 23.623497346023417 C-97.95210407455917 23.477953212037878, -97.99543444061516 23.332409078052343, -98.02668882969665 23.227427435703994 C-98.04573076840748 23.136612265724075, -98.06477270711832 23.045797095744156, -98.11149401701361 22.82297295140367 C-98.12418351594819 22.721171810865975, -98.13687301488277 22.619370670328276, -98.16260996503335 22.412896727361662 C-98.16751035043465 22.29441633197897, -98.17241073583597 22.17593593659627, -98.1796875 22 C-98.1796875 22, -98.1796875 22, -98.1796875 22 C-98.1796875 12.96623596904141, -98.1796875 3.93247193808282, -98.1796875 -22 C-98.1796875 -22, -98.1796875 -22, -98.1796875 -22 C-98.17347391704696 -22.150230584889027, -98.16726033409391 -22.300461169778057, -98.16260996503335 -22.41289672736166 C-98.14510438486113 -22.553334741226173, -98.12759880468889 -22.693772755090684, -98.11149401701361 -22.82297295140367 C-98.09303507388304 -22.911007687966382, -98.07457613075249 -22.999042424529097, -98.02668882969665 -23.227427435703994 C-97.98522079401677 -23.366716112225003, -97.94375275833688 -23.506004788746015, -97.90877370850318 -23.623497346023417 C-97.87815885846842 -23.701956482449386, -97.84754400843369 -23.78041561887536, -97.75855413327528 -24.008477123264846 C-97.6990993172545 -24.13009389329329, -97.6396445012337 -24.25171066332173, -97.57705625603245 -24.379736965185366 C-97.53401904185507 -24.45196272971959, -97.4909818276777 -24.52418849425381, -97.36551989131264 -24.734740790612133 C-97.31358218733445 -24.807484071087675, -97.26164448335624 -24.880227351563217, -97.12539004698196 -25.07106356344834 C-97.02294248381266 -25.192023172714066, -96.92049492064335 -25.312982781979787, -96.85830705336566 -25.386407858128706 C-96.7436736267075 -25.50104128478687, -96.62904020004933 -25.615674711445028, -96.5660953581287 -25.678619553365657 C-96.46476586593366 -25.76444125546591, -96.36343637373861 -25.850262957566166, -96.25075106344833 -25.945702546981966 C-96.176197134622 -25.99893302903448, -96.10164320579567 -26.052163511086988, -95.91442829061214 -26.185832391312644 C-95.83414778923897 -26.23366918686815, -95.75386728786582 -26.281505982423653, -95.55942446518537 -26.397368756032446 C-95.41533081257019 -26.46781185038527, -95.271237159955 -26.5382549447381, -95.18816462326485 -26.578866633275286 C-95.03434773147964 -26.638886170697265, -94.88053083969443 -26.698905708119245, -94.80318484602341 -26.729086208503173 C-94.66247305868066 -26.770977922631346, -94.52176127133791 -26.81286963675952, -94.407114935704 -26.847001329696653 C-94.31059168893496 -26.86724012624962, -94.21406844216592 -26.887478922802586, -94.00266045140367 -26.931806517013612 C-93.89395200027404 -26.94535701131557, -93.7852435491444 -26.95890750561752, -93.59258422736167 -26.982922465033347 C-93.43148240443254 -26.989585685717714, -93.27038058150342 -26.99624890640208, -93.1796875 -27 C-93.1796875 -27, -93.1796875 -27, -93.1796875 -27\">\u003C/path>\u003Cpath style=\"\" stroke-dasharray=\"0 0\" fill=\"none\" stroke-width=\"1.3\" stroke=\"#9370DB\" d=\"M-93.1796875 -27 C-24.838240098401187 -27, 43.50320730319763 -27, 93.1796875 -27 M-93.1796875 -27 C-29.02549269097959 -27, 35.12870211804082 -27, 93.1796875 -27 M93.1796875 -27 C93.1796875 -27, 93.1796875 -27, 93.1796875 -27 M93.1796875 -27 C93.1796875 -27, 93.1796875 -27, 93.1796875 -27 M93.1796875 -27 C93.2746407442536 -26.996072704767364, 93.3695939885072 -26.99214540953473, 93.59258422736166 -26.982922465033347 M93.1796875 -27 C93.30728413242299 -26.994722564245656, 93.43488076484599 -26.989445128491308, 93.59258422736166 -26.982922465033347 M93.59258422736166 -26.982922465033347 C93.7539173336862 -26.96281231430219, 93.91525044001074 -26.942702163571038, 94.00266045140367 -26.931806517013612 M93.59258422736166 -26.982922465033347 C93.7185271269903 -26.96722369896635, 93.84447002661894 -26.951524932899357, 94.00266045140367 -26.931806517013612 M94.00266045140367 -26.931806517013612 C94.08754176813164 -26.914008776490896, 94.17242308485962 -26.896211035968182, 94.407114935704 -26.847001329696653 M94.00266045140367 -26.931806517013612 C94.16113010957072 -26.8985789238812, 94.31959976773777 -26.865351330748787, 94.407114935704 -26.847001329696653 M94.407114935704 -26.847001329696653 C94.49263273923032 -26.821541576495825, 94.57815054275663 -26.796081823294998, 94.80318484602341 -26.729086208503173 M94.407114935704 -26.847001329696653 C94.55745966560909 -26.802241764312697, 94.70780439551417 -26.75748219892874, 94.80318484602341 -26.729086208503173 M94.80318484602341 -26.729086208503173 C94.93068973696407 -26.67933364567032, 95.05819462790473 -26.62958108283746, 95.18816462326485 -26.578866633275286 M94.80318484602341 -26.729086208503173 C94.91948373385775 -26.683706241651066, 95.03578262169206 -26.638326274798956, 95.18816462326485 -26.578866633275286 M95.18816462326485 -26.578866633275286 C95.29601639694607 -26.52614111392271, 95.40386817062728 -26.47341559457013, 95.55942446518537 -26.397368756032446 M95.18816462326485 -26.578866633275286 C95.26842091460126 -26.539631723198315, 95.34867720593769 -26.50039681312134, 95.55942446518537 -26.397368756032446 M95.55942446518537 -26.397368756032446 C95.69101589294208 -26.318957284768786, 95.82260732069878 -26.240545813505122, 95.91442829061214 -26.185832391312644 M95.55942446518537 -26.397368756032446 C95.67563345016757 -26.328123231138846, 95.79184243514977 -26.258877706245247, 95.91442829061214 -26.185832391312644 M95.91442829061214 -26.185832391312644 C96.03482272565545 -26.099872416906425, 96.15521716069874 -26.013912442500207, 96.25075106344833 -25.94570254698197 M95.91442829061214 -26.185832391312644 C95.99724352595744 -26.126703449778372, 96.08005876130275 -26.067574508244096, 96.25075106344833 -25.94570254698197 M96.25075106344833 -25.94570254698197 C96.32895420015075 -25.879467868844426, 96.40715733685315 -25.813233190706885, 96.5660953581287 -25.678619553365657 M96.25075106344833 -25.94570254698197 C96.36911658910336 -25.84545206055743, 96.48748211475836 -25.745201574132896, 96.5660953581287 -25.678619553365657 M96.5660953581287 -25.678619553365657 C96.63127840406824 -25.613436507426123, 96.69646145000777 -25.54825346148659, 96.85830705336566 -25.386407858128706 M96.5660953581287 -25.678619553365657 C96.67860972203496 -25.56610518945941, 96.7911240859412 -25.45359082555316, 96.85830705336566 -25.386407858128706 M96.85830705336566 -25.386407858128706 C96.95051813328332 -25.27753444179983, 97.04272921320099 -25.16866102547095, 97.12539004698196 -25.07106356344834 M96.85830705336566 -25.386407858128706 C96.9234333481431 -25.30951338718668, 96.98855964292055 -25.232618916244654, 97.12539004698196 -25.07106356344834 M97.12539004698196 -25.07106356344834 C97.21812005082957 -24.941187112205615, 97.31085005467716 -24.81131066096289, 97.36551989131264 -24.734740790612136 M97.12539004698196 -25.07106356344834 C97.19352181219769 -24.975639088995997, 97.26165357741341 -24.880214614543654, 97.36551989131264 -24.734740790612136 M97.36551989131264 -24.734740790612136 C97.41893465383836 -24.645099252827332, 97.47234941636407 -24.555457715042525, 97.57705625603245 -24.37973696518537 M97.36551989131264 -24.734740790612136 C97.43045357959141 -24.62576800114133, 97.49538726787017 -24.51679521167053, 97.57705625603245 -24.37973696518537 M97.57705625603245 -24.37973696518537 C97.64760518114923 -24.2354268322824, 97.71815410626601 -24.091116699379434, 97.75855413327528 -24.008477123264846 M97.57705625603245 -24.37973696518537 C97.64759132557673 -24.235455174308957, 97.71812639512102 -24.091173383432544, 97.75855413327528 -24.008477123264846 M97.75855413327528 -24.008477123264846 C97.80549720781408 -23.88817233374883, 97.85244028235289 -23.767867544232814, 97.90877370850318 -23.623497346023417 M97.75855413327528 -24.008477123264846 C97.81227540146732 -23.87080131217084, 97.86599666965935 -23.73312550107683, 97.90877370850318 -23.623497346023417 M97.90877370850318 -23.623497346023417 C97.95007952048257 -23.484753569307067, 97.99138533246196 -23.346009792590717, 98.02668882969665 -23.227427435703994 M97.90877370850318 -23.623497346023417 C97.94632418796053 -23.497367508894882, 97.98387466741788 -23.371237671766345, 98.02668882969665 -23.227427435703994 M98.02668882969665 -23.227427435703994 C98.04390337569993 -23.145327501177636, 98.0611179217032 -23.063227566651282, 98.11149401701361 -22.82297295140367 M98.02668882969665 -23.227427435703994 C98.0568603894991 -23.08353266880927, 98.08703194930156 -22.939637901914544, 98.11149401701361 -22.82297295140367 M98.11149401701361 -22.82297295140367 C98.12443014819247 -22.719193210773785, 98.13736627937134 -22.6154134701439, 98.16260996503335 -22.412896727361662 M98.11149401701361 -22.82297295140367 C98.12537807763651 -22.711588474050163, 98.13926213825941 -22.600203996696653, 98.16260996503335 -22.412896727361662 M98.16260996503335 -22.412896727361662 C98.16765914469686 -22.29081881840172, 98.17270832436034 -22.168740909441784, 98.1796875 -22 M98.16260996503335 -22.412896727361662 C98.16943351777871 -22.247918432599594, 98.17625707052406 -22.082940137837525, 98.1796875 -22 M98.1796875 -22 C98.1796875 -22, 98.1796875 -22, 98.1796875 -22 M98.1796875 -22 C98.1796875 -22, 98.1796875 -22, 98.1796875 -22 M98.1796875 -22 C98.1796875 -11.217454076987469, 98.1796875 -0.43490815397493776, 98.1796875 22 M98.1796875 -22 C98.1796875 -5.16777215208122, 98.1796875 11.66445569583756, 98.1796875 22 M98.1796875 22 C98.1796875 22, 98.1796875 22, 98.1796875 22 M98.1796875 22 C98.1796875 22, 98.1796875 22, 98.1796875 22 M98.1796875 22 C98.17440718460207 22.127666255785545, 98.16912686920416 22.25533251157109, 98.16260996503335 22.412896727361662 M98.1796875 22 C98.17454501736397 22.124333766850995, 98.16940253472794 22.248667533701987, 98.16260996503335 22.412896727361662 M98.16260996503335 22.412896727361662 C98.15236571735707 22.495080909950254, 98.14212146968077 22.57726509253885, 98.11149401701361 22.82297295140367 M98.16260996503335 22.412896727361662 C98.14932194568301 22.51949948073484, 98.13603392633267 22.626102234108018, 98.11149401701361 22.82297295140367 M98.11149401701361 22.82297295140367 C98.08240319297684 22.961713453086542, 98.05331236894007 23.100453954769417, 98.02668882969665 23.227427435703994 M98.11149401701361 22.82297295140367 C98.09206616543958 22.915628624223245, 98.07263831386553 23.00828429704282, 98.02668882969665 23.227427435703994 M98.02668882969665 23.227427435703994 C98.00029012001285 23.316099138460917, 97.97389141032903 23.40477084121784, 97.90877370850318 23.623497346023417 M98.02668882969665 23.227427435703994 C98.00004890151756 23.316909377104007, 97.97340897333846 23.40639131850402, 97.90877370850318 23.623497346023417 M97.90877370850318 23.623497346023417 C97.85898849206745 23.751085920976223, 97.80920327563172 23.878674495929033, 97.75855413327528 24.008477123264846 M97.90877370850318 23.623497346023417 C97.86541889731247 23.73460620470062, 97.82206408612174 23.845715063377817, 97.75855413327528 24.008477123264846 M97.75855413327528 24.008477123264846 C97.71331112021667 24.101023185683374, 97.66806810715808 24.193569248101902, 97.57705625603245 24.379736965185366 M97.75855413327528 24.008477123264846 C97.70119107751 24.125815129301145, 97.64382802174472 24.243153135337444, 97.57705625603245 24.379736965185366 M97.57705625603245 24.379736965185366 C97.50956880801031 24.492995516488744, 97.44208135998818 24.606254067792122, 97.36551989131264 24.734740790612133 M97.57705625603245 24.379736965185366 C97.49588091581977 24.515966763518108, 97.41470557560709 24.65219656185085, 97.36551989131264 24.734740790612133 M97.36551989131264 24.734740790612133 C97.28368657758203 24.849355477765936, 97.20185326385143 24.96397016491974, 97.12539004698196 25.07106356344834 M97.36551989131264 24.734740790612133 C97.27846908678745 24.85666302829625, 97.19141828226226 24.978585265980367, 97.12539004698196 25.07106356344834 M97.12539004698196 25.07106356344834 C97.03129540831604 25.18216089338893, 96.93720076965012 25.293258223329513, 96.85830705336566 25.386407858128706 M97.12539004698196 25.07106356344834 C97.06569235101557 25.14154849988577, 97.0059946550492 25.2120334363232, 96.85830705336566 25.386407858128706 M96.85830705336566 25.386407858128706 C96.76341873207195 25.48129617942241, 96.66853041077825 25.576184500716117, 96.5660953581287 25.678619553365657 M96.85830705336566 25.386407858128706 C96.75535737698961 25.48935753450476, 96.65240770061355 25.592307210880815, 96.5660953581287 25.678619553365657 M96.5660953581287 25.678619553365657 C96.45398110296405 25.77357548376164, 96.3418668477994 25.86853141415762, 96.25075106344833 25.94570254698197 M96.5660953581287 25.678619553365657 C96.4684876993635 25.76128902334708, 96.3708800405983 25.8439584933285, 96.25075106344833 25.94570254698197 M96.25075106344833 25.94570254698197 C96.12443477921217 26.035890640444293, 95.99811849497601 26.126078733906617, 95.91442829061214 26.185832391312644 M96.25075106344833 25.94570254698197 C96.12356660241082 26.036510506766167, 95.9963821413733 26.12731846655036, 95.91442829061214 26.185832391312644 M95.91442829061214 26.185832391312644 C95.78625946520798 26.262204434244317, 95.65809063980383 26.338576477175994, 95.55942446518537 26.397368756032446 M95.91442829061214 26.185832391312644 C95.79057218640044 26.259634610209304, 95.66671608218876 26.333436829105967, 95.55942446518537 26.397368756032446 M95.55942446518537 26.397368756032446 C95.44374062194856 26.45392314088097, 95.32805677871174 26.510477525729495, 95.18816462326485 26.578866633275286 M95.55942446518537 26.397368756032446 C95.46374702411201 26.444142606834657, 95.36806958303863 26.49091645763687, 95.18816462326485 26.578866633275286 M95.18816462326485 26.578866633275286 C95.09134486769777 26.616645819130632, 94.9945251121307 26.654425004985978, 94.80318484602341 26.729086208503173 M95.18816462326485 26.578866633275286 C95.10876865031068 26.60984703805769, 95.02937267735652 26.640827442840095, 94.80318484602341 26.729086208503173 M94.80318484602341 26.729086208503173 C94.69425889774398 26.761514868337812, 94.58533294946454 26.79394352817245, 94.407114935704 26.847001329696653 M94.80318484602341 26.729086208503173 C94.68469959893879 26.764360794897165, 94.56621435185417 26.799635381291157, 94.407114935704 26.847001329696653 M94.407114935704 26.847001329696653 C94.25778390915374 26.878312753281772, 94.1084528826035 26.90962417686689, 94.00266045140367 26.931806517013612 M94.407114935704 26.847001329696653 C94.31505671898664 26.866303907899702, 94.22299850226928 26.885606486102752, 94.00266045140367 26.931806517013612 M94.00266045140367 26.931806517013612 C93.91386877859787 26.942874387486544, 93.82507710579208 26.95394225795948, 93.59258422736166 26.982922465033347 M94.00266045140367 26.931806517013612 C93.85975197469774 26.94962004005788, 93.71684349799183 26.96743356310215, 93.59258422736166 26.982922465033347 M93.59258422736166 26.982922465033347 C93.4814837466623 26.987517614905517, 93.37038326596294 26.992112764777687, 93.1796875 27 M93.59258422736166 26.982922465033347 C93.4393604269268 26.989259848297124, 93.28613662649194 26.9955972315609, 93.1796875 27 M93.1796875 27 C93.1796875 27, 93.1796875 27, 93.1796875 27 M93.1796875 27 C93.1796875 27, 93.1796875 27, 93.1796875 27 M93.1796875 27 C32.43673759589209 27, -28.30621230821582 27, -93.1796875 27 M93.1796875 27 C22.562749761043364 27, -48.05418797791327 27, -93.1796875 27 M-93.1796875 27 C-93.1796875 27, -93.1796875 27, -93.1796875 27 M-93.1796875 27 C-93.1796875 27, -93.1796875 27, -93.1796875 27 M-93.1796875 27 C-93.33685331299249 26.99349957389081, -93.49401912598498 26.986999147781617, -93.59258422736166 26.982922465033347 M-93.1796875 27 C-93.31965715306107 26.99421081232662, -93.45962680612215 26.988421624653242, -93.59258422736166 26.982922465033347 M-93.59258422736166 26.982922465033347 C-93.70623137605341 26.96875636272227, -93.81987852474516 26.954590260411194, -94.00266045140367 26.931806517013612 M-93.59258422736166 26.982922465033347 C-93.70412228137901 26.969019261099266, -93.81566033539636 26.95511605716519, -94.00266045140367 26.931806517013612 M-94.00266045140367 26.931806517013612 C-94.1262654017018 26.905889284370065, -94.24987035199995 26.879972051726522, -94.407114935704 26.847001329696653 M-94.00266045140367 26.931806517013612 C-94.08862299463301 26.91378206713412, -94.17458553786237 26.895757617254628, -94.407114935704 26.847001329696653 M-94.407114935704 26.847001329696653 C-94.54187548861385 26.806881374823913, -94.67663604152371 26.76676141995117, -94.80318484602341 26.729086208503173 M-94.407114935704 26.847001329696653 C-94.56154479759451 26.80102556782667, -94.715974659485 26.755049805956684, -94.80318484602341 26.729086208503173 M-94.80318484602341 26.729086208503173 C-94.95433402222007 26.67010761693402, -95.10548319841674 26.611129025364864, -95.18816462326485 26.578866633275286 M-94.80318484602341 26.729086208503173 C-94.93724375407807 26.67677626025658, -95.07130266213272 26.624466312009986, -95.18816462326485 26.578866633275286 M-95.18816462326485 26.578866633275286 C-95.26606228248615 26.540784788178023, -95.34395994170745 26.50270294308076, -95.55942446518537 26.397368756032446 M-95.18816462326485 26.578866633275286 C-95.31388837179546 26.51740403780771, -95.43961212032606 26.455941442340134, -95.55942446518537 26.397368756032446 M-95.55942446518537 26.397368756032446 C-95.6916277961525 26.318592669597276, -95.82383112711963 26.239816583162103, -95.91442829061214 26.185832391312644 M-95.55942446518537 26.397368756032446 C-95.64809835163479 26.344530588549215, -95.73677223808421 26.291692421065985, -95.91442829061214 26.185832391312644 M-95.91442829061214 26.185832391312644 C-96.02151934347613 26.10937084921551, -96.12861039634014 26.032909307118377, -96.25075106344833 25.94570254698197 M-95.91442829061214 26.185832391312644 C-96.01364093997212 26.114995921199306, -96.1128535893321 26.044159451085967, -96.25075106344833 25.94570254698197 M-96.25075106344833 25.94570254698197 C-96.3753218132333 25.840196503806787, -96.49989256301825 25.734690460631604, -96.5660953581287 25.67861955336566 M-96.25075106344833 25.94570254698197 C-96.33081789801912 25.87788939726819, -96.41088473258989 25.810076247554413, -96.5660953581287 25.67861955336566 M-96.5660953581287 25.67861955336566 C-96.6413189846794 25.603395926814972, -96.71654261123008 25.528172300264284, -96.85830705336566 25.386407858128706 M-96.5660953581287 25.67861955336566 C-96.67332969604124 25.57138521545313, -96.78056403395377 25.464150877540597, -96.85830705336566 25.386407858128706 M-96.85830705336566 25.386407858128706 C-96.93553796729317 25.295221490362522, -97.01276888122068 25.204035122596334, -97.12539004698196 25.07106356344834 M-96.85830705336566 25.386407858128706 C-96.94039416008307 25.28948779437002, -97.02248126680047 25.192567730611337, -97.12539004698196 25.07106356344834 M-97.12539004698196 25.07106356344834 C-97.21227860700809 24.94936856332378, -97.29916716703421 24.827673563199223, -97.36551989131264 24.734740790612133 M-97.12539004698196 25.07106356344834 C-97.20921794719574 24.95365528410882, -97.2930458474095 24.836247004769298, -97.36551989131264 24.734740790612133 M-97.36551989131264 24.734740790612133 C-97.4253241095999 24.634376362506572, -97.48512832788715 24.53401193440101, -97.57705625603245 24.37973696518537 M-97.36551989131264 24.734740790612133 C-97.40866582691858 24.662332567978584, -97.45181176252451 24.589924345345036, -97.57705625603245 24.37973696518537 M-97.57705625603245 24.37973696518537 C-97.64828425167397 24.234037771322033, -97.71951224731549 24.088338577458696, -97.75855413327528 24.00847712326485 M-97.57705625603245 24.37973696518537 C-97.63925982856301 24.25249752384639, -97.70146340109358 24.12525808250741, -97.75855413327528 24.00847712326485 M-97.75855413327528 24.00847712326485 C-97.81306849428987 23.868768789460717, -97.86758285530445 23.729060455656583, -97.90877370850318 23.623497346023417 M-97.75855413327528 24.00847712326485 C-97.79423626759103 23.917031650199604, -97.82991840190678 23.825586177134358, -97.90877370850318 23.623497346023417 M-97.90877370850318 23.623497346023417 C-97.93682781876039 23.52926525075692, -97.9648819290176 23.435033155490427, -98.02668882969665 23.227427435703994 M-97.90877370850318 23.623497346023417 C-97.93977359306203 23.519370569297383, -97.97077347762088 23.41524379257135, -98.02668882969665 23.227427435703994 M-98.02668882969665 23.227427435703994 C-98.04407571217403 23.144505590844474, -98.06146259465142 23.06158374598495, -98.11149401701361 22.82297295140367 M-98.02668882969665 23.227427435703994 C-98.05471888699529 23.09374596257365, -98.08274894429391 22.960064489443308, -98.11149401701361 22.82297295140367 M-98.11149401701361 22.82297295140367 C-98.12938289787554 22.67945991877119, -98.14727177873748 22.53594688613871, -98.16260996503335 22.412896727361662 M-98.11149401701361 22.82297295140367 C-98.13190443795166 22.659230935973397, -98.15231485888971 22.495488920543124, -98.16260996503335 22.412896727361662 M-98.16260996503335 22.412896727361662 C-98.16847217612661 22.271161530786735, -98.17433438721989 22.129426334211807, -98.1796875 22 M-98.16260996503335 22.412896727361662 C-98.16879510877915 22.26335373910919, -98.17498025252493 22.113810750856718, -98.1796875 22 M-98.1796875 22 C-98.1796875 22, -98.1796875 22, -98.1796875 22 M-98.1796875 22 C-98.1796875 22, -98.1796875 22, -98.1796875 22 M-98.1796875 22 C-98.1796875 9.56504777724823, -98.1796875 -2.86990444550354, -98.1796875 -22 M-98.1796875 22 C-98.1796875 4.648731635242939, -98.1796875 -12.702536729514122, -98.1796875 -22 M-98.1796875 -22 C-98.1796875 -22, -98.1796875 -22, -98.1796875 -22 M-98.1796875 -22 C-98.1796875 -22, -98.1796875 -22, -98.1796875 -22 M-98.1796875 -22 C-98.17488481231283 -22.11611828243646, -98.17008212462565 -22.232236564872924, -98.16260996503335 -22.41289672736166 M-98.1796875 -22 C-98.17492302432666 -22.115194401121705, -98.17015854865332 -22.230388802243407, -98.16260996503335 -22.41289672736166 M-98.16260996503335 -22.41289672736166 C-98.15136737969054 -22.50309004519022, -98.14012479434771 -22.593283363018784, -98.11149401701361 -22.82297295140367 M-98.16260996503335 -22.41289672736166 C-98.14468708705064 -22.556682500918676, -98.12676420906791 -22.700468274475693, -98.11149401701361 -22.82297295140367 M-98.11149401701361 -22.82297295140367 C-98.08951927947862 -22.92777528034765, -98.06754454194365 -23.032577609291625, -98.02668882969665 -23.227427435703994 M-98.11149401701361 -22.82297295140367 C-98.08510846186427 -22.94881143414908, -98.05872290671492 -23.07464991689449, -98.02668882969665 -23.227427435703994 M-98.02668882969665 -23.227427435703994 C-97.989884761007 -23.35105012325887, -97.95308069231737 -23.474672810813747, -97.90877370850318 -23.623497346023417 M-98.02668882969665 -23.227427435703994 C-97.98859133913207 -23.355394650753123, -97.95049384856749 -23.48336186580225, -97.90877370850318 -23.623497346023417 M-97.90877370850318 -23.623497346023417 C-97.85249822541174 -23.76771904889956, -97.79622274232028 -23.911940751775706, -97.75855413327528 -24.008477123264846 M-97.90877370850318 -23.623497346023417 C-97.87156595219508 -23.718852653169044, -97.83435819588699 -23.814207960314675, -97.75855413327528 -24.008477123264846 M-97.75855413327528 -24.008477123264846 C-97.70597677789515 -24.116025822696248, -97.65339942251502 -24.22357452212765, -97.57705625603245 -24.379736965185366 M-97.75855413327528 -24.008477123264846 C-97.71882974054819 -24.089734667365576, -97.6791053478211 -24.170992211466306, -97.57705625603245 -24.379736965185366 M-97.57705625603245 -24.379736965185366 C-97.50539445382144 -24.50000098671935, -97.43373265161044 -24.620265008253337, -97.36551989131264 -24.734740790612133 M-97.57705625603245 -24.379736965185366 C-97.52114560716987 -24.47356714069491, -97.46523495830728 -24.567397316204456, -97.36551989131264 -24.734740790612133 M-97.36551989131264 -24.734740790612133 C-97.31572858855262 -24.804477849135843, -97.2659372857926 -24.874214907659553, -97.12539004698196 -25.07106356344834 M-97.36551989131264 -24.734740790612133 C-97.29110057043843 -24.83897153468631, -97.21668124956422 -24.943202278760484, -97.12539004698196 -25.07106356344834 M-97.12539004698196 -25.07106356344834 C-97.0484377991352 -25.161920910794723, -96.97148555128842 -25.252778258141102, -96.85830705336566 -25.386407858128706 M-97.12539004698196 -25.07106356344834 C-97.04336125429965 -25.167914775955882, -96.96133246161736 -25.264765988463424, -96.85830705336566 -25.386407858128706 M-96.85830705336566 -25.386407858128706 C-96.75180458208992 -25.492910329404452, -96.64530211081416 -25.599412800680202, -96.5660953581287 -25.678619553365657 M-96.85830705336566 -25.386407858128706 C-96.77697249412806 -25.46774241736631, -96.69563793489044 -25.549076976603917, -96.5660953581287 -25.678619553365657 M-96.5660953581287 -25.678619553365657 C-96.48243936492885 -25.749472565374035, -96.39878337172901 -25.82032557738241, -96.25075106344833 -25.945702546981966 M-96.5660953581287 -25.678619553365657 C-96.48575457960465 -25.746664721772525, -96.40541380108058 -25.814709890179397, -96.25075106344833 -25.945702546981966 M-96.25075106344833 -25.945702546981966 C-96.13942935139251 -26.02518472168326, -96.02810763933668 -26.10466689638455, -95.91442829061214 -26.185832391312644 M-96.25075106344833 -25.945702546981966 C-96.1178840298613 -26.040567785582606, -95.98501699627425 -26.135433024183246, -95.91442829061214 -26.185832391312644 M-95.91442829061214 -26.185832391312644 C-95.82867673113059 -26.236929229888894, -95.74292517164902 -26.288026068465143, -95.55942446518537 -26.397368756032446 M-95.91442829061214 -26.185832391312644 C-95.825953482847 -26.23855193364834, -95.73747867508187 -26.291271475984033, -95.55942446518537 -26.397368756032446 M-95.55942446518537 -26.397368756032446 C-95.42916274268482 -26.461049831792067, -95.29890102018427 -26.524730907551685, -95.18816462326485 -26.578866633275286 M-95.55942446518537 -26.397368756032446 C-95.41947332782094 -26.465786698080706, -95.27952219045652 -26.53420464012897, -95.18816462326485 -26.578866633275286 M-95.18816462326485 -26.578866633275286 C-95.09876599416275 -26.613750086598213, -95.00936736506065 -26.648633539921143, -94.80318484602341 -26.729086208503173 M-95.18816462326485 -26.578866633275286 C-95.04737494649837 -26.63380293562311, -94.90658526973188 -26.688739237970932, -94.80318484602341 -26.729086208503173 M-94.80318484602341 -26.729086208503173 C-94.66070319992195 -26.771504832413157, -94.51822155382048 -26.813923456323142, -94.407114935704 -26.847001329696653 M-94.80318484602341 -26.729086208503173 C-94.65118788458756 -26.774337664525916, -94.49919092315169 -26.819589120548656, -94.407114935704 -26.847001329696653 M-94.407114935704 -26.847001329696653 C-94.27970157593958 -26.87371710183155, -94.15228821617518 -26.900432873966444, -94.00266045140367 -26.931806517013612 M-94.407114935704 -26.847001329696653 C-94.2898048680931 -26.87159866424004, -94.1724948004822 -26.896195998783423, -94.00266045140367 -26.931806517013612 M-94.00266045140367 -26.931806517013612 C-93.87480232086416 -26.94774401636468, -93.74694419032465 -26.96368151571575, -93.59258422736167 -26.982922465033347 M-94.00266045140367 -26.931806517013612 C-93.85860935721396 -26.949762467178704, -93.71455826302426 -26.967718417343796, -93.59258422736167 -26.982922465033347 M-93.59258422736167 -26.982922465033347 C-93.4624548028166 -26.988304657844754, -93.3323253782715 -26.993686850656157, -93.1796875 -27 M-93.59258422736167 -26.982922465033347 C-93.48329507719613 -26.987442697720475, -93.37400592703061 -26.9919629304076, -93.1796875 -27 M-93.1796875 -27 C-93.1796875 -27, -93.1796875 -27, -93.1796875 -27 M-93.1796875 -27 C-93.1796875 -27, -93.1796875 -27, -93.1796875 -27\">\u003C/path>\u003C/g>\u003Cg transform=\"translate(-83.1796875, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"166.359375\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>Rounded square shape\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003C/g>\u003C/g>\u003Cg transform=\"translate(1019.1171875, 228.375)\" id=\"flowchart-sq-0\" class=\"node default green\">\u003Crect height=\"54\" width=\"159.640625\" y=\"-27\" x=\"-79.8203125\" style=\"fill:#9f6 !important;stroke:#333 !important;stroke-width:2px !important\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-49.8203125, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"99.640625\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>Square shape\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(1019.1171875, 580.8125)\" id=\"flowchart-ci-1\" class=\"node default\">\u003Ccircle cy=\"0\" cx=\"0\" r=\"51.96875\" style=\"\" class=\"basic label-container\">\u003C/circle>\u003Cg transform=\"translate(-44.46875, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"88.9375\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>Circle shape\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(1352.37890625, 228.375)\" id=\"flowchart-e-8\" class=\"node default green\">\u003Ccircle cy=\"0\" cx=\"0\" r=\"107.5\" style=\"fill:#9f6 !important;stroke:#333 !important;stroke-width:2px !important\" class=\"basic label-container\">\u003C/circle>\u003Cg transform=\"translate(-100, -24)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"48\" width=\"200\">\u003Cdiv style=\"display: table; white-space: break-spaces; line-height: 1.5; max-width: 200px; text-align: center; width: 200px;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>Inner / circle&#x3C;br>and some odd &#x3C;br>special characters\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(1247.94921875, 580.8125)\" id=\"flowchart-od3-9\" class=\"node default\">\u003Cg transform=\"translate(10.875,0)\" class=\"basic label-container\">\u003Cpath style=\"\" fill=\"#ECECFF\" stroke-width=\"0\" stroke=\"none\" d=\"M-129.25 -43.5 C-122.29546173476177 -29.59092346952354, -115.34092346952355 -15.68184693904708, -107.5 0 C-114.8852609425338 14.770521885067602, -122.27052188506761 29.541043770135204, -129.25 43.5 C-38.346452314343836 43.5, 52.55709537131233 43.5, 107.5 43.5 C107.5 20.350056285669762, 107.5 -2.799887428660476, 107.5 -43.5 C44.621394787133895 -43.5, -18.25721042573221 -43.5, -129.25 -43.5\">\u003C/path>\u003Cpath style=\"\" stroke-dasharray=\"0 0\" fill=\"none\" stroke-width=\"1.3\" stroke=\"#9370DB\" d=\"M-129.25 -43.5 C-123.55275320856566 -32.10550641713133, -117.85550641713134 -20.711012834262664, -107.5 0 M-129.25 -43.5 C-122.84654858588979 -30.69309717177959, -116.44309717177958 -17.88619434355918, -107.5 0 M-107.5 0 C-112.93008193923205 10.860163878464116, -118.36016387846412 21.72032775692823, -129.25 43.5 M-107.5 0 C-113.99837215027753 12.99674430055505, -120.49674430055505 25.9934886011101, -129.25 43.5 M-129.25 43.5 C-44.598375330761016 43.5, 40.05324933847797 43.5, 107.5 43.5 M-129.25 43.5 C-48.89390966356211 43.5, 31.462180672875775 43.5, 107.5 43.5 M107.5 43.5 C107.5 9.873650682479962, 107.5 -23.752698635040076, 107.5 -43.5 M107.5 43.5 C107.5 22.455694804278174, 107.5 1.4113896085563482, 107.5 -43.5 M107.5 -43.5 C16.41979280154905 -43.5, -74.6604143969019 -43.5, -129.25 -43.5 M107.5 -43.5 C59.584761871389794 -43.5, 11.669523742779589 -43.5, -129.25 -43.5\">\u003C/path>\u003C/g>\u003Cg transform=\"translate(-89.125, -36)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"72\" width=\"200\">\u003Cdiv style=\"display: table; white-space: break-spaces; line-height: 1.5; max-width: 200px; text-align: center; width: 200px;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>Really long text with linebreak&#x3C;br>in an Odd shape\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(1456.80859375, 580.8125)\" id=\"flowchart-f-11\" class=\"node default\">\u003Cg class=\"basic label-container outer-path\">\u003Cpath style=\"\" fill=\"#ECECFF\" stroke-width=\"0\" stroke=\"none\" d=\"M-35.484375 -27 C-14.410814862029781 -27, 6.662745275940438 -27, 35.484375 -27 C35.484375 -27, 35.484375 -27, 35.484375 -27 C35.62162476758712 -26.994323307621954, 35.75887453517424 -26.98864661524391, 35.89727172736166 -26.982922465033347 C35.9814852226878 -26.97242526378812, 36.06569871801394 -26.961928062542896, 36.30734795140367 -26.931806517013612 C36.46499730465865 -26.898750923733903, 36.622646657913634 -26.865695330454194, 36.711802435703994 -26.847001329696653 C36.80558100429058 -26.819082240182077, 36.89935957287716 -26.7911631506675, 37.10787234602342 -26.729086208503173 C37.185240792154836 -26.69889694714201, 37.26260923828625 -26.66870768578085, 37.492852123264846 -26.578866633275286 C37.60210245034763 -26.525457402826234, 37.71135277743041 -26.472048172377182, 37.864111965185366 -26.397368756032446 C37.963830755313495 -26.337949254474673, 38.063549545441624 -26.278529752916903, 38.219115790612136 -26.185832391312644 C38.28990938519714 -26.135286736304067, 38.36070297978215 -26.08474108129549, 38.55543856344834 -25.94570254698197 C38.6207949956026 -25.890348472574075, 38.68615142775687 -25.83499439816618, 38.870782858128706 -25.678619553365657 C38.93047368373956 -25.618928727754803, 38.990164509350414 -25.55923790214395, 39.16299455336566 -25.386407858128706 C39.224632356624824 -25.31363224133922, 39.28627015988399 -25.24085662454974, 39.43007754698197 -25.07106356344834 C39.51865890026472 -24.946997658851274, 39.60724025354747 -24.822931754254206, 39.670207391312644 -24.734740790612136 C39.71272744936269 -24.663382926042953, 39.755247507412726 -24.592025061473773, 39.88174375603245 -24.37973696518537 C39.930858198974214 -24.27927176636557, 39.97997264191597 -24.178806567545774, 40.06324163327529 -24.008477123264846 C40.09994656753093 -23.91441043860034, 40.136651501786574 -23.820343753935834, 40.213461208503176 -23.623497346023417 C40.246683452482976 -23.51190579558861, 40.27990569646277 -23.4003142451538, 40.33137632969665 -23.227427435703994 C40.3551868501744 -23.113869856439944, 40.378997370652144 -23.000312277175894, 40.41618151701361 -22.82297295140367 C40.43478306211824 -22.67374259036433, 40.453384607222866 -22.524512229324994, 40.46729746503335 -22.412896727361662 C40.47201612700617 -22.298809999393576, 40.476734788979 -22.18472327142549, 40.484375 -22 C40.484375 -22, 40.484375 -22, 40.484375 -22 C40.484375 -9.931094681130805, 40.484375 2.13781063773839, 40.484375 22 C40.484375 22, 40.484375 22, 40.484375 22 C40.48065604272943 22.089916096744446, 40.47693708545885 22.179832193488892, 40.46729746503335 22.412896727361662 C40.454997202402886 22.511575230835323, 40.442696939772425 22.610253734308987, 40.41618151701361 22.82297295140367 C40.38447020749283 22.97421112143186, 40.35275889797205 23.125449291460047, 40.33137632969665 23.227427435703994 C40.29961159323559 23.334123304682578, 40.267846856774526 23.44081917366116, 40.213461208503176 23.623497346023417 C40.154490607548475 23.774626044030278, 40.09552000659377 23.925754742037142, 40.06324163327529 24.008477123264846 C40.02007028582859 24.096785525941716, 39.97689893838189 24.18509392861858, 39.88174375603245 24.379736965185366 C39.82917085416199 24.46796567849677, 39.77659795229152 24.55619439180818, 39.670207391312644 24.734740790612133 C39.60142475771221 24.831076862956476, 39.532642124111774 24.92741293530082, 39.43007754698197 25.07106356344834 C39.325721404050036 25.19427662858161, 39.221365261118095 25.317489693714876, 39.16299455336566 25.386407858128706 C39.05877379994017 25.490628611554197, 38.954553046514675 25.594849364979687, 38.870782858128706 25.678619553365657 C38.76630970560337 25.767103799948533, 38.66183655307803 25.85558804653141, 38.55543856344834 25.94570254698197 C38.42186978872454 26.041068819124018, 38.28830101400074 26.136435091266065, 38.219115790612136 26.185832391312644 C38.093341270983814 26.260777737674953, 37.96756675135549 26.335723084037266, 37.864111965185366 26.397368756032446 C37.75805225271335 26.44921819004362, 37.65199254024133 26.501067624054798, 37.492852123264846 26.578866633275286 C37.38267064335993 26.621859580146147, 37.27248916345501 26.664852527017008, 37.10787234602342 26.729086208503173 C37.02394423377538 26.754072690105087, 36.94001612152734 26.779059171706997, 36.711802435703994 26.847001329696653 C36.577037366135336 26.87525859327558, 36.44227229656668 26.903515856854504, 36.30734795140367 26.931806517013612 C36.19599380839304 26.94568679646461, 36.08463966538242 26.959567075915608, 35.89727172736166 26.982922465033347 C35.77371602415991 26.988032766718806, 35.65016032095815 26.99314306840427, 35.484375 27 C35.484375 27, 35.484375 27, 35.484375 27 C17.299299011096412 27, -0.8857769778071756 27, -35.484375 27 C-35.484375 27, -35.484375 27, -35.484375 27 C-35.59002476493438 26.99563029339948, -35.695674529868754 26.99126058679896, -35.89727172736166 26.982922465033347 C-36.02071756811328 26.96753495703077, -36.14416340886489 26.9521474490282, -36.30734795140367 26.931806517013612 C-36.41314952869485 26.909622259133197, -36.51895110598604 26.887438001252782, -36.711802435703994 26.847001329696653 C-36.81760497537949 26.81550254889214, -36.923407515054976 26.784003768087633, -37.10787234602342 26.729086208503173 C-37.216022695756465 26.686885811084746, -37.324173045489516 26.64468541366632, -37.492852123264846 26.578866633275286 C-37.60961820176566 26.521783175844934, -37.72638428026647 26.464699718414586, -37.864111965185366 26.397368756032446 C-37.966427215277584 26.336402100155183, -38.06874246536981 26.27543544427792, -38.219115790612136 26.185832391312644 C-38.299016090258945 26.128784673864423, -38.37891638990575 26.071736956416203, -38.55543856344834 25.94570254698197 C-38.670085023133936 25.848601948756855, -38.78473148281953 25.75150135053174, -38.870782858128706 25.67861955336566 C-38.94056674319418 25.608835668300184, -39.01035062825965 25.53905178323471, -39.16299455336566 25.386407858128706 C-39.21680330392807 25.32287598639107, -39.27061205449048 25.25934411465344, -39.43007754698197 25.07106356344834 C-39.511039694850986 24.957669020000477, -39.59200184272001 24.844274476552613, -39.670207391312644 24.734740790612133 C-39.7284907593453 24.63692867855398, -39.786774127377946 24.539116566495824, -39.88174375603244 24.37973696518537 C-39.95235164826416 24.235306213120893, -40.02295954049588 24.090875461056417, -40.06324163327528 24.00847712326485 C-40.10814380245017 23.893402725934273, -40.153045971625055 23.7783283286037, -40.213461208503176 23.623497346023417 C-40.25654057599565 23.478796301351064, -40.29961994348813 23.334095256678715, -40.33137632969665 23.227427435703994 C-40.34945894558016 23.1411874860812, -40.367541561463675 23.054947536458407, -40.41618151701361 22.82297295140367 C-40.42812884861952 22.727125826932106, -40.44007618022543 22.63127870246054, -40.46729746503335 22.412896727361662 C-40.47233117498652 22.291192841513265, -40.477364884939696 22.16948895566487, -40.484375 22 C-40.484375 22, -40.484375 22, -40.484375 22 C-40.484375 11.45882605973358, -40.484375 0.9176521194671601, -40.484375 -22 C-40.484375 -22, -40.484375 -22, -40.484375 -22 C-40.47850356864774 -22.141958121884137, -40.47263213729548 -22.283916243768278, -40.46729746503335 -22.41289672736166 C-40.454633423578784 -22.51449363599756, -40.44196938212422 -22.61609054463346, -40.41618151701361 -22.82297295140367 C-40.3940171713501 -22.92867956297787, -40.37185282568658 -23.034386174552065, -40.33137632969665 -23.227427435703994 C-40.291244883269925 -23.362226588063272, -40.2511134368432 -23.49702574042255, -40.213461208503176 -23.623497346023417 C-40.16858070357568 -23.738516222646247, -40.12370019864819 -23.853535099269077, -40.06324163327529 -24.008477123264846 C-40.02331211001028 -24.090154268587572, -39.983382586745265 -24.1718314139103, -39.88174375603245 -24.379736965185366 C-39.799509690019434 -24.51774353466427, -39.71727562400641 -24.655750104143177, -39.670207391312644 -24.734740790612133 C-39.59455155456897 -24.8407033829163, -39.51889571782531 -24.946665975220466, -39.43007754698197 -25.07106356344834 C-39.33732948724769 -25.180570990648643, -39.244581427513424 -25.290078417848942, -39.16299455336566 -25.386407858128706 C-39.05512245191 -25.494279959584365, -38.94725035045434 -25.602152061040023, -38.870782858128706 -25.678619553365657 C-38.78845718140734 -25.748345844791093, -38.70613150468597 -25.81807213621653, -38.55543856344834 -25.945702546981966 C-38.472736697781556 -26.004750544121585, -38.39003483211478 -26.063798541261203, -38.219115790612136 -26.185832391312644 C-38.1418106104587 -26.231896280241187, -38.06450543030527 -26.27796016916973, -37.864111965185366 -26.397368756032446 C-37.78660994324948 -26.435257185846524, -37.709107921313596 -26.473145615660602, -37.492852123264846 -26.578866633275286 C-37.41325538629467 -26.60992537641983, -37.3336586493245 -26.640984119564376, -37.10787234602342 -26.729086208503173 C-36.9648817331079 -26.771656358398847, -36.82189112019238 -26.814226508294517, -36.711802435703994 -26.847001329696653 C-36.62457997095845 -26.865289957337385, -36.5373575062129 -26.883578584978117, -36.30734795140367 -26.931806517013612 C-36.20360226464653 -26.94473840338166, -36.09985657788939 -26.95767028974971, -35.89727172736166 -26.982922465033347 C-35.788288735176586 -26.987430034932736, -35.67930574299151 -26.991937604832124, -35.484375 -27 C-35.484375 -27, -35.484375 -27, -35.484375 -27\">\u003C/path>\u003Cpath style=\"\" stroke-dasharray=\"0 0\" fill=\"none\" stroke-width=\"1.3\" stroke=\"#9370DB\" d=\"M-35.484375 -27 C-9.328542128373552 -27, 16.827290743252895 -27, 35.484375 -27 M-35.484375 -27 C-12.390395362813432 -27, 10.703584274373135 -27, 35.484375 -27 M35.484375 -27 C35.484375 -27, 35.484375 -27, 35.484375 -27 M35.484375 -27 C35.484375 -27, 35.484375 -27, 35.484375 -27 M35.484375 -27 C35.610704334415665 -26.994774980078958, 35.73703366883132 -26.989549960157916, 35.89727172736166 -26.982922465033347 M35.484375 -27 C35.63973466462703 -26.993574276739782, 35.795094329254056 -26.987148553479564, 35.89727172736166 -26.982922465033347 M35.89727172736166 -26.982922465033347 C35.98747988687406 -26.97167802967657, 36.07768804638646 -26.96043359431979, 36.30734795140367 -26.931806517013612 M35.89727172736166 -26.982922465033347 C36.004642941341004 -26.969538657168346, 36.112014155320345 -26.956154849303342, 36.30734795140367 -26.931806517013612 M36.30734795140367 -26.931806517013612 C36.41278879736524 -26.909697896539054, 36.518229643326805 -26.887589276064492, 36.711802435703994 -26.847001329696653 M36.30734795140367 -26.931806517013612 C36.452243544417165 -26.901425106041824, 36.59713913743066 -26.871043695070032, 36.711802435703994 -26.847001329696653 M36.711802435703994 -26.847001329696653 C36.8623592290147 -26.802178630301448, 37.0129160223254 -26.757355930906243, 37.10787234602342 -26.729086208503173 M36.711802435703994 -26.847001329696653 C36.80281388662499 -26.81990604680407, 36.893825337545984 -26.792810763911493, 37.10787234602342 -26.729086208503173 M37.10787234602342 -26.729086208503173 C37.21285426617293 -26.688122136144695, 37.31783618632245 -26.647158063786218, 37.492852123264846 -26.578866633275286 M37.10787234602342 -26.729086208503173 C37.21795297730495 -26.68613261288727, 37.32803360858647 -26.64317901727137, 37.492852123264846 -26.578866633275286 M37.492852123264846 -26.578866633275286 C37.59443472367914 -26.52920592598029, 37.69601732409343 -26.479545218685292, 37.864111965185366 -26.397368756032446 M37.492852123264846 -26.578866633275286 C37.62635412087599 -26.51360148353876, 37.75985611848713 -26.44833633380224, 37.864111965185366 -26.397368756032446 M37.864111965185366 -26.397368756032446 C37.99385648455434 -26.320057803293732, 38.12360100392332 -26.242746850555022, 38.219115790612136 -26.185832391312644 M37.864111965185366 -26.397368756032446 C37.98595054549509 -26.32476872044027, 38.10778912580482 -26.252168684848098, 38.219115790612136 -26.185832391312644 M38.219115790612136 -26.185832391312644 C38.34489831297259 -26.09602539650458, 38.47068083533304 -26.006218401696515, 38.55543856344834 -25.94570254698197 M38.219115790612136 -26.185832391312644 C38.30265523043282 -26.12618637772146, 38.38619467025351 -26.066540364130276, 38.55543856344834 -25.94570254698197 M38.55543856344834 -25.94570254698197 C38.681433949828616 -25.83898989815984, 38.807429336208884 -25.732277249337717, 38.870782858128706 -25.678619553365657 M38.55543856344834 -25.94570254698197 C38.637896875130075 -25.8758639194754, 38.72035518681181 -25.806025291968826, 38.870782858128706 -25.678619553365657 M38.870782858128706 -25.678619553365657 C38.96465331985238 -25.584749091641978, 39.05852378157606 -25.4908786299183, 39.16299455336566 -25.386407858128706 M38.870782858128706 -25.678619553365657 C38.960713040357476 -25.588689371136887, 39.050643222586245 -25.498759188908117, 39.16299455336566 -25.386407858128706 M39.16299455336566 -25.386407858128706 C39.223568692743946 -25.314888106910256, 39.28414283212224 -25.243368355691807, 39.43007754698197 -25.07106356344834 M39.16299455336566 -25.386407858128706 C39.25613648671736 -25.27643538522707, 39.34927842006906 -25.166462912325432, 39.43007754698197 -25.07106356344834 M39.43007754698197 -25.07106356344834 C39.51222301694645 -24.956011674286486, 39.59436848691092 -24.840959785124628, 39.670207391312644 -24.734740790612136 M39.43007754698197 -25.07106356344834 C39.49393951311773 -24.981619314694427, 39.55780147925349 -24.892175065940517, 39.670207391312644 -24.734740790612136 M39.670207391312644 -24.734740790612136 C39.73594347368798 -24.62442141009936, 39.80167955606332 -24.51410202958658, 39.88174375603245 -24.37973696518537 M39.670207391312644 -24.734740790612136 C39.7543536689804 -24.593525115912218, 39.83849994664815 -24.4523094412123, 39.88174375603245 -24.37973696518537 M39.88174375603245 -24.37973696518537 C39.925786002559306 -24.28964710996625, 39.96982824908616 -24.19955725474713, 40.06324163327529 -24.008477123264846 M39.88174375603245 -24.37973696518537 C39.94546426305236 -24.249394584752707, 40.00918477007227 -24.119052204320045, 40.06324163327529 -24.008477123264846 M40.06324163327529 -24.008477123264846 C40.09989029948782 -23.91455464123619, 40.13653896570034 -23.820632159207534, 40.213461208503176 -23.623497346023417 M40.06324163327529 -24.008477123264846 C40.09397164589032 -23.92972285043979, 40.12470165850535 -23.85096857761474, 40.213461208503176 -23.623497346023417 M40.213461208503176 -23.623497346023417 C40.25135978155326 -23.49619828312756, 40.28925835460335 -23.3688992202317, 40.33137632969665 -23.227427435703994 M40.213461208503176 -23.623497346023417 C40.25172717664429 -23.49496422477032, 40.28999314478539 -23.36643110351723, 40.33137632969665 -23.227427435703994 M40.33137632969665 -23.227427435703994 C40.36286539448278 -23.0772491994179, 40.39435445926891 -22.927070963131808, 40.41618151701361 -22.82297295140367 M40.33137632969665 -23.227427435703994 C40.35247234964708 -23.126815903086896, 40.37356836959751 -23.0262043704698, 40.41618151701361 -22.82297295140367 M40.41618151701361 -22.82297295140367 C40.43478319037521 -22.67374156142653, 40.453384863736794 -22.524510171449393, 40.46729746503335 -22.412896727361662 M40.41618151701361 -22.82297295140367 C40.4275290364263 -22.73193780301512, 40.43887655583899 -22.640902654626576, 40.46729746503335 -22.412896727361662 M40.46729746503335 -22.412896727361662 C40.47392432271229 -22.25267408084552, 40.480551180391245 -22.092451434329377, 40.484375 -22 M40.46729746503335 -22.412896727361662 C40.47386220710781 -22.254175897698037, 40.48042694918226 -22.095455068034415, 40.484375 -22 M40.484375 -22 C40.484375 -22, 40.484375 -22, 40.484375 -22 M40.484375 -22 C40.484375 -22, 40.484375 -22, 40.484375 -22 M40.484375 -22 C40.484375 -13.089218208877984, 40.484375 -4.178436417755968, 40.484375 22 M40.484375 -22 C40.484375 -5.56975122306493, 40.484375 10.86049755387014, 40.484375 22 M40.484375 22 C40.484375 22, 40.484375 22, 40.484375 22 M40.484375 22 C40.484375 22, 40.484375 22, 40.484375 22 M40.484375 22 C40.480689935556704 22.089096643732454, 40.477004871113415 22.178193287464907, 40.46729746503335 22.412896727361662 M40.484375 22 C40.47780154245312 22.15893155035879, 40.471228084906244 22.317863100717577, 40.46729746503335 22.412896727361662 M40.46729746503335 22.412896727361662 C40.45379932657824 22.521185155214525, 40.44030118812314 22.62947358306739, 40.41618151701361 22.82297295140367 M40.46729746503335 22.412896727361662 C40.45122493020429 22.541838176142726, 40.43515239537524 22.67077962492379, 40.41618151701361 22.82297295140367 M40.41618151701361 22.82297295140367 C40.39489608223919 22.924487844739375, 40.37361064746477 23.026002738075082, 40.33137632969665 23.227427435703994 M40.41618151701361 22.82297295140367 C40.39258890915821 22.935491257716603, 40.368996301302815 23.048009564029538, 40.33137632969665 23.227427435703994 M40.33137632969665 23.227427435703994 C40.287097346627014 23.376157918070646, 40.24281836355737 23.524888400437302, 40.213461208503176 23.623497346023417 M40.33137632969665 23.227427435703994 C40.29347913066607 23.354721883349686, 40.2555819316355 23.48201633099538, 40.213461208503176 23.623497346023417 M40.213461208503176 23.623497346023417 C40.17260311279877 23.72820767128516, 40.13174501709436 23.8329179965469, 40.06324163327529 24.008477123264846 M40.213461208503176 23.623497346023417 C40.17510111806505 23.721805832446886, 40.136741027626925 23.820114318870356, 40.06324163327529 24.008477123264846 M40.06324163327529 24.008477123264846 C40.01389462949074 24.109418032892066, 39.9645476257062 24.21035894251928, 39.88174375603245 24.379736965185366 M40.06324163327529 24.008477123264846 C40.014287841989365 24.108613703870166, 39.96533405070345 24.20875028447548, 39.88174375603245 24.379736965185366 M39.88174375603245 24.379736965185366 C39.80725854929939 24.5047392708786, 39.732773342566325 24.629741576571828, 39.670207391312644 24.734740790612133 M39.88174375603245 24.379736965185366 C39.80536544205573 24.50791631476101, 39.72898712807902 24.636095664336654, 39.670207391312644 24.734740790612133 M39.670207391312644 24.734740790612133 C39.5927731231038 24.843194231162737, 39.51533885489494 24.951647671713346, 39.43007754698197 25.07106356344834 M39.670207391312644 24.734740790612133 C39.57990806835397 24.86121286145091, 39.489608745395294 24.987684932289685, 39.43007754698197 25.07106356344834 M39.43007754698197 25.07106356344834 C39.3383278524035 25.17939222313661, 39.246578157825034 25.28772088282488, 39.16299455336566 25.386407858128706 M39.43007754698197 25.07106356344834 C39.32622492253694 25.19368212542751, 39.222372298091905 25.31630068740668, 39.16299455336566 25.386407858128706 M39.16299455336566 25.386407858128706 C39.050950538608994 25.498451872885372, 38.938906523852324 25.61049588764204, 38.870782858128706 25.678619553365657 M39.16299455336566 25.386407858128706 C39.10103041398969 25.448371997504676, 39.03906627461372 25.510336136880646, 38.870782858128706 25.678619553365657 M38.870782858128706 25.678619553365657 C38.7800785025158 25.75544222382395, 38.68937414690289 25.83226489428225, 38.55543856344834 25.94570254698197 M38.870782858128706 25.678619553365657 C38.807003896116186 25.73263757871573, 38.743224934103665 25.786655604065807, 38.55543856344834 25.94570254698197 M38.55543856344834 25.94570254698197 C38.4347098417519 26.03190119747099, 38.31398112005547 26.11809984796001, 38.219115790612136 26.185832391312644 M38.55543856344834 25.94570254698197 C38.47759084156167 26.00128475207769, 38.399743119675 26.05686695717341, 38.219115790612136 26.185832391312644 M38.219115790612136 26.185832391312644 C38.124515001396354 26.24220222627505, 38.02991421218057 26.298572061237458, 37.864111965185366 26.397368756032446 M38.219115790612136 26.185832391312644 C38.1180757835351 26.24603916728934, 38.01703577645806 26.306245943266035, 37.864111965185366 26.397368756032446 M37.864111965185366 26.397368756032446 C37.7666718647278 26.445004318499674, 37.66923176427023 26.4926398809669, 37.492852123264846 26.578866633275286 M37.864111965185366 26.397368756032446 C37.73198238108373 26.461962973687047, 37.59985279698209 26.526557191341645, 37.492852123264846 26.578866633275286 M37.492852123264846 26.578866633275286 C37.39711813978241 26.616222149548513, 37.30138415629997 26.653577665821743, 37.10787234602342 26.729086208503173 M37.492852123264846 26.578866633275286 C37.40754417799895 26.612153896812174, 37.32223623273305 26.64544116034906, 37.10787234602342 26.729086208503173 M37.10787234602342 26.729086208503173 C36.98349748551322 26.76611420878387, 36.85912262500301 26.803142209064564, 36.711802435703994 26.847001329696653 M37.10787234602342 26.729086208503173 C37.020265614647826 26.755167862469733, 36.93265888327223 26.781249516436294, 36.711802435703994 26.847001329696653 M36.711802435703994 26.847001329696653 C36.57457266732287 26.875775386271044, 36.437342898941736 26.90454944284544, 36.30734795140367 26.931806517013612 M36.711802435703994 26.847001329696653 C36.55525803916017 26.879825237917835, 36.39871364261635 26.912649146139017, 36.30734795140367 26.931806517013612 M36.30734795140367 26.931806517013612 C36.172420791472376 26.948625169959442, 36.03749363154108 26.96544382290527, 35.89727172736166 26.982922465033347 M36.30734795140367 26.931806517013612 C36.14397287606709 26.952171198916677, 35.980597800730514 26.972535880819738, 35.89727172736166 26.982922465033347 M35.89727172736166 26.982922465033347 C35.772497630777394 26.988083159841867, 35.647723534193126 26.993243854650387, 35.484375 27 M35.89727172736166 26.982922465033347 C35.78848050170273 26.987422103410545, 35.679689276043796 26.991921741787742, 35.484375 27 M35.484375 27 C35.484375 27, 35.484375 27, 35.484375 27 M35.484375 27 C35.484375 27, 35.484375 27, 35.484375 27 M35.484375 27 C18.25708618546378 27, 1.029797370927561 27, -35.484375 27 M35.484375 27 C18.316674831694012 27, 1.1489746633880245 27, -35.484375 27 M-35.484375 27 C-35.484375 27, -35.484375 27, -35.484375 27 M-35.484375 27 C-35.484375 27, -35.484375 27, -35.484375 27 M-35.484375 27 C-35.5752558350429 26.996241140858245, -35.666136670085805 26.99248228171649, -35.89727172736166 26.982922465033347 M-35.484375 27 C-35.60883408534327 26.99485233415278, -35.73329317068654 26.989704668305567, -35.89727172736166 26.982922465033347 M-35.89727172736166 26.982922465033347 C-36.05315676170193 26.96349141576682, -36.20904179604219 26.944060366500292, -36.30734795140367 26.931806517013612 M-35.89727172736166 26.982922465033347 C-36.0566731924629 26.963053093129577, -36.21607465756415 26.943183721225804, -36.30734795140367 26.931806517013612 M-36.30734795140367 26.931806517013612 C-36.428863929317515 26.906327295818144, -36.55037990723136 26.880848074622676, -36.711802435703994 26.847001329696653 M-36.30734795140367 26.931806517013612 C-36.40855518191145 26.91058559235038, -36.50976241241924 26.88936466768715, -36.711802435703994 26.847001329696653 M-36.711802435703994 26.847001329696653 C-36.85036033824355 26.805750854857276, -36.98891824078311 26.764500380017896, -37.10787234602342 26.729086208503173 M-36.711802435703994 26.847001329696653 C-36.865353984010845 26.80128705310986, -37.0189055323177 26.755572776523064, -37.10787234602342 26.729086208503173 M-37.10787234602342 26.729086208503173 C-37.21300526519821 26.688063216142197, -37.318138184373005 26.64704022378122, -37.492852123264846 26.578866633275286 M-37.10787234602342 26.729086208503173 C-37.24678475825867 26.6748824170485, -37.38569717049392 26.62067862559383, -37.492852123264846 26.578866633275286 M-37.492852123264846 26.578866633275286 C-37.61241616335973 26.520415335770167, -37.73198020345462 26.461964038265048, -37.864111965185366 26.397368756032446 M-37.492852123264846 26.578866633275286 C-37.56896940275611 26.541655162792242, -37.64508668224738 26.5044436923092, -37.864111965185366 26.397368756032446 M-37.864111965185366 26.397368756032446 C-37.976370384322024 26.330477257427287, -38.08862880345868 26.26358575882213, -38.219115790612136 26.185832391312644 M-37.864111965185366 26.397368756032446 C-37.95868714598911 26.34101418037149, -38.05326232679285 26.284659604710537, -38.219115790612136 26.185832391312644 M-38.219115790612136 26.185832391312644 C-38.291566042173805 26.13410390595761, -38.364016293735475 26.082375420602574, -38.55543856344834 25.94570254698197 M-38.219115790612136 26.185832391312644 C-38.35008063635872 26.092325288725707, -38.48104548210531 25.99881818613877, -38.55543856344834 25.94570254698197 M-38.55543856344834 25.94570254698197 C-38.62729267140037 25.88484522189572, -38.699146779352404 25.823987896809466, -38.870782858128706 25.67861955336566 M-38.55543856344834 25.94570254698197 C-38.65079492134127 25.864939831575285, -38.746151279234205 25.784177116168596, -38.870782858128706 25.67861955336566 M-38.870782858128706 25.67861955336566 C-38.975045748322586 25.57435666317178, -39.07930863851646 25.470093772977904, -39.16299455336566 25.386407858128706 M-38.870782858128706 25.67861955336566 C-38.979400257051 25.570002154443372, -39.08801765597328 25.46138475552108, -39.16299455336566 25.386407858128706 M-39.16299455336566 25.386407858128706 C-39.23401480583541 25.30255440448924, -39.305035058305165 25.218700950849772, -39.43007754698197 25.07106356344834 M-39.16299455336566 25.386407858128706 C-39.26342989808074 25.26782407070248, -39.36386524279582 25.149240283276256, -39.43007754698197 25.07106356344834 M-39.43007754698197 25.07106356344834 C-39.500221595731254 24.972820710549016, -39.57036564448053 24.874577857649687, -39.670207391312644 24.734740790612133 M-39.43007754698197 25.07106356344834 C-39.519214281119616 24.946219799565938, -39.60835101525726 24.82137603568353, -39.670207391312644 24.734740790612133 M-39.670207391312644 24.734740790612133 C-39.744998671327906 24.609224827675206, -39.81978995134317 24.483708864738276, -39.88174375603244 24.37973696518537 M-39.670207391312644 24.734740790612133 C-39.7226977717826 24.64665056607971, -39.77518815225255 24.558560341547288, -39.88174375603244 24.37973696518537 M-39.88174375603244 24.37973696518537 C-39.92744009133856 24.286263617288316, -39.97313642664468 24.192790269391264, -40.06324163327528 24.00847712326485 M-39.88174375603244 24.37973696518537 C-39.93265980262518 24.275586527194587, -39.98357584921793 24.1714360892038, -40.06324163327528 24.00847712326485 M-40.06324163327528 24.00847712326485 C-40.109634211310464 23.889583135377155, -40.156026789345646 23.770689147489456, -40.213461208503176 23.623497346023417 M-40.06324163327528 24.00847712326485 C-40.09992947535006 23.914454242105794, -40.136617317424836 23.820431360946735, -40.213461208503176 23.623497346023417 M-40.213461208503176 23.623497346023417 C-40.25446348974158 23.48577311109394, -40.295465770979995 23.348048876164466, -40.33137632969665 23.227427435703994 M-40.213461208503176 23.623497346023417 C-40.24928511612451 23.503166961461528, -40.28510902374585 23.382836576899635, -40.33137632969665 23.227427435703994 M-40.33137632969665 23.227427435703994 C-40.35478939911086 23.115765387480263, -40.37820246852506 23.00410333925653, -40.41618151701361 22.82297295140367 M-40.33137632969665 23.227427435703994 C-40.361206513481214 23.085160765693857, -40.39103669726578 22.94289409568372, -40.41618151701361 22.82297295140367 M-40.41618151701361 22.82297295140367 C-40.43295817216476 22.688382717573305, -40.44973482731591 22.55379248374294, -40.46729746503335 22.412896727361662 M-40.41618151701361 22.82297295140367 C-40.43497192642599 22.672227431882938, -40.45376233583836 22.521481912362205, -40.46729746503335 22.412896727361662 M-40.46729746503335 22.412896727361662 C-40.473391196683565 22.265563879810305, -40.47948492833378 22.118231032258944, -40.484375 22 M-40.46729746503335 22.412896727361662 C-40.472525222528546 22.286501204505345, -40.47775298002374 22.160105681649032, -40.484375 22 M-40.484375 22 C-40.484375 22, -40.484375 22, -40.484375 22 M-40.484375 22 C-40.484375 22, -40.484375 22, -40.484375 22 M-40.484375 22 C-40.484375 4.793318543233834, -40.484375 -12.413362913532332, -40.484375 -22 M-40.484375 22 C-40.484375 6.1893974065797455, -40.484375 -9.621205186840509, -40.484375 -22 M-40.484375 -22 C-40.484375 -22, -40.484375 -22, -40.484375 -22 M-40.484375 -22 C-40.484375 -22, -40.484375 -22, -40.484375 -22 M-40.484375 -22 C-40.47898623570177 -22.130288308447742, -40.473597471403544 -22.260576616895484, -40.46729746503335 -22.41289672736166 M-40.484375 -22 C-40.480002595004756 -22.10571500610374, -40.47563019000951 -22.21143001220748, -40.46729746503335 -22.41289672736166 M-40.46729746503335 -22.41289672736166 C-40.454221082187985 -22.517801632955578, -40.44114469934262 -22.622706538549497, -40.41618151701361 -22.82297295140367 M-40.46729746503335 -22.41289672736166 C-40.45689419239969 -22.496356683100807, -40.44649091976602 -22.579816638839958, -40.41618151701361 -22.82297295140367 M-40.41618151701361 -22.82297295140367 C-40.39911936021692 -22.904346108477956, -40.38205720342023 -22.985719265552245, -40.33137632969665 -23.227427435703994 M-40.41618151701361 -22.82297295140367 C-40.397891029978794 -22.910204284006227, -40.37960054294398 -22.997435616608787, -40.33137632969665 -23.227427435703994 M-40.33137632969665 -23.227427435703994 C-40.29588075667523 -23.346654963785515, -40.26038518365381 -23.46588249186704, -40.213461208503176 -23.623497346023417 M-40.33137632969665 -23.227427435703994 C-40.303060939878826 -23.322537153544214, -40.27474555006099 -23.417646871384434, -40.213461208503176 -23.623497346023417 M-40.213461208503176 -23.623497346023417 C-40.17515987302235 -23.72165525639621, -40.13685853754152 -23.81981316676901, -40.06324163327529 -24.008477123264846 M-40.213461208503176 -23.623497346023417 C-40.16034152223822 -23.759631434769144, -40.107221835973256 -23.895765523514875, -40.06324163327529 -24.008477123264846 M-40.06324163327529 -24.008477123264846 C-39.99431450154461 -24.149469824772478, -39.92538736981392 -24.29046252628011, -39.88174375603245 -24.379736965185366 M-40.06324163327529 -24.008477123264846 C-39.99534155192463 -24.147368959641017, -39.927441470573974 -24.286260796017192, -39.88174375603245 -24.379736965185366 M-39.88174375603245 -24.379736965185366 C-39.80750106515803 -24.504332276754166, -39.733258374283615 -24.628927588322966, -39.670207391312644 -24.734740790612133 M-39.88174375603245 -24.379736965185366 C-39.8123239757383 -24.496238388462405, -39.742904195444154 -24.612739811739445, -39.670207391312644 -24.734740790612133 M-39.670207391312644 -24.734740790612133 C-39.61719972837333 -24.808982641853113, -39.564192065434014 -24.88322449309409, -39.43007754698197 -25.07106356344834 M-39.670207391312644 -24.734740790612133 C-39.6084408404576 -24.821250227662752, -39.54667428960254 -24.90775966471337, -39.43007754698197 -25.07106356344834 M-39.43007754698197 -25.07106356344834 C-39.35157213187384 -25.163754731914974, -39.27306671676571 -25.256445900381607, -39.16299455336566 -25.386407858128706 M-39.43007754698197 -25.07106356344834 C-39.337000397605394 -25.18095954605508, -39.243923248228825 -25.290855528661822, -39.16299455336566 -25.386407858128706 M-39.16299455336566 -25.386407858128706 C-39.083263345514794 -25.466139065979565, -39.00353213766394 -25.545870273830428, -38.870782858128706 -25.678619553365657 M-39.16299455336566 -25.386407858128706 C-39.05703840396299 -25.492364007531375, -38.95108225456032 -25.59832015693404, -38.870782858128706 -25.678619553365657 M-38.870782858128706 -25.678619553365657 C-38.797835714227155 -25.74040263267817, -38.724888570325604 -25.802185711990685, -38.55543856344834 -25.945702546981966 M-38.870782858128706 -25.678619553365657 C-38.746840793498556 -25.78359312737612, -38.62289872886841 -25.88856670138658, -38.55543856344834 -25.945702546981966 M-38.55543856344834 -25.945702546981966 C-38.44667869119708 -26.02335560321982, -38.33791881894581 -26.101008659457673, -38.219115790612136 -26.185832391312644 M-38.55543856344834 -25.945702546981966 C-38.46255762170766 -26.012018264747347, -38.36967667996698 -26.078333982512728, -38.219115790612136 -26.185832391312644 M-38.219115790612136 -26.185832391312644 C-38.103185167254274 -26.25491204868068, -37.987254543896405 -26.323991706048716, -37.864111965185366 -26.397368756032446 M-38.219115790612136 -26.185832391312644 C-38.12960699421777 -26.23916805713807, -38.04009819782339 -26.2925037229635, -37.864111965185366 -26.397368756032446 M-37.864111965185366 -26.397368756032446 C-37.7600975180848 -26.44821832073, -37.65608307098423 -26.49906788542755, -37.492852123264846 -26.578866633275286 M-37.864111965185366 -26.397368756032446 C-37.76391088797659 -26.446354077786506, -37.66370981076781 -26.49533939954057, -37.492852123264846 -26.578866633275286 M-37.492852123264846 -26.578866633275286 C-37.356233804740086 -26.632175266586348, -37.219615486215325 -26.68548389989741, -37.10787234602342 -26.729086208503173 M-37.492852123264846 -26.578866633275286 C-37.41137228254226 -26.610660165784154, -37.32989244181968 -26.642453698293025, -37.10787234602342 -26.729086208503173 M-37.10787234602342 -26.729086208503173 C-36.97197288523718 -26.769545230941446, -36.83607342445094 -26.81000425337972, -36.711802435703994 -26.847001329696653 M-37.10787234602342 -26.729086208503173 C-36.95278177557238 -26.77525867183408, -36.79769120512134 -26.821431135164993, -36.711802435703994 -26.847001329696653 M-36.711802435703994 -26.847001329696653 C-36.62377225244558 -26.8654593180997, -36.53574206918718 -26.883917306502745, -36.30734795140367 -26.931806517013612 M-36.711802435703994 -26.847001329696653 C-36.601079439251734 -26.87021750066005, -36.490356442799474 -26.89343367162345, -36.30734795140367 -26.931806517013612 M-36.30734795140367 -26.931806517013612 C-36.17053009947355 -26.94886084447132, -36.033712247543434 -26.965915171929023, -35.89727172736166 -26.982922465033347 M-36.30734795140367 -26.931806517013612 C-36.143639846868716 -26.95221271096296, -35.97993174233377 -26.97261890491231, -35.89727172736166 -26.982922465033347 M-35.89727172736166 -26.982922465033347 C-35.801446701036355 -26.986885817439184, -35.70562167471105 -26.99084916984502, -35.484375 -27 M-35.89727172736166 -26.982922465033347 C-35.77925049416445 -26.987803859346187, -35.66122926096724 -26.992685253659022, -35.484375 -27 M-35.484375 -27 C-35.484375 -27, -35.484375 -27, -35.484375 -27 M-35.484375 -27 C-35.484375 -27, -35.484375 -27, -35.484375 -27\">\u003C/path>\u003C/g>\u003Cg transform=\"translate(-25.484375, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"50.96875\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>,.?!+-*ز\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(1648.609375, 228.375)\" id=\"flowchart-cyr-12\" class=\"node default\">\u003Crect height=\"54\" width=\"107.109375\" y=\"-27\" x=\"-53.5546875\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-23.5546875, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"47.109375\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>Cyrillic\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(1648.609375, 580.8125)\" id=\"flowchart-cyr2-13\" class=\"node default\">\u003Ccircle cy=\"0\" cx=\"0\" r=\"82.0625\" style=\"\" class=\"basic label-container\">\u003C/circle>\u003Cg transform=\"translate(-74.5625, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"149.125\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>Circle shape Начало\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003C/g>\u003C/g>\u003C/g>\u003C/svg>\n\u003Csection data-footnotes=\"\" class=\"footnotes\">\u003Ch2 class=\"sr-only\" id=\"footnote-label\">Footnotes\u003C/h2>\n\u003Col>\n\u003Cli id=\"user-content-fn-first\">\n\u003Cp>Footnote \u003Cstrong>can have markup\u003C/strong>\u003C/p>\n\u003Cp>and multiple paragraphs. \u003Ca href=\"#user-content-fnref-first\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-second\">\n\u003Cp>Footnote text. \u003Ca href=\"#user-content-fnref-second\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩\u003C/a> \u003Ca href=\"#user-content-fnref-second-2\" data-footnote-backref=\"\" aria-label=\"Back to reference 2-2\" class=\"data-footnote-backref\">↩\u003Csup>2\u003C/sup>\u003C/a>\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/section>",{"headings":337,"localImagePaths":416,"remoteImagePaths":417,"frontmatter":418,"imagePaths":421},[338,342,345,348,351,354,357,360,363,366,369,372,375,378,381,384,387,390,393,396,399,402,405,408,411,414],{"depth":339,"slug":340,"text":341},1,"h1-heading-8","h1 Heading 8-)",{"depth":108,"slug":343,"text":344},"h2-heading","h2 Heading",{"depth":29,"slug":346,"text":347},"h3-heading","h3 Heading",{"depth":167,"slug":349,"text":350},"h4-heading","h4 Heading",{"depth":98,"slug":352,"text":353},"h5-heading","h5 Heading",{"depth":307,"slug":355,"text":356},"h6-heading","h6 Heading",{"depth":108,"slug":358,"text":359},"horizontal-rules","Horizontal Rules",{"depth":108,"slug":361,"text":362},"typographic-replacements","Typographic replacements",{"depth":108,"slug":364,"text":365},"emphasis","Emphasis",{"depth":108,"slug":367,"text":368},"blockquotes","Blockquotes",{"depth":108,"slug":370,"text":371},"lists","Lists",{"depth":108,"slug":373,"text":374},"code","Code",{"depth":108,"slug":376,"text":377},"tables","Tables",{"depth":108,"slug":379,"text":380},"links","Links",{"depth":108,"slug":382,"text":383},"images","Images",{"depth":108,"slug":385,"text":386},"plugins","Plugins",{"depth":29,"slug":388,"text":389},"emojies","Emojies",{"depth":29,"slug":391,"text":392},"subscript--superscript","Subscript / Superscript",{"depth":29,"slug":394,"text":395},"ins","\u003Cins>",{"depth":29,"slug":397,"text":398},"mark","\u003Cmark>",{"depth":29,"slug":400,"text":401},"footnotes","Footnotes",{"depth":29,"slug":403,"text":404},"definition-lists","Definition lists",{"depth":29,"slug":406,"text":407},"abbreviations","Abbreviations",{"depth":29,"slug":409,"text":410},"custom-containers","Custom containers",{"depth":108,"slug":412,"text":413},"mermaid","Mermaid",{"depth":108,"slug":415,"text":401},"footnote-label",[],[],{"slug":323,"title":326,"pubDate":419,"draft":66,"tags":420},"2000-01-01",[329,330],[],"markdown-test/markdown-test.md"]
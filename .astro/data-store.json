[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.13.7","content-config-digest","55860a7c4102fd71","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://blog.ozenc.io\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"mermaid\",\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[null],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"staticImportMetaEnv\":false,\"chromeDevtoolsWorkspace\":false},\"legacy\":{\"collections\":false}}","article",["Map",11,12,34,35,53,54,74,75,99,100,137,138,162,163,188,189,218,219,248,249,278,279,321,322],"advent-of-code-intro",{"id":11,"data":13,"body":20,"filePath":21,"digest":22,"rendered":23,"legacyId":33},{"title":14,"draft":15,"pubDate":16,"tags":17},"Advent of Code: Intro",true,["Date","2023-07-14T00:00:00.000Z"],[18,19],"advent-of-code","advent-of-code-2015","Rust, Haskell, OCaml, Elixir, Golang... I want to learn them all. But going through docs or books is not always that much fun, and I want to keep the learning journey fun.\n\nI decided to use [Advent Of Code](https://adventofcode.com/) puzzles as the bedrock for language learning; dedicating each event year to one language and documenting everything in a long series of blog posts as I go about solving these puzzles. This should provide a decent introduction to the language as solving these require knowing the fundamentals of the language; variables, types, methods, structs, control flow, error handling, loops, maybe even file operations and data processing. They do not seem to take you to other important subjects like async programming, network operations, 3rd party packages etc., but I can always do some extra projects for these if I end up liking the language.\n\nI intend to learn the specifics about the language with simple searches to keep it concise.\n\nThe code will live in [this repo](https://github.com/Ozencb/aoc).\n\nThe first language of choice is Rust, and I will start from the 2015 event. On to learning!","src/content/article/advent-of-code/intro.md","a3233cad8eac1f89",{"html":24,"metadata":25},"\u003Cp>Rust, Haskell, OCaml, Elixir, Golang… I want to learn them all. But going through docs or books is not always that much fun, and I want to keep the learning journey fun.\u003C/p>\n\u003Cp>I decided to use \u003Ca href=\"https://adventofcode.com/\">Advent Of Code\u003C/a> puzzles as the bedrock for language learning; dedicating each event year to one language and documenting everything in a long series of blog posts as I go about solving these puzzles. This should provide a decent introduction to the language as solving these require knowing the fundamentals of the language; variables, types, methods, structs, control flow, error handling, loops, maybe even file operations and data processing. They do not seem to take you to other important subjects like async programming, network operations, 3rd party packages etc., but I can always do some extra projects for these if I end up liking the language.\u003C/p>\n\u003Cp>I intend to learn the specifics about the language with simple searches to keep it concise.\u003C/p>\n\u003Cp>The code will live in \u003Ca href=\"https://github.com/Ozencb/aoc\">this repo\u003C/a>.\u003C/p>\n\u003Cp>The first language of choice is Rust, and I will start from the 2015 event. On to learning!\u003C/p>",{"headings":26,"localImagePaths":27,"remoteImagePaths":28,"frontmatter":29,"imagePaths":32},[],[],[],{"slug":11,"title":14,"pubDate":30,"draft":15,"tags":31},"2023-07-14",[18,19],[],"advent-of-code/intro.md","obsidian-sync-blog",{"id":34,"data":36,"body":40,"filePath":41,"digest":42,"rendered":43,"legacyId":52},{"title":37,"description":38,"draft":15,"pubDate":39},"How I publish on my blog with Obsidian","... without Obsidian Blog or Obsidian Sync",["Date","2025-09-13T00:00:00.000Z"],"I have set this blog up long time ago with the hope that it would push me to write more. It has not. But I kept coming up with \"blog ideas\" since I then, so I decided to revisit the project and improve things a bit for a smoother publishing experience.\n\nBack then, I wanted to set up a statically built, JavaScript-free system without any backend dependencies. I achieved this by using Markdown files as the content source and Astro framework for static generation ([check the source code here](https://github.com/ozencb/blog.ozenc.dev)). All the content is co-located with the source code, making it easy to manage and deploy. Vercel watches the repo for changes and automatically deploys the updated site.\n\nThe main friction with this workflow is the necessity to access to a PC where I can do git operations after writing something. I wanted to","src/content/article/obsidian/obsidian-sync.md","4f8a3014a24d6ed3",{"html":44,"metadata":45},"\u003Cp>I have set this blog up long time ago with the hope that it would push me to write more. It has not. But I kept coming up with “blog ideas” since I then, so I decided to revisit the project and improve things a bit for a smoother publishing experience.\u003C/p>\n\u003Cp>Back then, I wanted to set up a statically built, JavaScript-free system without any backend dependencies. I achieved this by using Markdown files as the content source and Astro framework for static generation (\u003Ca href=\"https://github.com/ozencb/blog.ozenc.dev\">check the source code here\u003C/a>). All the content is co-located with the source code, making it easy to manage and deploy. Vercel watches the repo for changes and automatically deploys the updated site.\u003C/p>\n\u003Cp>The main friction with this workflow is the necessity to access to a PC where I can do git operations after writing something. I wanted to\u003C/p>",{"headings":46,"localImagePaths":47,"remoteImagePaths":48,"frontmatter":49,"imagePaths":51},[],[],[],{"slug":34,"title":37,"pubDate":50,"draft":15,"description":38},["Date","2025-09-13T00:00:00.000Z"],[],"obsidian/obsidian-sync.md","rust-traits",{"id":53,"data":55,"filePath":61,"digest":62,"rendered":63,"legacyId":73},{"title":56,"description":57,"draft":15,"pubDate":58,"tags":59},"Traits","Rust Fever",["Date","2023-07-19T00:00:00.000Z"],[60],"rust","src/content/article/rust/traits.md","db2e8c605f26a5c4",{"html":64,"metadata":65},"",{"headings":66,"localImagePaths":67,"remoteImagePaths":68,"frontmatter":69,"imagePaths":72},[],[],[],{"slug":53,"title":56,"description":57,"pubDate":70,"draft":15,"tags":71},"2023-07-19",[60],[],"rust/traits.md","homelab",{"id":74,"data":76,"body":82,"filePath":83,"assetImports":84,"digest":87,"rendered":88,"legacyId":98},{"title":77,"draft":78,"pubDate":79,"tags":80},"Homelab",false,["Date","2023-07-13T00:00:00.000Z"],[74,81],"networking","_I originally wrote this blog post in 2023. Since then, my setup has changed quite a bit so here’s the updated version for September 2025!_\n\nI run a simple home lab that covers everything I need.\n\nThe setup is a single Proxmox server hosting around 20 LXCs. Among them are a development container, the _arr_ stack, AdGuard, Syncthing, Gitea, Proxmox Backup Server, and a few others. The server has three HDDs, totaling 6 TB of storage. Using [mergerfs](https://github.com/trapexit/mergerfs), I combine them into one directory, so I don’t have to juggle mounts or manually move files around to manage space.\n\nBackups are handled weekly through Proxmox Backup Server, and an Rclone LXC pushes those backup files to Google Drive. I don’t bother backing up anything that can easily be pulled from the internet again so only the LXCs are included in the backup job. Nothing on the server is exposed publicly to the internet, since I never need remote access to anything I have on my network when I’m away from home.\n\nFor DNS, my Deco mesh points to AdGuard, giving me network-wide blocking across all devices.\n\nEverything is mounted neatly, zip-tied to a small wooden pallet screwed to the wall, and all cables, including the ethernet cable running to the secondary Deco unit, are routed cleanly through cable channels.\n\n![lab-1](./assets/lab.png \"Homelab\")\n\nNetwork:\n\n![lab-2](./assets/network.png \"Network\")","src/content/article/homelab/homelab/homelab.md",[85,86],"./assets/lab.png","./assets/network.png","9443760868a44ae0",{"html":89,"metadata":90},"\u003Cp>\u003Cem>I originally wrote this blog post in 2023. Since then, my setup has changed quite a bit so here’s the updated version for September 2025!\u003C/em>\u003C/p>\n\u003Cp>I run a simple home lab that covers everything I need.\u003C/p>\n\u003Cp>The setup is a single Proxmox server hosting around 20 LXCs. Among them are a development container, the \u003Cem>arr\u003C/em> stack, AdGuard, Syncthing, Gitea, Proxmox Backup Server, and a few others. The server has three HDDs, totaling 6 TB of storage. Using \u003Ca href=\"https://github.com/trapexit/mergerfs\">mergerfs\u003C/a>, I combine them into one directory, so I don’t have to juggle mounts or manually move files around to manage space.\u003C/p>\n\u003Cp>Backups are handled weekly through Proxmox Backup Server, and an Rclone LXC pushes those backup files to Google Drive. I don’t bother backing up anything that can easily be pulled from the internet again so only the LXCs are included in the backup job. Nothing on the server is exposed publicly to the internet, since I never need remote access to anything I have on my network when I’m away from home.\u003C/p>\n\u003Cp>For DNS, my Deco mesh points to AdGuard, giving me network-wide blocking across all devices.\u003C/p>\n\u003Cp>Everything is mounted neatly, zip-tied to a small wooden pallet screwed to the wall, and all cables, including the ethernet cable running to the secondary Deco unit, are routed cleanly through cable channels.\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./assets/lab.png&#x22;,&#x22;alt&#x22;:&#x22;lab-1&#x22;,&#x22;title&#x22;:&#x22;Homelab&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>Network:\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./assets/network.png&#x22;,&#x22;alt&#x22;:&#x22;lab-2&#x22;,&#x22;title&#x22;:&#x22;Network&#x22;,&#x22;index&#x22;:0}\">\u003C/p>",{"headings":91,"localImagePaths":92,"remoteImagePaths":93,"frontmatter":94,"imagePaths":97},[],[85,86],[],{"slug":74,"title":77,"pubDate":95,"draft":78,"tags":96},["Date","2023-07-13T00:00:00.000Z"],[74,81],[85,86],"homelab/homelab/homelab.md","advent-of-code-2015-05",{"id":99,"data":101,"body":106,"filePath":107,"digest":108,"rendered":109,"legacyId":136},{"title":102,"description":103,"draft":15,"pubDate":104,"tags":105},"The Ideal Stocking Stuffer","AoC 2015 with Rust - Day 5",["Date","2023-08-08T00:00:00.000Z"],[18,19,60],"##### [Link to problem](https://adventofcode.com/2015/day/5)\n##### [Source of the final solution](https://github.com/Ozencb/aoc/tree/main/aoc-2015-05)\n##### [Other posts in the series](/tags/advent-of-code)\n\n## Part 1\n\nSanta is trying to figure out which strings are naughty and which are nice.\n\nNice string rules:\n- Contains at least three vowels\n- Contains at least one letter that appears twice consecutively\n- Should not contain these strings: `ab`, `cd`, `pq`, `xy`\n\nI want to make a function for each rule, then check each string if it complies with all of these rules.\nAnd an extra challenge for myself: make it as functional as possible. No mutable arrays, no side-effects.\n\n\n```rust\nuse std::fs;\n\nfn has_consecutive_chars(text: &str) -> bool {\n    text.chars()\n        .collect::\u003CVec\u003C_>>()\n        .windows(2)\n        .any(|c| c[0] == c[1])\n}\n\nfn get_recurring_char_count(text: &str, char_set: &[char]) -> usize {\n    text.chars().filter(|c| char_set.contains(c)).count()\n}\n\nfn has_greater_number_of_vowels_than(text: &str, vowel_count: usize) -> bool {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    get_recurring_char_count(text, &vowels) >= vowel_count\n}\n\nfn contains_strings(text: &str, arr: &[&str]) -> bool {\n    arr.iter().any(|str| text.contains(str))\n}\n\nfn main() {\n    let forbidden_strings = [\"ab\", \"cd\", \"pq\", \"xy\"];\n    let filename = \"data.txt\";\n\n    let contents = fs::read_to_string(filename).expect(\"Something went wrong\");\n\n    let nice_string_count = contents\n        .lines()\n        .filter(|line| {\n            has_greater_number_of_vowels_than(line, 3)\n                && has_consecutive_chars(line)\n                && !contains_strings(line, &forbidden_strings)\n        })\n        .count();\n\n    println!(\"{:?}\", nice_string_count)\n}\n```\n\nThis all works nicely. I am still a new to the functional paradigm and I know that Rust wasn't designed with functional concepts in mind, but it is fun nonetheless. \n\nI want to keep introducing more functional concepts in these blog series as I learn more about it in the future.\n\n## Part 2\n\nFor part two, we will have to make some significant changes to our code because the rules for deciding whether a string is nice or not are all different now.\n\nA nice string must now have both:\n- Pair/pairs of of non-overlapping letters appearing more than once .It can be `xyxy` because it has two `xy`s, or `aabcdaa` because it has a pair of `aa`s in it. But `aaa` does not satisfy the requirement because the `a` in the middle overlaps with two different `aa` pairs.\n- A letter that repeats itself with another letter between them, like `xyx` or `bcb` or `aaa`","src/content/article/advent-of-code/2015-05.md","8a6c194398de0a4a",{"html":110,"metadata":111},"\u003Ch5 id=\"link-to-problem\">\u003Ca href=\"https://adventofcode.com/2015/day/5\">Link to problem\u003C/a>\u003C/h5>\n\u003Ch5 id=\"source-of-the-final-solution\">\u003Ca href=\"https://github.com/Ozencb/aoc/tree/main/aoc-2015-05\">Source of the final solution\u003C/a>\u003C/h5>\n\u003Ch5 id=\"other-posts-in-the-series\">\u003Ca href=\"/tags/advent-of-code\">Other posts in the series\u003C/a>\u003C/h5>\n\u003Ch2 id=\"part-1\">Part 1\u003C/h2>\n\u003Cp>Santa is trying to figure out which strings are naughty and which are nice.\u003C/p>\n\u003Cp>Nice string rules:\u003C/p>\n\u003Cul>\n\u003Cli>Contains at least three vowels\u003C/li>\n\u003Cli>Contains at least one letter that appears twice consecutively\u003C/li>\n\u003Cli>Should not contain these strings: \u003Ccode>ab\u003C/code>, \u003Ccode>cd\u003C/code>, \u003Ccode>pq\u003C/code>, \u003Ccode>xy\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Cp>I want to make a function for each rule, then check each string if it complies with all of these rules.\nAnd an extra challenge for myself: make it as functional as possible. No mutable arrays, no side-effects.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">fs;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> has_consecutive_chars\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(text\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> bool\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    text\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">chars\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">collect\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;_>>()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">windows\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">any\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">c\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> c[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> c[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">])\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> get_recurring_char_count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(text\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, char_set\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#B392F0\">char\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> usize\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    text\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">chars\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">filter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">c\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> char_set\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">contains\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(c))\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> has_greater_number_of_vowels_than\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(text\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, vowel_count\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> usize\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> bool\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> vowels \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'a'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'e'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'i'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'o'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'u'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    get_recurring_char_count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(text, \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">vowels) \u003C/span>\u003Cspan style=\"color:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> vowel_count\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> contains_strings\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(text\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, arr\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> bool\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    arr\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">iter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">any\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#B392F0\">str\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> text\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">contains\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> forbidden_strings \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"ab\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"cd\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"pq\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"xy\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> filename \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"data.txt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> fs\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">read_to_string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(filename)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Something went wrong\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> nice_string_count \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">lines\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">filter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">line\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">            has_greater_number_of_vowels_than\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(line, \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\"> has_consecutive_chars\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(line)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#F97583\"> !\u003C/span>\u003Cspan style=\"color:#B392F0\">contains_strings\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(line, \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">forbidden_strings)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{:?}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, nice_string_count)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This all works nicely. I am still a new to the functional paradigm and I know that Rust wasn’t designed with functional concepts in mind, but it is fun nonetheless.\u003C/p>\n\u003Cp>I want to keep introducing more functional concepts in these blog series as I learn more about it in the future.\u003C/p>\n\u003Ch2 id=\"part-2\">Part 2\u003C/h2>\n\u003Cp>For part two, we will have to make some significant changes to our code because the rules for deciding whether a string is nice or not are all different now.\u003C/p>\n\u003Cp>A nice string must now have both:\u003C/p>\n\u003Cul>\n\u003Cli>Pair/pairs of of non-overlapping letters appearing more than once .It can be \u003Ccode>xyxy\u003C/code> because it has two \u003Ccode>xy\u003C/code>s, or \u003Ccode>aabcdaa\u003C/code> because it has a pair of \u003Ccode>aa\u003C/code>s in it. But \u003Ccode>aaa\u003C/code> does not satisfy the requirement because the \u003Ccode>a\u003C/code> in the middle overlaps with two different \u003Ccode>aa\u003C/code> pairs.\u003C/li>\n\u003Cli>A letter that repeats itself with another letter between them, like \u003Ccode>xyx\u003C/code> or \u003Ccode>bcb\u003C/code> or \u003Ccode>aaa\u003C/code>\u003C/li>\n\u003C/ul>",{"headings":112,"localImagePaths":130,"remoteImagePaths":131,"frontmatter":132,"imagePaths":135},[113,117,120,123,127],{"depth":114,"slug":115,"text":116},5,"link-to-problem","Link to problem",{"depth":114,"slug":118,"text":119},"source-of-the-final-solution","Source of the final solution",{"depth":114,"slug":121,"text":122},"other-posts-in-the-series","Other posts in the series",{"depth":124,"slug":125,"text":126},2,"part-1","Part 1",{"depth":124,"slug":128,"text":129},"part-2","Part 2",[],[],{"slug":99,"title":102,"description":103,"pubDate":133,"draft":15,"tags":134},"2023-08-08",[18,19,60],[],"advent-of-code/2015-05.md","advent-of-code-2015-04",{"id":137,"data":139,"body":143,"filePath":144,"digest":145,"rendered":146,"legacyId":161},{"title":102,"description":140,"draft":15,"pubDate":141,"tags":142},"AoC 2015 with Rust - Day 4",["Date","2023-07-29T00:00:00.000Z"],[18,19,60],"##### [Link to problem](https://adventofcode.com/2015/day/4)\n##### [Source of the final solution](https://github.com/Ozencb/aoc/tree/main/aoc-2015-04)\n##### [Other posts in the series](/tags/advent-of-code)\n\n## Part 1\n\nSanta is mining coins. He is trying to find MD5 hashes that start with 5 zeroes. An input of a secret key followed by a number that produces such a hash is valid, and Santa needs to find the lowest possible number of such hashes. \n\nFor example, \n\n\n- If your secret key is `abcdef`, the answer is `609043`, because the MD5 hash of `abcdef609043` starts with five zeroes (`000001dbbfa...`), and it is the lowest such number to do so.\n- If your secret key is `pqrstuv`, the lowest number it combines with to make an MD5 hash starting with five zeroes is `1048970`; that is, the MD5 hash of `pqrstuv1048970` looks like `000006136ef....`\n\nThe idea is to make a loop with a counter starting from 0, add the value of this counter to the secret key (input), and hash the concatenated string. If the hash starts with five zeroes, break the loop and check the counter to get the result.\n\n\nI don't want to implement MD5 myself, so I added a crate by running `cargo add md5`.\n\n```\n[dependencies]\nmd5 = \"0.7.0\"\n```\n\nI put together something like this as the solution for the part 1 but it kept running for so long.\n\n```rust\nuse md5;\n\nfn main() {\n    let base_input = \"iwrupvqb\";\n    let mut counter = 0;\n\n    let result = loop {\n        let hash = md5::compute(format!(\"{}{}\", base_input, counter));\n\n        if hash.starts_with(b\"00000\") {\n            break counter;\n        }\n\n        counter = counter + 1;\n    };\n\n    println!(\"{:?}\", result);\n}\n```\n\nGiven that [AoC about page](https://adventofcode.com/about) has the following statement, I know that I am not on the right track.\n\n> You don't need a computer science background to participate - just a little programming knowledge and some problem solving skills will get you pretty far. Nor do you need a fancy computer; every problem has a solution that completes in at most 15 seconds on ten-year-old hardware.\n\nI was expecting this to be a lot faster because when I printed out the counter on each iteration, I could see that it was going through numbers really fast. \n\nI went about debugging the code by printing `hash` and `b\"00000\"`, and could see that the two was not producing exactly the same data. Since the break condition never met, the loop went on running forever.\n\nInstead, I decided to format the hash as a string, which produced a healthier comparison.\n\n```rust\nuse md5;\n\nfn main() {\n    let base_input = \"iwrupvqb\";\n    let mut counter = 0;\n\n    let result = loop {\n        let hash = md5::compute(format!(\"{}{}\", base_input, counter));\n\n        if format!(\"{:?}\", hash).starts_with(\"00000\") {\n            break counter;\n        }\n\n        counter = counter + 1;\n    };\n\n    println!(\"{:?}\", result);\n}\n```\n\nAnd this worked a lot quicker and the first part of the puzzle is done.\n\n## Part 2\n\nFor part two, we need to do the same thing but with six zeroes. Simply changing `.starts_with(\"00000\")` part with `.starts_with(\"000000\")` with works, although a bit slower. But, we can do a minor improvement and use some sort of repeating pattern to change the number of zeroes, and put the logic in some sort of function.\n\n```rust\nuse md5;\n\nfn produce_hash(base_input: &str, target_prefix: String) -> i32 {\n    let mut counter = 0;\n\n    return loop {\n        let hash = md5::compute(format!(\"{}{}\", base_input, counter));\n\n        if format!(\"{:?}\", hash).starts_with(&target_prefix) {\n            break counter;\n        }\n\n        counter = counter + 1;\n    };\n}\n\nfn main() {\n    let base_input = \"iwrupvqb\";\n\n    println!(\"{:?}\", produce_hash(base_input, \"0\".repeat(5)));\n    println!(\"{:?}\", produce_hash(base_input, \"0\".repeat(6)));\n}\n```","src/content/article/advent-of-code/2015-04.md","f0fa8afefac8199f",{"html":147,"metadata":148},"\u003Ch5 id=\"link-to-problem\">\u003Ca href=\"https://adventofcode.com/2015/day/4\">Link to problem\u003C/a>\u003C/h5>\n\u003Ch5 id=\"source-of-the-final-solution\">\u003Ca href=\"https://github.com/Ozencb/aoc/tree/main/aoc-2015-04\">Source of the final solution\u003C/a>\u003C/h5>\n\u003Ch5 id=\"other-posts-in-the-series\">\u003Ca href=\"/tags/advent-of-code\">Other posts in the series\u003C/a>\u003C/h5>\n\u003Ch2 id=\"part-1\">Part 1\u003C/h2>\n\u003Cp>Santa is mining coins. He is trying to find MD5 hashes that start with 5 zeroes. An input of a secret key followed by a number that produces such a hash is valid, and Santa needs to find the lowest possible number of such hashes.\u003C/p>\n\u003Cp>For example,\u003C/p>\n\u003Cul>\n\u003Cli>If your secret key is \u003Ccode>abcdef\u003C/code>, the answer is \u003Ccode>609043\u003C/code>, because the MD5 hash of \u003Ccode>abcdef609043\u003C/code> starts with five zeroes (\u003Ccode>000001dbbfa...\u003C/code>), and it is the lowest such number to do so.\u003C/li>\n\u003Cli>If your secret key is \u003Ccode>pqrstuv\u003C/code>, the lowest number it combines with to make an MD5 hash starting with five zeroes is \u003Ccode>1048970\u003C/code>; that is, the MD5 hash of \u003Ccode>pqrstuv1048970\u003C/code> looks like \u003Ccode>000006136ef....\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Cp>The idea is to make a loop with a counter starting from 0, add the value of this counter to the secret key (input), and hash the concatenated string. If the hash starts with five zeroes, break the loop and check the counter to get the result.\u003C/p>\n\u003Cp>I don’t want to implement MD5 myself, so I added a crate by running \u003Ccode>cargo add md5\u003C/code>.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>[dependencies]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>md5 = \"0.7.0\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>I put together something like this as the solution for the part 1 but it kept running for so long.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> md5;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> base_input \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"iwrupvqb\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> counter \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> result \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> loop\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> hash \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> md5\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">compute\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">format!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}{}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, base_input, counter));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> hash\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">starts_with\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">b\"00000\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            break\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> counter;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        counter \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> counter \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{:?}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, result);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Given that \u003Ca href=\"https://adventofcode.com/about\">AoC about page\u003C/a> has the following statement, I know that I am not on the right track.\u003C/p>\n\u003Cblockquote>\n\u003Cp>You don’t need a computer science background to participate - just a little programming knowledge and some problem solving skills will get you pretty far. Nor do you need a fancy computer; every problem has a solution that completes in at most 15 seconds on ten-year-old hardware.\u003C/p>\n\u003C/blockquote>\n\u003Cp>I was expecting this to be a lot faster because when I printed out the counter on each iteration, I could see that it was going through numbers really fast.\u003C/p>\n\u003Cp>I went about debugging the code by printing \u003Ccode>hash\u003C/code> and \u003Ccode>b\"00000\"\u003C/code>, and could see that the two was not producing exactly the same data. Since the break condition never met, the loop went on running forever.\u003C/p>\n\u003Cp>Instead, I decided to format the hash as a string, which produced a healthier comparison.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> md5;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> base_input \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"iwrupvqb\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> counter \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> result \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> loop\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> hash \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> md5\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">compute\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">format!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}{}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, base_input, counter));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#B392F0\"> format!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{:?}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, hash)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">starts_with\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"00000\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            break\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> counter;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        counter \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> counter \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{:?}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, result);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>And this worked a lot quicker and the first part of the puzzle is done.\u003C/p>\n\u003Ch2 id=\"part-2\">Part 2\u003C/h2>\n\u003Cp>For part two, we need to do the same thing but with six zeroes. Simply changing \u003Ccode>.starts_with(\"00000\")\u003C/code> part with \u003Ccode>.starts_with(\"000000\")\u003C/code> with works, although a bit slower. But, we can do a minor improvement and use some sort of repeating pattern to change the number of zeroes, and put the logic in some sort of function.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> md5;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> produce_hash\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(base_input\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, target_prefix\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> String\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> counter \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#F97583\"> loop\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> hash \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> md5\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">compute\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">format!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}{}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, base_input, counter));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#B392F0\"> format!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{:?}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, hash)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">starts_with\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">target_prefix) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            break\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> counter;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        counter \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> counter \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> base_input \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"iwrupvqb\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{:?}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">produce_hash\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(base_input, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"0\"\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">repeat\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{:?}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">produce_hash\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(base_input, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"0\"\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">repeat\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">6\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":149,"localImagePaths":155,"remoteImagePaths":156,"frontmatter":157,"imagePaths":160},[150,151,152,153,154],{"depth":114,"slug":115,"text":116},{"depth":114,"slug":118,"text":119},{"depth":114,"slug":121,"text":122},{"depth":124,"slug":125,"text":126},{"depth":124,"slug":128,"text":129},[],[],{"slug":137,"title":102,"description":140,"pubDate":158,"draft":15,"tags":159},"2023-07-29",[18,19,60],[],"advent-of-code/2015-04.md","advent-of-code-2015-03",{"id":162,"data":164,"body":169,"filePath":170,"digest":171,"rendered":172,"legacyId":187},{"title":165,"description":166,"draft":15,"pubDate":167,"tags":168},"Perfectly Spherical Houses in a Vacuum","AoC 2015 with Rust - Day 3",["Date","2023-07-17T00:00:00.000Z"],[18,19,60],"##### [Link to problem](https://adventofcode.com/2015/day/3)\n##### [Source of the final solution](https://github.com/Ozencb/aoc/tree/main/aoc-2015-03)\n##### [Other posts in the series](/tags/advent-of-code)\n\n## Part 1\n\nSanta is delivering gifts in a two-dimensional grid of houses. He gets instructions over the radio by arrow characters (`>`, `\u003C`, `v`, `^`) and moves according to these. He delivers a gift in each move, but sometimes he gets wrong instructions and revisits some of the locations he has already visited. \n\nFor the first part, I want to solve how many houses get at least 1 present. Starting location will also count as one present delivered.\n\nFor example, \n\n- `>` delivers presents to 2 houses: one at the starting location, and one to the east.\n- `^>v\u003C` delivers presents to 4 houses in a square, including twice to the house at his starting/ending location.\n\n\nIf there is a data type that can hold non-duplicate items in Rust, like some sort of set, I can use it. I can iterate over the instructions, call a `move()` function that takes the direction character and either returns the next coordinate which can then be added to hash set. These coordinates can maybe be some sort of struct. I will also copy file reading stuff from [the previous challenge](/advent-of-code-2015-02).\n\n```rust\nstruct Coordinate {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let starting_coordinates = Coordinate { x: 0, y: 0 };\n\n    let new_coord = move_santa('v', starting_coordinates);\n\n    println!(\"{:?} {:?}\", new_coord.x, new_coord.y)\n}\n\nfn move_santa(direction: char, current_coordinate: Coordinate) -> Coordinate {\n    match direction {\n        '^' => Coordinate {\n            x: current_coordinate.x,\n            y: current_coordinate.y + 1,\n        },\n        '>' => Coordinate {\n            x: current_coordinate.x + 1,\n            y: current_coordinate.y,\n        },\n        'v' => Coordinate {\n            x: current_coordinate.x,\n            y: current_coordinate.y - 1,\n        },\n        '\u003C' => Coordinate {\n            x: current_coordinate.x - 1,\n            y: current_coordinate.y,\n        },\n        _ => unreachable!(),\n    }\n}\n```\n\nThis succesfully moved the character one line down, giving us `0 -1` for `x y`. I can move on to hash sets:\n\n```rust\nlet starting_coordinates = Coordinate { x: 0, y: 0 };\n\nlet mut visited_coordinates: HashSet\u003CCoordinate> = HashSet::from([starting_coordinates]);\nlet mut current_coordinates = starting_coordinates;\n\nfor direction in directions {\n    current_coordinates = move_santa(direction, current_coordinates);\n    visited_coordinates.insert(current_coordinates);\n}\n```\n\nBut `insert()` function of hash set gives me the error ```the method `insert` exists for struct `HashSet\u003CCoordinate>`, but its trait bounds were not satisfied```. Naturally, it needs some way to compare `Coordinate`s so Rust can decide which ones are duplicates. \n\n```rust\n#[derive(Eq, Clone, Copy)]\nstruct Coordinate {\n    x: i32,\n    y: i32,\n}\n\nimpl PartialEq for Coordinate {\n    fn eq(&self, other: &Coordinate) -> bool {\n        self.x == other.x && self.y == other.y\n    }\n}\n\nimpl std::hash::Hash for Coordinate {\n    fn hash\u003CH>(&self, state: &mut H)\n    where\n        H: std::hash::Hasher,\n    {\n        state.write_i32(self.x);\n        state.finish();\n    }\n}\n```\n\nI had to \"extend\" the functionality of `Coordinate` by adding hash and `PartialEq` functions and add three traits, `Eq`, `Clone`, and `Copy` to make it work.\n\nWith everything put together, first part of the puzzle is now solved.\n\n```rust\nuse std::{collections::HashSet, fs};\n\n#[derive(Eq, Clone, Copy)]\nstruct Coordinate {\n    x: i32,\n    y: i32,\n}\n\nimpl PartialEq for Coordinate {\n    fn eq(&self, other: &Coordinate) -> bool {\n        self.x == other.x && self.y == other.y\n    }\n}\n\nimpl std::hash::Hash for Coordinate {\n    fn hash\u003CH>(&self, state: &mut H)\n    where\n        H: std::hash::Hasher,\n    {\n        state.write_i32(self.x);\n        state.finish();\n    }\n}\n\nfn main() {\n    let filename = \"data.txt\";\n\n    let contents = fs::read_to_string(filename).expect(\"Something went wrong\");\n    let directions = contents.chars();\n\n    let starting_coordinates = Coordinate { x: 0, y: 0 };\n\n    let mut visited_coordinates: HashSet\u003CCoordinate> = HashSet::from([starting_coordinates]);\n    let mut current_coordinates = starting_coordinates;\n\n    for direction in directions {\n        current_coordinates = move_santa(direction, current_coordinates);\n        visited_coordinates.insert(current_coordinates);\n    }\n\n    println!(\"{:?}\", visited_coordinates.into_iter().count())\n}\n\nfn move_santa(direction: char, current_coordinate: Coordinate) -> Coordinate {\n    match direction {\n        '^' => Coordinate {\n            x: current_coordinate.x,\n            y: current_coordinate.y + 1,\n        },\n        '>' => Coordinate {\n            x: current_coordinate.x + 1,\n            y: current_coordinate.y,\n        },\n        'v' => Coordinate {\n            x: current_coordinate.x,\n            y: current_coordinate.y - 1,\n        },\n        '\u003C' => Coordinate {\n            x: current_coordinate.x - 1,\n            y: current_coordinate.y,\n        },\n        _ => unreachable!(),\n    }\n}\n```\n\n## Part 2\n\nSanta has a robot assistant now and they follow directions in turns. How many houses do they visit? \n\nThis should be easier to implement into our current code. I just need to track one more character and move them in turns. A simple modulo operator should be enough for checking turns.\n\n```rust\nuse std::{collections::HashSet, fs};\n\n#[derive(Eq, Clone, Copy)]\nstruct Coordinate {\n    x: i32,\n    y: i32,\n}\n\nimpl PartialEq for Coordinate {\n    fn eq(&self, other: &Coordinate) -> bool {\n        self.x == other.x && self.y == other.y\n    }\n}\n\nimpl std::hash::Hash for Coordinate {\n    fn hash\u003CH>(&self, state: &mut H)\n    where\n        H: std::hash::Hasher,\n    {\n        state.write_i32(self.x);\n        state.finish();\n    }\n}\n\nfn main() {\n    let filename = \"data.txt\";\n\n    let contents = fs::read_to_string(filename).expect(\"Something went wrong\");\n    let directions = contents.chars();\n\n    let starting_coordinates = Coordinate { x: 0, y: 0 };\n\n    let mut visited_coordinates: HashSet\u003CCoordinate> = HashSet::from([starting_coordinates]);\n    let mut santa_coordinate = starting_coordinates;\n    let mut robot_coordinate = starting_coordinates;\n\n    for (idx, direction) in directions.enumerate() {\n        if idx % 2 == 0 {\n            santa_coordinate = move_character(direction, santa_coordinate);\n            visited_coordinates.insert(santa_coordinate);\n        } else {\n            robot_coordinate = move_character(direction, robot_coordinate);\n            visited_coordinates.insert(robot_coordinate);\n        }\n    }\n\n    println!(\"{:?}\", visited_coordinates.into_iter().count())\n}\n\nfn move_character(direction: char, current_coordinate: Coordinate) -> Coordinate {\n    match direction {\n        '^' => Coordinate {\n            x: current_coordinate.x,\n            y: current_coordinate.y + 1,\n        },\n        '>' => Coordinate {\n            x: current_coordinate.x + 1,\n            y: current_coordinate.y,\n        },\n        'v' => Coordinate {\n            x: current_coordinate.x,\n            y: current_coordinate.y - 1,\n        },\n        '\u003C' => Coordinate {\n            x: current_coordinate.x - 1,\n            y: current_coordinate.y,\n        },\n        _ => unreachable!(),\n    }\n}\n```\n\nThis works as expected and the second part of the puzzle is now solved, but I am leaving this behind puzzle a bit unsatisfied because I feel like I partly cheated my way through it, because I can't say I completely get how traits are working here. I kind of get it, but I also don't... I should try and write a post about it.","src/content/article/advent-of-code/2015-03.md","bbd0b88876c9745d",{"html":173,"metadata":174},"\u003Ch5 id=\"link-to-problem\">\u003Ca href=\"https://adventofcode.com/2015/day/3\">Link to problem\u003C/a>\u003C/h5>\n\u003Ch5 id=\"source-of-the-final-solution\">\u003Ca href=\"https://github.com/Ozencb/aoc/tree/main/aoc-2015-03\">Source of the final solution\u003C/a>\u003C/h5>\n\u003Ch5 id=\"other-posts-in-the-series\">\u003Ca href=\"/tags/advent-of-code\">Other posts in the series\u003C/a>\u003C/h5>\n\u003Ch2 id=\"part-1\">Part 1\u003C/h2>\n\u003Cp>Santa is delivering gifts in a two-dimensional grid of houses. He gets instructions over the radio by arrow characters (\u003Ccode>>\u003C/code>, \u003Ccode>&#x3C;\u003C/code>, \u003Ccode>v\u003C/code>, \u003Ccode>^\u003C/code>) and moves according to these. He delivers a gift in each move, but sometimes he gets wrong instructions and revisits some of the locations he has already visited.\u003C/p>\n\u003Cp>For the first part, I want to solve how many houses get at least 1 present. Starting location will also count as one present delivered.\u003C/p>\n\u003Cp>For example,\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>>\u003C/code> delivers presents to 2 houses: one at the starting location, and one to the east.\u003C/li>\n\u003Cli>\u003Ccode>^>v&#x3C;\u003C/code> delivers presents to 4 houses in a square, including twice to the house at his starting/ending location.\u003C/li>\n\u003C/ul>\n\u003Cp>If there is a data type that can hold non-duplicate items in Rust, like some sort of set, I can use it. I can iterate over the instructions, call a \u003Ccode>move()\u003C/code> function that takes the direction character and either returns the next coordinate which can then be added to hash set. These coordinates can maybe be some sort of struct. I will also copy file reading stuff from \u003Ca href=\"/advent-of-code-2015-02\">the previous challenge\u003C/a>.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">struct\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> starting_coordinates \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> new_coord \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> move_santa\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'v'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, starting_coordinates);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{:?} {:?}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, new_coord\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x, new_coord\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> move_santa\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(direction\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> char\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    match\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> direction {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        '^'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        '>'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        'v'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        '&#x3C;'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        _ \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> unreachable!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This succesfully moved the character one line down, giving us \u003Ccode>0 -1\u003C/code> for \u003Ccode>x y\u003C/code>. I can move on to hash sets:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> starting_coordinates \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> visited_coordinates\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> HashSet\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> HashSet\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\">([starting_coordinates]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinates \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> starting_coordinates;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> direction \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> directions {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    current_coordinates \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> move_santa\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(direction, current_coordinates);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    visited_coordinates\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">insert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(current_coordinates);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>But \u003Ccode>insert()\u003C/code> function of hash set gives me the error \u003Ccode>the method `insert` exists for struct `HashSet&#x3C;Coordinate>`, but its trait bounds were not satisfied\u003C/code>. Naturally, it needs some way to compare \u003Ccode>Coordinate\u003C/code>s so Rust can decide which ones are duplicates.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">#[derive(\u003C/span>\u003Cspan style=\"color:#B392F0\">Eq\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">Clone\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">Copy\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">struct\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">impl\u003C/span>\u003Cspan style=\"color:#B392F0\"> PartialEq\u003C/span>\u003Cspan style=\"color:#F97583\"> for\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> eq\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#79B8FF\">self\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, other\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> bool\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> other\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#79B8FF\"> self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> other\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">impl\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">hash\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">Hash\u003C/span>\u003Cspan style=\"color:#F97583\"> for\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> hash\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">H\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#79B8FF\">self\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, state\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;mut\u003C/span>\u003Cspan style=\"color:#B392F0\"> H\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    where\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        H\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">hash\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">Hasher\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        state\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">write_i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        state\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">finish\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>I had to “extend” the functionality of \u003Ccode>Coordinate\u003C/code> by adding hash and \u003Ccode>PartialEq\u003C/code> functions and add three traits, \u003Ccode>Eq\u003C/code>, \u003Ccode>Clone\u003C/code>, and \u003Ccode>Copy\u003C/code> to make it work.\u003C/p>\n\u003Cp>With everything put together, first part of the puzzle is now solved.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#B392F0\">collections\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">HashSet\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, fs};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">#[derive(\u003C/span>\u003Cspan style=\"color:#B392F0\">Eq\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">Clone\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">Copy\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">struct\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">impl\u003C/span>\u003Cspan style=\"color:#B392F0\"> PartialEq\u003C/span>\u003Cspan style=\"color:#F97583\"> for\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> eq\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#79B8FF\">self\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, other\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> bool\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> other\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#79B8FF\"> self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> other\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">impl\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">hash\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">Hash\u003C/span>\u003Cspan style=\"color:#F97583\"> for\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> hash\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">H\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#79B8FF\">self\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, state\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;mut\u003C/span>\u003Cspan style=\"color:#B392F0\"> H\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    where\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        H\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">hash\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">Hasher\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        state\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">write_i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        state\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">finish\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> filename \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"data.txt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> fs\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">read_to_string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(filename)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Something went wrong\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> directions \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">chars\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> starting_coordinates \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> visited_coordinates\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> HashSet\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> HashSet\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\">([starting_coordinates]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinates \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> starting_coordinates;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> direction \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> directions {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        current_coordinates \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> move_santa\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(direction, current_coordinates);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        visited_coordinates\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">insert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(current_coordinates);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{:?}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, visited_coordinates\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">into_iter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> move_santa\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(direction\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> char\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    match\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> direction {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        '^'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        '>'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        'v'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        '&#x3C;'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        _ \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> unreachable!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"part-2\">Part 2\u003C/h2>\n\u003Cp>Santa has a robot assistant now and they follow directions in turns. How many houses do they visit?\u003C/p>\n\u003Cp>This should be easier to implement into our current code. I just need to track one more character and move them in turns. A simple modulo operator should be enough for checking turns.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#B392F0\">collections\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">HashSet\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, fs};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">#[derive(\u003C/span>\u003Cspan style=\"color:#B392F0\">Eq\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">Clone\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">Copy\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">struct\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">impl\u003C/span>\u003Cspan style=\"color:#B392F0\"> PartialEq\u003C/span>\u003Cspan style=\"color:#F97583\"> for\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> eq\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#79B8FF\">self\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, other\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> bool\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> other\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#79B8FF\"> self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> other\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">impl\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">hash\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">Hash\u003C/span>\u003Cspan style=\"color:#F97583\"> for\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> hash\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">H\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#79B8FF\">self\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, state\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;mut\u003C/span>\u003Cspan style=\"color:#B392F0\"> H\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    where\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        H\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">hash\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">Hasher\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        state\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">write_i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        state\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">finish\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> filename \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"data.txt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> fs\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">read_to_string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(filename)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Something went wrong\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> directions \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">chars\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> starting_coordinates \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> visited_coordinates\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> HashSet\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> HashSet\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\">([starting_coordinates]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> santa_coordinate \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> starting_coordinates;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> robot_coordinate \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> starting_coordinates;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (idx, direction) \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> directions\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">enumerate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> idx \u003C/span>\u003Cspan style=\"color:#F97583\">%\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#F97583\"> ==\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            santa_coordinate \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> move_character\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(direction, santa_coordinate);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            visited_coordinates\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">insert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(santa_coordinate);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            robot_coordinate \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> move_character\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(direction, robot_coordinate);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            visited_coordinates\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">insert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(robot_coordinate);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{:?}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, visited_coordinates\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">into_iter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> move_character\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(direction\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> char\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    match\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> direction {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        '^'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        '>'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        'v'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        '&#x3C;'\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Coordinate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current_coordinate\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">y,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        _ \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> unreachable!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This works as expected and the second part of the puzzle is now solved, but I am leaving this behind puzzle a bit unsatisfied because I feel like I partly cheated my way through it, because I can’t say I completely get how traits are working here. I kind of get it, but I also don’t… I should try and write a post about it.\u003C/p>",{"headings":175,"localImagePaths":181,"remoteImagePaths":182,"frontmatter":183,"imagePaths":186},[176,177,178,179,180],{"depth":114,"slug":115,"text":116},{"depth":114,"slug":118,"text":119},{"depth":114,"slug":121,"text":122},{"depth":124,"slug":125,"text":126},{"depth":124,"slug":128,"text":129},[],[],{"slug":162,"title":165,"description":166,"pubDate":184,"draft":15,"tags":185},"2023-07-17",[18,19,60],[],"advent-of-code/2015-03.md","advent-of-code-2015-01",{"id":188,"data":190,"body":195,"filePath":196,"digest":197,"rendered":198,"legacyId":217},{"title":191,"description":192,"draft":15,"pubDate":193,"tags":194},"Not Quite Lisp","AoC 2015 with Rust - Day 1",["Date","2023-07-15T00:00:00.000Z"],[18,19,60],"##### [Link to problem](https://adventofcode.com/2015/day/1)\n##### [Source of the final solution](https://github.com/Ozencb/aoc/tree/main/aoc-2015-01)\n##### [Other posts in the series](/tags/advent-of-code)\n\nThis is the first post of the Aoc 2015 with Rust series, which will be a documented journey of me learning Rust language. I am a professional software developer so I already know a number of programming languages. For that I reason, I intend to skip parts that are common in other languages and, instead, focus on parts that are new or cryptic to me.\n\nI will primarily use [official docs](https://www.rust-lang.org/learn) and StackOverflow for more specific situations.\n\nToolchain is ready and installed thanks to `rustup`. I will initialize projects with `cargo init`, which should give us the base setup to work on. Aand let's go!\n\n## Part 1\n\nSanta wants to deliver presents in an apartment building but for floor directions, all he got is a set of parentheses. `(` means one floor up, `)` means one floor down. `)())())` results in `-3`, and `))((((()` results in `2`.\n\nPiece of cake. I can increment or decrement a counter as I iterate through the set of these characters accordingly.\n\nI remember some basic stuff from my 15 minutes of Rust experience like how to declare variables, variables being immutable by default, the `mut` keyword, type inference etc. So I try some hello wordish things:\n\n```rust\nfn main() {\n    let text = \"oi\";\n    println!(text);\n}\n```\n\nTo my surprise, this did not work. \n\n```\n   Compiling aoc-2015-01 v0.1.0 (/home/oz/dev/aoc/aoc-2015-01)\nerror: format argument must be a string literal\n --> src/main.rs:3:14\n  |\n3 |     println!(text);\n  |              ^^^^\n  |\nhelp: you might be missing a string literal to format with\n  |\n3 |     println!(\"{}\", text);\n  |              +++++\n\nerror: could not compile `aoc-2015-01` (bin \"aoc-2015-01\") due to previous error\n```\n\nYeh, string literals...\n\n```rust\nfn main() {\n    let text = \"oi\";\n    println!(\"{}\", text);\n}\n\n//oi\n```\n\nThe method that I will use is `string.chars()`, which apparently returns an iterator (something that can be looped through), and with a `for` loop, I can check each character in the string and act upon it. The question also includes some warnings about Unicode characters, which can resolve to multiple characters (ex: `a̐` becomes `['a', '\\u{310}']`), but since our input will only consist of parantheses, I don't have to take any measures against this issue.\n\n\n\n\n```rust\nfn main() {\n    let instructions = \"))((((()\";\n    let mut currentFloor = 0;\n\n    for char in instructions.chars() {\n        if char == '(' {\n            currentFloor = currentFloor + 1;\n        } else {\n            currentFloor = currentFloor - 1;\n        }\n    }\n\n    println!(\"{}\", currentFloor);\n}\n```\n\nI found that strings has a method called `chars()` which returns an iterator and, surely, running the code prints out `2` as expected. One minor hiccup\nand surely, it prints out `2`. \n\nOne minor issue I faced when comparing the character to an opening paranthesis was, characters are expected to be surrounded by single quotes, not double quotes but I tried the latter first and the compiler kindly warned me and steered me into the right direction:\n\n```\nerror[E0308]: mismatched types\n --> src/main.rs:6:20\n  |\n6 |         if char == \"(\" {\n  |            ----    ^^^ expected `char`, found `&str`\n  |            |\n  |            expected because this is `char`\n  |\nhelp: if you meant to write a `char` literal, use single quotes\n  |\n6 |         if char == '(' {\n  |                    ~~~\n\nFor more information about this error, try `rustc --explain E0308`.\n```\n\nNow is the time for taking an input from AoC and pasting it into the `instructions` variable, and run the code, hoping that it works as expected.\n\nAoC gave me a very long string that resolved to `280`, and pasting this number into the solution box and sending it gave me this message:\n\n```\nYour puzzle answer was 280.\n\nThe first half of this puzzle is complete! It provides one gold star: *\n```\n\nNice. On to part two!\n\nP.S: At this point, I also realized that the compiler warned me about using camel case when naming the `currentFloor` variable, so I will keep that in mind for later changes.\n\n\n## Part 2\n\nThe second part of the puzzle wants me to find the position of the first character that causes Santa to enter the basement (floor -1).\n\nI want to simply add an index to the iteration, so I can pinpoint the exact location when Santa reaches the basement for the first time.\n\n```rust\nfn main() {\n    let instructions = \"))((((()\";\n    let mut currentFloor = 0;\n    let mut hasReachedBasement = false;\n\n    for (idx, char) in instructions.chars().enumerate() {\n        if char == '(' {\n            currentFloor = currentFloor + 1;\n        } else {\n            currentFloor = currentFloor - 1;\n        }\n\n        if !hasReachedBasement && currentFloor \u003C 0 {\n           println!(\"{}\", idx + 1); \n           hasReachedBasement = true;\n        }\n    }\n\n    println!(\"{}\", currentFloor);\n}\n```\n\nAnd it works! Part 2 of our puzzle is now complete.\n\n#### Retrospective\n\n~~The first blog post in the series turned out to be a lot longer than I wanted, and I found myself to be explaining basic programming concepts unintentionally, mostly because I am new to writing blog posts. I initially planned this series to be a \"log\", rather than long explanations, but here we are... I decided to post this blog as is, but going forward, I will try to keep it as concise as possible. Let's see how it goes.~~\n\nUpdate: chopped most parts according to the retro","src/content/article/advent-of-code/2015-01.md","71040773c0c677c2",{"html":199,"metadata":200},"\u003Ch5 id=\"link-to-problem\">\u003Ca href=\"https://adventofcode.com/2015/day/1\">Link to problem\u003C/a>\u003C/h5>\n\u003Ch5 id=\"source-of-the-final-solution\">\u003Ca href=\"https://github.com/Ozencb/aoc/tree/main/aoc-2015-01\">Source of the final solution\u003C/a>\u003C/h5>\n\u003Ch5 id=\"other-posts-in-the-series\">\u003Ca href=\"/tags/advent-of-code\">Other posts in the series\u003C/a>\u003C/h5>\n\u003Cp>This is the first post of the Aoc 2015 with Rust series, which will be a documented journey of me learning Rust language. I am a professional software developer so I already know a number of programming languages. For that I reason, I intend to skip parts that are common in other languages and, instead, focus on parts that are new or cryptic to me.\u003C/p>\n\u003Cp>I will primarily use \u003Ca href=\"https://www.rust-lang.org/learn\">official docs\u003C/a> and StackOverflow for more specific situations.\u003C/p>\n\u003Cp>Toolchain is ready and installed thanks to \u003Ccode>rustup\u003C/code>. I will initialize projects with \u003Ccode>cargo init\u003C/code>, which should give us the base setup to work on. Aand let’s go!\u003C/p>\n\u003Ch2 id=\"part-1\">Part 1\u003C/h2>\n\u003Cp>Santa wants to deliver presents in an apartment building but for floor directions, all he got is a set of parentheses. \u003Ccode>(\u003C/code> means one floor up, \u003Ccode>)\u003C/code> means one floor down. \u003Ccode>)())())\u003C/code> results in \u003Ccode>-3\u003C/code>, and \u003Ccode>))((((()\u003C/code> results in \u003Ccode>2\u003C/code>.\u003C/p>\n\u003Cp>Piece of cake. I can increment or decrement a counter as I iterate through the set of these characters accordingly.\u003C/p>\n\u003Cp>I remember some basic stuff from my 15 minutes of Rust experience like how to declare variables, variables being immutable by default, the \u003Ccode>mut\u003C/code> keyword, type inference etc. So I try some hello wordish things:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> text \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"oi\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(text);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>To my surprise, this did not work.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>   Compiling aoc-2015-01 v0.1.0 (/home/oz/dev/aoc/aoc-2015-01)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>error: format argument must be a string literal\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan> --> src/main.rs:3:14\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>3 |     println!(text);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |              ^^^^\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>help: you might be missing a string literal to format with\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>3 |     println!(\"{}\", text);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |              +++++\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>error: could not compile `aoc-2015-01` (bin \"aoc-2015-01\") due to previous error\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Yeh, string literals…\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> text \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"oi\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, text);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">//oi\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The method that I will use is \u003Ccode>string.chars()\u003C/code>, which apparently returns an iterator (something that can be looped through), and with a \u003Ccode>for\u003C/code> loop, I can check each character in the string and act upon it. The question also includes some warnings about Unicode characters, which can resolve to multiple characters (ex: \u003Ccode>a̐\u003C/code> becomes \u003Ccode>['a', '\\u{310}']\u003C/code>), but since our input will only consist of parantheses, I don’t have to take any measures against this issue.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> instructions \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"))((((()\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> currentFloor \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#B392F0\"> char\u003C/span>\u003Cspan style=\"color:#F97583\"> in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> instructions\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">chars\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#B392F0\"> char\u003C/span>\u003Cspan style=\"color:#F97583\"> ==\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '('\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            currentFloor \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> currentFloor \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            currentFloor \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> currentFloor \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, currentFloor);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>I found that strings has a method called \u003Ccode>chars()\u003C/code> which returns an iterator and, surely, running the code prints out \u003Ccode>2\u003C/code> as expected. One minor hiccup\nand surely, it prints out \u003Ccode>2\u003C/code>.\u003C/p>\n\u003Cp>One minor issue I faced when comparing the character to an opening paranthesis was, characters are expected to be surrounded by single quotes, not double quotes but I tried the latter first and the compiler kindly warned me and steered me into the right direction:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>error[E0308]: mismatched types\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan> --> src/main.rs:6:20\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>6 |         if char == \"(\" {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |            ----    ^^^ expected `char`, found `&#x26;str`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |            |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |            expected because this is `char`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>help: if you meant to write a `char` literal, use single quotes\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>6 |         if char == '(' {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  |                    ~~~\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>For more information about this error, try `rustc --explain E0308`.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Now is the time for taking an input from AoC and pasting it into the \u003Ccode>instructions\u003C/code> variable, and run the code, hoping that it works as expected.\u003C/p>\n\u003Cp>AoC gave me a very long string that resolved to \u003Ccode>280\u003C/code>, and pasting this number into the solution box and sending it gave me this message:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Your puzzle answer was 280.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>The first half of this puzzle is complete! It provides one gold star: *\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Nice. On to part two!\u003C/p>\n\u003Cp>P.S: At this point, I also realized that the compiler warned me about using camel case when naming the \u003Ccode>currentFloor\u003C/code> variable, so I will keep that in mind for later changes.\u003C/p>\n\u003Ch2 id=\"part-2\">Part 2\u003C/h2>\n\u003Cp>The second part of the puzzle wants me to find the position of the first character that causes Santa to enter the basement (floor -1).\u003C/p>\n\u003Cp>I want to simply add an index to the iteration, so I can pinpoint the exact location when Santa reaches the basement for the first time.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> instructions \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"))((((()\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> currentFloor \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> hasReachedBasement \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> false\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (idx, \u003C/span>\u003Cspan style=\"color:#B392F0\">char\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> instructions\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">chars\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">enumerate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#B392F0\"> char\u003C/span>\u003Cspan style=\"color:#F97583\"> ==\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '('\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            currentFloor \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> currentFloor \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            currentFloor \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> currentFloor \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#F97583\"> !\u003C/span>\u003Cspan style=\"color:#E1E4E8\">hasReachedBasement \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> currentFloor \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">           println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, idx \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">); \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">           hasReachedBasement \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, currentFloor);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>And it works! Part 2 of our puzzle is now complete.\u003C/p>\n\u003Ch4 id=\"retrospective\">Retrospective\u003C/h4>\n\u003Cp>\u003Cdel>The first blog post in the series turned out to be a lot longer than I wanted, and I found myself to be explaining basic programming concepts unintentionally, mostly because I am new to writing blog posts. I initially planned this series to be a “log”, rather than long explanations, but here we are… I decided to post this blog as is, but going forward, I will try to keep it as concise as possible. Let’s see how it goes.\u003C/del>\u003C/p>\n\u003Cp>Update: chopped most parts according to the retro\u003C/p>",{"headings":201,"localImagePaths":211,"remoteImagePaths":212,"frontmatter":213,"imagePaths":216},[202,203,204,205,206,207],{"depth":114,"slug":115,"text":116},{"depth":114,"slug":118,"text":119},{"depth":114,"slug":121,"text":122},{"depth":124,"slug":125,"text":126},{"depth":124,"slug":128,"text":129},{"depth":208,"slug":209,"text":210},4,"retrospective","Retrospective",[],[],{"slug":188,"title":191,"description":192,"pubDate":214,"draft":15,"tags":215},"2023-07-15",[18,19,60],[],"advent-of-code/2015-01.md","advent-of-code-2015-02",{"id":218,"data":220,"body":225,"filePath":226,"digest":227,"rendered":228,"legacyId":247},{"title":221,"description":222,"draft":15,"pubDate":223,"tags":224},"I Was Told There Would Be No Math","AoC 2015 with Rust - Day 2",["Date","2023-07-16T00:00:00.000Z"],[18,19,60],"##### [Link to problem](https://adventofcode.com/2015/day/2)\n##### [Source of the final solution](https://github.com/Ozencb/aoc/tree/main/aoc-2015-02)\n##### [Other posts in the series](/tags/advent-of-code)\n\n## Part 1\n\nElves are wrapping gift boxes (rectangular prism), and they need some wrapping paper. They want to find out the exact size they need to order. The formula for calculating the size is:\n\n`(2*l*w + 2*w*h + 2*h*l) + smallest side's area`\n\nFor example, a present with dimensions `2x3x4` requires `2*6 + 2*12 + 2*8 = 52` square feet of wrapping paper plus `6` square feet of slack, for a total of `58` square feet.\n\nThe input will be a list of such dimensions and the output of the program should be the total square feet of wrapping paper they should order.\n\nIt looks like I will have to find a suitable data type that can hold width/length/height values. I can either use some sort of struct or an array. Arrays should be the more suitable data type for this case.\n\n[Arrays and Slices](https://doc.rust-lang.org/rust-by-example/primitives/array.html) page of Rust doc says that arrays require defining their lengths during compilation, which is not really suitable for holding the list of gift sizes since I cannot predict the length of it. So, I am going go with the alternative that can has a dynamic size: slices. The syntax looks something like this:\n\n```rust\nlet empty_array: [u32; 0] = [];\n```\n\nBut I can use array for holding the actual sizes of each gifts respectively in arrays with fixed-sizes of three, for width, length, and height. So, arrays within a slice should do it.\n\n```rust\nlet gift_list: [[i32; 3]; 0] = [];\n```\n\nI will also need to read and parse a text file that will hold the list of gifts, with each gift size in one line in `1x1x1` format.\n\nWith a quick search, I find `fs` module under Rust's standard library, which has a method called `read_to_string` that takes in a file path as its sole parameter, and returns the contents as the string.\n\nWell... not quite. Actually, it returns a `Result` enum which has two variants, `Ok()` and `Err()`. If everything goes accordingly, an `Ok()` case should resolve succesfully, giving us the string that I want. I paste the input into a file titled `data.txt` and try to print its contents. I initially encountered an error practically saying that `data.txt` did not exist, because Rust expected the file to be in the root directory of the project, not at the same level with `main.rs` under `src`. Moving it to the root did the trick. Anyway, our code now looks like this:\n\n```rust\nuse std::fs;\n\nfn main() {\n    let gift_list: [[i32; 3]; 0] = [];\n    let filename = \"data.txt\";\n\n    let contents = fs::read_to_string(filename);\n\n    match contents {\n        Ok(v) => println!(\"contents of the file: {}\", v),\n        Err(e) => println!(\"error parsing header: {}\", e),\n    }\n}\n```\n\nThe [Result](https://doc.rust-lang.org/std/result/enum.Result.html#) page on docs also show some other methods for handling error cases like `expect()`, which also looks nice (but there are some warnings about its usage, which I can wisely ignore).\n\n```rust\nuse std::fs;\n\nfn main() {\n    let gift_list: [[i32; 3]; 0] = [];\n    let filename = \"data.txt\";\n\n    let contents = fs::read_to_string(filename).expect(\"Something went wrong\");\n\n    println!(\"With text:\\n{contents}\");\n}\n```\n\nI now have all the contents of the file as a string in `contents` variable. I now have to parse it. I want to split this string into separate lines first, effectively separating each gift size, then split each gift size by looking at the `x`. Like many other languages, Rust has a `split()` method. I can call this method with a \"newline character\" but, while looking for possible solutions, I also saw a method called `lines()`, which supposedly splits a string into separate lines. I can use this one for the first part. Note that it returns a `Lines` iterator, but it's fine. I want to iterate on this anyway.\n\n```rust\nfn main() {\n    let gift_list: [[i32; 3]; 0] = [];\n    let filename = \"data.txt\";\n\n    let contents = fs::read_to_string(filename).expect(\"Something went wrong\");\n\n    let lines = contents.lines();\n\n    for line in lines {\n       // do stuff with line \n    }\n}\n```\n\nI used `split()` as mentioned, which also returns an iterator. \n\n```rust\nlet sizes = line.split('x');\n```\n\nI assume that sizes can only have three elements for w/l/h, so it would be handy to directly cast them into an array of size three while also casting strings into integers so I can do math. Again, I find lots of options, the simplest being a good old `for` loop. \n\n```rust\nfor line in lines {\n    let sizes = line.split('x');\n\n    for size in sizes {\n        println!(\"{}\", size);\n    }\n}\n```\n\nBut I want to slowly leave the intuitive ways aside and do it the Rust way.\n\n```rust\nlet sizes = line.split('x').collect::\u003CVec\u003C&str>>();\n```\n\nThis lets me convert the `Split` type to a good old vector. Combining multiple searches about how to map over iterators and how to cast strings to integers, I came up with a solution like this:\n\n```rust\nlet sizes = line\n    .split('x')\n    .map(|size| size.parse::\u003Ci32>().unwrap())\n    .collect::\u003CVec\u003Ci32>>();\n```\n\nAt this point, I realize that it is not as easy as I thought to push elements into slices in Rust so while trying to circumvent the issue. Then I realize, I now have line count of the input. So, instead of a slice, I can maybe declare an array with a fixed-size of line count?\n\nAand, Rust did not like that too. Rust wants to see the array size at compile time, but I am trying to assign it at runtime by looking at the line count. I checked if `Vec`s are any different than slices or arrays, and the official docs say that they are resizable, so I try using a vector instead.\n\n```rust\nuse std::fs;\n\nfn main() {\n    let filename = \"data.txt\";\n\n    let contents = fs::read_to_string(filename).expect(\"Something went wrong\");\n\n    let lines = contents.lines();\n    let line_count = lines.clone().count();\n\n    let mut gift_list = vec![vec![0; 3]; line_count];\n\n    for line in lines {\n        let sizes = line\n            .split('x')\n            .map(|size| size.parse::\u003Ci32>().unwrap())\n            .collect::\u003CVec\u003Ci32>>();\n\n        gift_list.push(sizes);\n    }\n\n    for gift in gift_list {\n        for size in gift {\n            println!(\"{}\", size);\n        }\n    }\n}\n```\n\nAlso note that I cloned `lines` before checking its size, otherwise it gets consumed and can no longer be used. Something's going on here (ownership?), but I will look into this later.\n\nCool, I can iterate over the `gift_list` that I have put together. At this point, I can maybe call a function that takes in a vector. I devised something like this but all kinds of mutability rules threw all kinds of errors.\n\n```rust\nuse std::fs;\n\nfn main() {\n    let filename = \"data.txt\";\n\n    let contents = fs::read_to_string(filename).expect(\"Something went wrong\");\n\n    let lines = contents.lines();\n    let line_count = lines.clone().count();\n\n    let mut gift_list = vec![vec![0; 3]; line_count];\n\n    for line in lines {\n        let sizes = line\n            .split('x')\n            .map(|size| size.parse::\u003Ci32>().unwrap())\n            .collect::\u003CVec\u003Ci32>>();\n\n        gift_list.push(sizes);\n    }\n\n    let total_area: i32 = gift_list.into_iter().map(|v| calculate_area(v)).sum();\n\n    println!(\"{}\", total_area);\n}\n\n// (2*l*w + 2*w*h + 2*h*l) + smallest side's area\nfn calculate_area(v: Vec\u003Ci32>) -> i32 {\n    v.sort();\n    let smallest_side = v[0] * v[1]; // since vector is now sorted, we can use first two elements for smallest side\n    (2 * v[0] * v[1]) + (2 * v[0] * v[2]) + (2 * v[1] * v[2]) + smallest_side\n}\n```\n\nRust wants extra annotations for values that I want to change (mutate). I add this to function's parameter definitions.\n\nFinally, our program seems ready to solve the first part of the puzzle.\nAnd, nice. First try! First star.\n\n## Part 2\n\nElves now need ribbons to wrap the gifts. They need some to tie it and some for making a bow.\nThe required length for tying it is the length of its smallest perimeter. And the bow is equal to its cubic feet.\n\nFor example, a present with dimensions 2x3x4 requires 2+2+3+3 = 10 feet of ribbon to wrap the present plus 2*3*4 = 24 feet of ribbon for the bow, for a total of 34 feet.\n\nIt seems I will have to work on sorted vectors again so I move the sorting part to where I initially populate the vector, and fix mut annotation accordingly:\n\n```rust\nuse std::fs;\n\nfn main() {\n    let filename = \"data.txt\";\n\n    let contents = fs::read_to_string(filename).expect(\"Something went wrong\");\n\n    let lines = contents.lines();\n    let line_count = lines.clone().count();\n\n    let mut gift_list = vec![vec![0; 3]; line_count];\n\n    for line in lines {\n        let mut sizes = line\n            .split('x')\n            .map(|size| size.parse::\u003Ci32>().unwrap())\n            .collect::\u003CVec\u003Ci32>>();\n\n        sizes.sort();\n\n        gift_list.push(sizes);\n    }\n\n    let total_area: i32 = gift_list.into_iter().map(|v| calculate_area(v)).sum();\n\n    println!(\"{}\", total_area);\n}\n\n// (2*l*w + 2*w*h + 2*h*l) + smallest side's area\nfn calculate_area(v: Vec\u003Ci32>) -> i32 {\n    let smallest_side = v[0] * v[1]; // since vector is now sorted, we can use first two elements for smallest side\n    (2 * v[0] * v[1]) + (2 * v[0] * v[2]) + (2 * v[1] * v[2]) + smallest_side\n}\n```\n\nI will add two additional functions for ribbons: one for tying and one for the bow, and an additional function that adds the two.\n\n```rust\nfn get_ribbon_size(v: Vec\u003Ci32>) -> i32 {\n    get_smallest_perimeter(v) + get_volume(v)\n}\n\nfn get_smallest_perimeter(v: Vec\u003Ci32>) -> i32 {\n    (v[0] * 2) + (v[1] * 2)\n}\n\nfn get_volume(v: Vec\u003Ci32>) -> i32 {\n    v[0] * v[1] * v[2]\n}\n```\n\n`get_ribbon_size` tells me something about the second function calls argument, something with moved values... the time has come. \n\n### Obligatory sidebar: Borrow Checking\n\nRust does not utilize a garbage collector to free up memory that is not needed anymore, but they say it is as memory-safe as it gets. Rust, by design, wants to prevent us moving data around freely to better decide when to free up memory. It essentialy gives us the convenience of garbage-collection without making us manually manage the memory. All thanks to Rust's unique ownership model.\n\nWhen passing data around, I can:\n- Directly pass the value, giving up the ownership in process\n- Clone the value and work on the clone instead\n- Pass a reference, letting the borrower use it until it's done\n\n\nPutting it all together, I get something like this:\n\n```rust\nuse std::fs;\n\nfn main() {\n    let filename = \"data.txt\";\n\n    let contents = fs::read_to_string(filename).expect(\"Something went wrong\");\n\n    let lines = contents.lines();\n    let line_count = lines.clone().count();\n\n    let mut gift_list = vec![vec![0; 3]; line_count];\n\n    for line in lines {\n        let mut sizes = line\n            .split('x')\n            .map(|size| size.parse::\u003Ci32>().unwrap())\n            .collect::\u003CVec\u003Ci32>>();\n\n        sizes.sort();\n\n        gift_list.push(sizes);\n    }\n\n    let total_area: i32 = gift_list\n        .clone()\n        .into_iter()\n        .map(|v| calculate_area(v))\n        .sum();\n    let ribbon_length: i32 = gift_list\n        .clone()\n        .into_iter()\n        .map(|v| get_ribbon_size(&v))\n        .sum();\n\n    println!(\n        \"Wrapping paper needed: {}\\nRibbon needed: {}\",\n        total_area, ribbon_length\n    );\n}\n\n// (2*l*w + 2*w*h + 2*h*l) + smallest side's area\nfn calculate_area(v: Vec\u003Ci32>) -> i32 {\n    let smallest_side = v[0] * v[1]; // since vector is now sorted, we can use first two elements for smallest side\n    (2 * v[0] * v[1]) + (2 * v[0] * v[2]) + (2 * v[1] * v[2]) + smallest_side\n}\n\nfn get_ribbon_size(v: &Vec\u003Ci32>) -> i32 {\n    get_smallest_perimeter(v) + get_volume(v)\n}\n\nfn get_smallest_perimeter(v: &Vec\u003Ci32>) -> i32 {\n    (v[0] * 2) + (v[1] * 2)\n}\n\nfn get_volume(v: &Vec\u003Ci32>) -> i32 {\n    v[0] * v[1] * v[2]\n}\n```\n\nAgain, this works as expected. Nice.","src/content/article/advent-of-code/2015-02.md","ec93bf4d6e9a2586",{"html":229,"metadata":230},"\u003Ch5 id=\"link-to-problem\">\u003Ca href=\"https://adventofcode.com/2015/day/2\">Link to problem\u003C/a>\u003C/h5>\n\u003Ch5 id=\"source-of-the-final-solution\">\u003Ca href=\"https://github.com/Ozencb/aoc/tree/main/aoc-2015-02\">Source of the final solution\u003C/a>\u003C/h5>\n\u003Ch5 id=\"other-posts-in-the-series\">\u003Ca href=\"/tags/advent-of-code\">Other posts in the series\u003C/a>\u003C/h5>\n\u003Ch2 id=\"part-1\">Part 1\u003C/h2>\n\u003Cp>Elves are wrapping gift boxes (rectangular prism), and they need some wrapping paper. They want to find out the exact size they need to order. The formula for calculating the size is:\u003C/p>\n\u003Cp>\u003Ccode>(2*l*w + 2*w*h + 2*h*l) + smallest side's area\u003C/code>\u003C/p>\n\u003Cp>For example, a present with dimensions \u003Ccode>2x3x4\u003C/code> requires \u003Ccode>2*6 + 2*12 + 2*8 = 52\u003C/code> square feet of wrapping paper plus \u003Ccode>6\u003C/code> square feet of slack, for a total of \u003Ccode>58\u003C/code> square feet.\u003C/p>\n\u003Cp>The input will be a list of such dimensions and the output of the program should be the total square feet of wrapping paper they should order.\u003C/p>\n\u003Cp>It looks like I will have to find a suitable data type that can hold width/length/height values. I can either use some sort of struct or an array. Arrays should be the more suitable data type for this case.\u003C/p>\n\u003Cp>\u003Ca href=\"https://doc.rust-lang.org/rust-by-example/primitives/array.html\">Arrays and Slices\u003C/a> page of Rust doc says that arrays require defining their lengths during compilation, which is not really suitable for holding the list of gift sizes since I cannot predict the length of it. So, I am going go with the alternative that can has a dynamic size: slices. The syntax looks something like this:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> empty_array\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#B392F0\">u32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>But I can use array for holding the actual sizes of each gifts respectively in arrays with fixed-sizes of three, for width, length, and height. So, arrays within a slice should do it.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [[\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>I will also need to read and parse a text file that will hold the list of gifts, with each gift size in one line in \u003Ccode>1x1x1\u003C/code> format.\u003C/p>\n\u003Cp>With a quick search, I find \u003Ccode>fs\u003C/code> module under Rust’s standard library, which has a method called \u003Ccode>read_to_string\u003C/code> that takes in a file path as its sole parameter, and returns the contents as the string.\u003C/p>\n\u003Cp>Well… not quite. Actually, it returns a \u003Ccode>Result\u003C/code> enum which has two variants, \u003Ccode>Ok()\u003C/code> and \u003Ccode>Err()\u003C/code>. If everything goes accordingly, an \u003Ccode>Ok()\u003C/code> case should resolve succesfully, giving us the string that I want. I paste the input into a file titled \u003Ccode>data.txt\u003C/code> and try to print its contents. I initially encountered an error practically saying that \u003Ccode>data.txt\u003C/code> did not exist, because Rust expected the file to be in the root directory of the project, not at the same level with \u003Ccode>main.rs\u003C/code> under \u003Ccode>src\u003C/code>. Moving it to the root did the trick. Anyway, our code now looks like this:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">fs;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [[\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> filename \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"data.txt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> fs\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">read_to_string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(filename);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    match\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        Ok\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"contents of the file: {}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, v),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        Err\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(e) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"error parsing header: {}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, e),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The \u003Ca href=\"https://doc.rust-lang.org/std/result/enum.Result.html#\">Result\u003C/a> page on docs also show some other methods for handling error cases like \u003Ccode>expect()\u003C/code>, which also looks nice (but there are some warnings about its usage, which I can wisely ignore).\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">fs;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [[\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> filename \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"data.txt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> fs\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">read_to_string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(filename)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Something went wrong\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"With text:\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">{contents}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>I now have all the contents of the file as a string in \u003Ccode>contents\u003C/code> variable. I now have to parse it. I want to split this string into separate lines first, effectively separating each gift size, then split each gift size by looking at the \u003Ccode>x\u003C/code>. Like many other languages, Rust has a \u003Ccode>split()\u003C/code> method. I can call this method with a “newline character” but, while looking for possible solutions, I also saw a method called \u003Ccode>lines()\u003C/code>, which supposedly splits a string into separate lines. I can use this one for the first part. Note that it returns a \u003Ccode>Lines\u003C/code> iterator, but it’s fine. I want to iterate on this anyway.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [[\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> filename \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"data.txt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> fs\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">read_to_string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(filename)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Something went wrong\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">lines\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">       // do stuff with line \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>I used \u003Ccode>split()\u003C/code> as mentioned, which also returns an iterator.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sizes \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'x'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>I assume that sizes can only have three elements for w/l/h, so it would be handy to directly cast them into an array of size three while also casting strings into integers so I can do math. Again, I find lots of options, the simplest being a good old \u003Ccode>for\u003C/code> loop.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sizes \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'x'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> size \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sizes {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, size);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>But I want to slowly leave the intuitive ways aside and do it the Rust way.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sizes \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'x'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">collect\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>>();\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This lets me convert the \u003Ccode>Split\u003C/code> type to a good old vector. Combining multiple searches about how to map over iterators and how to cast strings to integers, I came up with a solution like this:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sizes \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    .\u003C/span>\u003Cspan style=\"color:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'x'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    .\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">size\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> size\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">parse\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">unwrap\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    .\u003C/span>\u003Cspan style=\"color:#B392F0\">collect\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>>();\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>At this point, I realize that it is not as easy as I thought to push elements into slices in Rust so while trying to circumvent the issue. Then I realize, I now have line count of the input. So, instead of a slice, I can maybe declare an array with a fixed-size of line count?\u003C/p>\n\u003Cp>Aand, Rust did not like that too. Rust wants to see the array size at compile time, but I am trying to assign it at runtime by looking at the line count. I checked if \u003Ccode>Vec\u003C/code>s are any different than slices or arrays, and the official docs say that they are resizable, so I try using a vector instead.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">fs;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> filename \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"data.txt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> fs\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">read_to_string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(filename)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Something went wrong\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">lines\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line_count \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">clone\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> vec!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#B392F0\">vec!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; line_count];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sizes \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'x'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">size\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> size\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">parse\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">unwrap\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">collect\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>>();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        gift_list\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(sizes);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> size \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">            println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, size);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Also note that I cloned \u003Ccode>lines\u003C/code> before checking its size, otherwise it gets consumed and can no longer be used. Something’s going on here (ownership?), but I will look into this later.\u003C/p>\n\u003Cp>Cool, I can iterate over the \u003Ccode>gift_list\u003C/code> that I have put together. At this point, I can maybe call a function that takes in a vector. I devised something like this but all kinds of mutability rules threw all kinds of errors.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">fs;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> filename \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"data.txt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> fs\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">read_to_string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(filename)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Something went wrong\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">lines\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line_count \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">clone\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> vec!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#B392F0\">vec!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; line_count];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sizes \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'x'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">size\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> size\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">parse\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">unwrap\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">collect\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>>();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        gift_list\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(sizes);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> total_area\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">into_iter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">v\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#B392F0\"> calculate_area\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v))\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">sum\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, total_area);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// (2*l*w + 2*w*h + 2*h*l) + smallest side's area\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> calculate_area\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    v\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">sort\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> smallest_side \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; \u003C/span>\u003Cspan style=\"color:#6A737D\">// since vector is now sorted, we can use first two elements for smallest side\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    (\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> smallest_side\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Rust wants extra annotations for values that I want to change (mutate). I add this to function’s parameter definitions.\u003C/p>\n\u003Cp>Finally, our program seems ready to solve the first part of the puzzle.\nAnd, nice. First try! First star.\u003C/p>\n\u003Ch2 id=\"part-2\">Part 2\u003C/h2>\n\u003Cp>Elves now need ribbons to wrap the gifts. They need some to tie it and some for making a bow.\nThe required length for tying it is the length of its smallest perimeter. And the bow is equal to its cubic feet.\u003C/p>\n\u003Cp>For example, a present with dimensions 2x3x4 requires 2+2+3+3 = 10 feet of ribbon to wrap the present plus 2\u003Cem>3\u003C/em>4 = 24 feet of ribbon for the bow, for a total of 34 feet.\u003C/p>\n\u003Cp>It seems I will have to work on sorted vectors again so I move the sorting part to where I initially populate the vector, and fix mut annotation accordingly:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">fs;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> filename \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"data.txt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> fs\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">read_to_string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(filename)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Something went wrong\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">lines\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line_count \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">clone\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> vec!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#B392F0\">vec!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; line_count];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sizes \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'x'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">size\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> size\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">parse\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">unwrap\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">collect\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>>();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        sizes\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">sort\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        gift_list\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(sizes);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> total_area\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">into_iter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">v\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#B392F0\"> calculate_area\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v))\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">sum\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, total_area);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// (2*l*w + 2*w*h + 2*h*l) + smallest side's area\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> calculate_area\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> smallest_side \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; \u003C/span>\u003Cspan style=\"color:#6A737D\">// since vector is now sorted, we can use first two elements for smallest side\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    (\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> smallest_side\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>I will add two additional functions for ribbons: one for tying and one for the bow, and an additional function that adds the two.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> get_ribbon_size\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    get_smallest_perimeter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#B392F0\"> get_volume\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> get_smallest_perimeter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    (v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> get_volume\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Ccode>get_ribbon_size\u003C/code> tells me something about the second function calls argument, something with moved values… the time has come.\u003C/p>\n\u003Ch3 id=\"obligatory-sidebar-borrow-checking\">Obligatory sidebar: Borrow Checking\u003C/h3>\n\u003Cp>Rust does not utilize a garbage collector to free up memory that is not needed anymore, but they say it is as memory-safe as it gets. Rust, by design, wants to prevent us moving data around freely to better decide when to free up memory. It essentialy gives us the convenience of garbage-collection without making us manually manage the memory. All thanks to Rust’s unique ownership model.\u003C/p>\n\u003Cp>When passing data around, I can:\u003C/p>\n\u003Cul>\n\u003Cli>Directly pass the value, giving up the ownership in process\u003C/li>\n\u003Cli>Clone the value and work on the clone instead\u003C/li>\n\u003Cli>Pass a reference, letting the borrower use it until it’s done\u003C/li>\n\u003C/ul>\n\u003Cp>Putting it all together, I get something like this:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">fs;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> filename \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"data.txt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> fs\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">read_to_string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(filename)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Something went wrong\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> contents\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">lines\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line_count \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">clone\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> vec!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#B392F0\">vec!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; line_count];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sizes \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'x'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">size\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> size\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">parse\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">unwrap\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">collect\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>>();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        sizes\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">sort\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        gift_list\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(sizes);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> total_area\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">clone\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">into_iter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">v\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#B392F0\"> calculate_area\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">sum\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ribbon_length\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gift_list\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">clone\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">into_iter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#E1E4E8\">v\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#B392F0\"> get_ribbon_size\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">v))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">sum\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"Wrapping paper needed: {}\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">Ribbon needed: {}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        total_area, ribbon_length\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// (2*l*w + 2*w*h + 2*h*l) + smallest side's area\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> calculate_area\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> smallest_side \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; \u003C/span>\u003Cspan style=\"color:#6A737D\">// since vector is now sorted, we can use first two elements for smallest side\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    (\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> smallest_side\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> get_ribbon_size\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    get_smallest_perimeter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#B392F0\"> get_volume\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> get_smallest_perimeter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    (v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> get_volume\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>) \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> i32\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Again, this works as expected. Nice.\u003C/p>",{"headings":231,"localImagePaths":241,"remoteImagePaths":242,"frontmatter":243,"imagePaths":246},[232,233,234,235,236,237],{"depth":114,"slug":115,"text":116},{"depth":114,"slug":118,"text":119},{"depth":114,"slug":121,"text":122},{"depth":124,"slug":125,"text":126},{"depth":124,"slug":128,"text":129},{"depth":238,"slug":239,"text":240},3,"obligatory-sidebar-borrow-checking","Obligatory sidebar: Borrow Checking",[],[],{"slug":218,"title":221,"description":222,"pubDate":244,"draft":15,"tags":245},"2023-07-16",[18,19,60],[],"advent-of-code/2015-02.md","proxmox-mount-points",{"id":248,"data":250,"body":255,"filePath":256,"digest":257,"rendered":258,"legacyId":277},{"title":251,"draft":78,"pubDate":252,"tags":253},"Sharing mountpoints on unprivileged Proxmox LXCs",["Date","2023-07-12T00:00:00.000Z"],[254,74],"proxmox","Unprivileged LXCs' increased security and isolation, unfortunately, bring about some difficulties when sharing resources between the host and the guest. This issue often shows up as `Permission denied` or `Operation not permitted` errors when trying to access a directory on the host. Usual battle tactics like `chown` and `chmod` make no difference. One could resort to pure network-based solutions, but that’s not really efficient. Fortunately, it is possible to map a guest user’s UID/GID to that of the host by creating another user on the host with the right settings and permissions.\n\n## Binding mountpoints\n\nBind mounts allow us to access previously mounted directories from a different location in [POSIX](https://en.wikipedia.org/wiki/POSIX) systems. Proxmox can bind mount points between the host and the guest either by running this command:\n\n```\npct set \u003CCONTAINER_ID> -mp0 \u003CABSOLUTE_PATH_ON_HOST>,mp=\u003CABSOLUTE_PATH_ON_GUEST>\n```\n\nor by adding this line to the LXC config file under `/etc/pve/lxc/\u003CCONTAINER_ID>.conf` on the host:\n\n```\nmp0: \u003CABSOLUTE_PATH_ON_HOST>,mp=\u003CABSOLUTE_PATH_ON_GUEST>\n```\n\nThis will allow you to access the host’s shared directory from the container, but the contents will only be readable. For full access, we need to `chown` the mounted directory on the host with the correct UID/GID.\n\n## Ownership\n\nBy default, unprivileged LXCs map guest system users on the host by applying an offset, usually starting at `100000`. This mapping comes from `/etc/subuid` and `/etc/subgid` on the host. Proxmox typically uses `100000` as the starting offset, but it can differ depending on your setup.\n\nFor example, `root` inside the container (`0:0`) is mapped to `100000:100000` on the host. Likewise, guest UID/GID `1:1` becomes `100001:100001` on the host.\n\nSo, if all we need is for the container’s `root` user to access the mount point, we can run this on the host:\n\n```\nchown 100000:100000 \u003CMOUNT_POINT_ON_HOST> -R\n```\n\nFor other users, the general formula is:\n\n```\nHost UID/GID = Guest UID/GID + OFFSET\n```\n\n(where `OFFSET` is usually `100000` but may vary).\n\nFor example, if you create a user inside the guest with UID `1000`:\n\n```\n# On the guest\nuseradd -u 1000 new-user-name\n```\n\nthen on the host, this user will appear as UID `101000` (assuming the `100000` offset). To give proper ownership, you need to run:\n\n```\n# On the host\nchown 101000:101000 \u003CMOUNT_POINT_ON_HOST> -R\n```\n\n> Note: If you want host users and container users to share the exact same UID/GID without the offset, you can configure custom ID mappings in the LXC config using `lxc.idmap`, but that requires extra setup.\n\n#### Sources\n\n- https://itsembedded.com/sysadmin/proxmox_bind_unprivileged_lxc/","src/content/article/homelab/proxmox/proxmox-mount-points.md","cff9669d61539675",{"html":259,"metadata":260},"\u003Cp>Unprivileged LXCs’ increased security and isolation, unfortunately, bring about some difficulties when sharing resources between the host and the guest. This issue often shows up as \u003Ccode>Permission denied\u003C/code> or \u003Ccode>Operation not permitted\u003C/code> errors when trying to access a directory on the host. Usual battle tactics like \u003Ccode>chown\u003C/code> and \u003Ccode>chmod\u003C/code> make no difference. One could resort to pure network-based solutions, but that’s not really efficient. Fortunately, it is possible to map a guest user’s UID/GID to that of the host by creating another user on the host with the right settings and permissions.\u003C/p>\n\u003Ch2 id=\"binding-mountpoints\">Binding mountpoints\u003C/h2>\n\u003Cp>Bind mounts allow us to access previously mounted directories from a different location in \u003Ca href=\"https://en.wikipedia.org/wiki/POSIX\">POSIX\u003C/a> systems. Proxmox can bind mount points between the host and the guest either by running this command:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>pct set &#x3C;CONTAINER_ID> -mp0 &#x3C;ABSOLUTE_PATH_ON_HOST>,mp=&#x3C;ABSOLUTE_PATH_ON_GUEST>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>or by adding this line to the LXC config file under \u003Ccode>/etc/pve/lxc/&#x3C;CONTAINER_ID>.conf\u003C/code> on the host:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>mp0: &#x3C;ABSOLUTE_PATH_ON_HOST>,mp=&#x3C;ABSOLUTE_PATH_ON_GUEST>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This will allow you to access the host’s shared directory from the container, but the contents will only be readable. For full access, we need to \u003Ccode>chown\u003C/code> the mounted directory on the host with the correct UID/GID.\u003C/p>\n\u003Ch2 id=\"ownership\">Ownership\u003C/h2>\n\u003Cp>By default, unprivileged LXCs map guest system users on the host by applying an offset, usually starting at \u003Ccode>100000\u003C/code>. This mapping comes from \u003Ccode>/etc/subuid\u003C/code> and \u003Ccode>/etc/subgid\u003C/code> on the host. Proxmox typically uses \u003Ccode>100000\u003C/code> as the starting offset, but it can differ depending on your setup.\u003C/p>\n\u003Cp>For example, \u003Ccode>root\u003C/code> inside the container (\u003Ccode>0:0\u003C/code>) is mapped to \u003Ccode>100000:100000\u003C/code> on the host. Likewise, guest UID/GID \u003Ccode>1:1\u003C/code> becomes \u003Ccode>100001:100001\u003C/code> on the host.\u003C/p>\n\u003Cp>So, if all we need is for the container’s \u003Ccode>root\u003C/code> user to access the mount point, we can run this on the host:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>chown 100000:100000 &#x3C;MOUNT_POINT_ON_HOST> -R\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>For other users, the general formula is:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Host UID/GID = Guest UID/GID + OFFSET\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>(where \u003Ccode>OFFSET\u003C/code> is usually \u003Ccode>100000\u003C/code> but may vary).\u003C/p>\n\u003Cp>For example, if you create a user inside the guest with UID \u003Ccode>1000\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan># On the guest\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>useradd -u 1000 new-user-name\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>then on the host, this user will appear as UID \u003Ccode>101000\u003C/code> (assuming the \u003Ccode>100000\u003C/code> offset). To give proper ownership, you need to run:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan># On the host\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>chown 101000:101000 &#x3C;MOUNT_POINT_ON_HOST> -R\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cblockquote>\n\u003Cp>Note: If you want host users and container users to share the exact same UID/GID without the offset, you can configure custom ID mappings in the LXC config using \u003Ccode>lxc.idmap\u003C/code>, but that requires extra setup.\u003C/p>\n\u003C/blockquote>\n\u003Ch4 id=\"sources\">Sources\u003C/h4>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://itsembedded.com/sysadmin/proxmox_bind_unprivileged_lxc/\">https://itsembedded.com/sysadmin/proxmox_bind_unprivileged_lxc/\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":261,"localImagePaths":271,"remoteImagePaths":272,"frontmatter":273,"imagePaths":276},[262,265,268],{"depth":124,"slug":263,"text":264},"binding-mountpoints","Binding mountpoints",{"depth":124,"slug":266,"text":267},"ownership","Ownership",{"depth":208,"slug":269,"text":270},"sources","Sources",[],[],{"slug":248,"title":251,"pubDate":274,"draft":78,"tags":275},"2023-07-12",[254,74],[],"homelab/proxmox/proxmox-mount-points.md","pinhole-redesign",{"id":278,"data":280,"body":286,"filePath":287,"assetImports":288,"digest":299,"rendered":300,"legacyId":320},{"title":281,"draft":78,"pubDate":282,"tags":283},"Pinhole Redesign",["Date","2023-07-20T00:00:00.000Z"],[284,285],"photography","pinhole","###### This is a write-in-progress post that I will be updating over time.\n\nI was into designing and building my own cameras roughly ten years ago, and I have been meaning to get back into it for quite some time now. I recently came across some of the old photographs I took with these cameras and it rekindled the passion I had for the craft.\n\nI decided to build several different cameras again, fixing the issues that previous builds had, and document the whole process in a series of blog posts.\n\nIf everything goes according to plan, I will build:\n- A 35mm panoramic with curved film plane\n- A compact, half frame 35mm with short focal length\n- A 6x6\n\nI want all of these to sport a 1/4\" tripod mount, replaceable pinhole plates, magnetic filter mounts, a lockable shutter that can be operated manually or with a cable release, a screw-lock body, leak-safe and precision film advance knobs, film counter (for medium-format), magnetic accessory mounts (spirit levels, viewfinders etc.), and hassle-free film spools (especially for the 35mm).\n\n## The Old Panoramic Pinhole\n\n![img](./assets/pinhole-old.jpeg)\n![img](./assets/pinhole-old-2.jpeg)\n\nThis was my favorite camera to shoot with for a long time. I made it from whatever material I had at home at the time: wood from an old cigar box, metal sheet from a soda can, knobs from skateboard bushings, one spool-catch (or whatever they are called) from an old FM radio antenna and the other one from a scrapped Zorki 4K, packaging paper, electrical tape, and other random stuff that I found around.\n\nI had even drawn a now-lost schematic diagrams before building it to make sure I was doing everything right.\n\nAs you can tell, it is a product-of-love but it had its problems.\n\nNamely, unintentional multiple exposures:\n\n![img](./assets/problem-1.jpeg)\n![img](./assets/problem-2.jpeg)\n\nPoor film alignment:\n\n![img](./assets/problem-3.jpeg)\n\nOccasional light leaks:\n\n![img](./assets/problem-4.jpeg)\n\nand others that I cannot remember for now. So, it wasn't the most reliable thing ever. But, when it worked, it worked beautifully.\n\n![img](./assets/panoramic-1.jpeg)\n![img](./assets/panoramic-2.jpeg)\n![img](./assets/panoramic-3.jpeg)\n![img](./assets/panoramic-4.jpeg)\n\n## Redesign\n\nI will start with the design process. BRB!","src/content/article/photography/pinhole/pinhole-redesign.md",[289,290,291,292,293,294,295,296,297,298],"./assets/pinhole-old.jpeg","./assets/pinhole-old-2.jpeg","./assets/problem-1.jpeg","./assets/problem-2.jpeg","./assets/problem-3.jpeg","./assets/problem-4.jpeg","./assets/panoramic-1.jpeg","./assets/panoramic-2.jpeg","./assets/panoramic-3.jpeg","./assets/panoramic-4.jpeg","8c3b3b8e3a61d25f",{"html":301,"metadata":302},"\u003Ch6 id=\"this-is-a-write-in-progress-post-that-i-will-be-updating-over-time\">This is a write-in-progress post that I will be updating over time.\u003C/h6>\n\u003Cp>I was into designing and building my own cameras roughly ten years ago, and I have been meaning to get back into it for quite some time now. I recently came across some of the old photographs I took with these cameras and it rekindled the passion I had for the craft.\u003C/p>\n\u003Cp>I decided to build several different cameras again, fixing the issues that previous builds had, and document the whole process in a series of blog posts.\u003C/p>\n\u003Cp>If everything goes according to plan, I will build:\u003C/p>\n\u003Cul>\n\u003Cli>A 35mm panoramic with curved film plane\u003C/li>\n\u003Cli>A compact, half frame 35mm with short focal length\u003C/li>\n\u003Cli>A 6x6\u003C/li>\n\u003C/ul>\n\u003Cp>I want all of these to sport a 1/4” tripod mount, replaceable pinhole plates, magnetic filter mounts, a lockable shutter that can be operated manually or with a cable release, a screw-lock body, leak-safe and precision film advance knobs, film counter (for medium-format), magnetic accessory mounts (spirit levels, viewfinders etc.), and hassle-free film spools (especially for the 35mm).\u003C/p>\n\u003Ch2 id=\"the-old-panoramic-pinhole\">The Old Panoramic Pinhole\u003C/h2>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./assets/pinhole-old.jpeg&#x22;,&#x22;alt&#x22;:&#x22;img&#x22;,&#x22;index&#x22;:0}\">\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./assets/pinhole-old-2.jpeg&#x22;,&#x22;alt&#x22;:&#x22;img&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>This was my favorite camera to shoot with for a long time. I made it from whatever material I had at home at the time: wood from an old cigar box, metal sheet from a soda can, knobs from skateboard bushings, one spool-catch (or whatever they are called) from an old FM radio antenna and the other one from a scrapped Zorki 4K, packaging paper, electrical tape, and other random stuff that I found around.\u003C/p>\n\u003Cp>I had even drawn a now-lost schematic diagrams before building it to make sure I was doing everything right.\u003C/p>\n\u003Cp>As you can tell, it is a product-of-love but it had its problems.\u003C/p>\n\u003Cp>Namely, unintentional multiple exposures:\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./assets/problem-1.jpeg&#x22;,&#x22;alt&#x22;:&#x22;img&#x22;,&#x22;index&#x22;:0}\">\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./assets/problem-2.jpeg&#x22;,&#x22;alt&#x22;:&#x22;img&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>Poor film alignment:\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./assets/problem-3.jpeg&#x22;,&#x22;alt&#x22;:&#x22;img&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>Occasional light leaks:\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./assets/problem-4.jpeg&#x22;,&#x22;alt&#x22;:&#x22;img&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>and others that I cannot remember for now. So, it wasn’t the most reliable thing ever. But, when it worked, it worked beautifully.\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./assets/panoramic-1.jpeg&#x22;,&#x22;alt&#x22;:&#x22;img&#x22;,&#x22;index&#x22;:0}\">\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./assets/panoramic-2.jpeg&#x22;,&#x22;alt&#x22;:&#x22;img&#x22;,&#x22;index&#x22;:0}\">\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./assets/panoramic-3.jpeg&#x22;,&#x22;alt&#x22;:&#x22;img&#x22;,&#x22;index&#x22;:0}\">\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./assets/panoramic-4.jpeg&#x22;,&#x22;alt&#x22;:&#x22;img&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Ch2 id=\"redesign\">Redesign\u003C/h2>\n\u003Cp>I will start with the design process. BRB!\u003C/p>",{"headings":303,"localImagePaths":314,"remoteImagePaths":315,"frontmatter":316,"imagePaths":319},[304,308,311],{"depth":305,"slug":306,"text":307},6,"this-is-a-write-in-progress-post-that-i-will-be-updating-over-time","This is a write-in-progress post that I will be updating over time.",{"depth":124,"slug":309,"text":310},"the-old-panoramic-pinhole","The Old Panoramic Pinhole",{"depth":124,"slug":312,"text":313},"redesign","Redesign",[289,290,291,292,293,294,295,296,297,298],[],{"slug":278,"title":281,"pubDate":317,"draft":78,"tags":318},"2023-07-20",[284,285],[289,290,291,292,293,294,295,296,297,298],"photography/pinhole/pinhole-redesign.md","markdown-test",{"id":321,"data":323,"body":329,"filePath":330,"digest":331,"rendered":332,"legacyId":420},{"title":324,"draft":15,"pubDate":325,"tags":326},"Markdown Test",["Date","2000-01-01T00:00:00.000Z"],[327,328],"markdown","test","# h1 Heading 8-)\n## h2 Heading\n### h3 Heading\n#### h4 Heading\n##### h5 Heading\n###### h6 Heading\n\n\n## Horizontal Rules\n\n___\n\n---\n\n***\n\n\n## Typographic replacements\n\nEnable typographer option to see result.\n\n(c) (C) (r) (R) (tm) (TM) (p) (P) +-\n\ntest.. test... test..... test?..... test!....\n\n!!!!!! ???? ,,  -- ---\n\n\"Smartypants, double quotes\" and 'single quotes'\n\n\n## Emphasis\n\n**This is bold text**\n\n__This is bold text__\n\n*This is italic text*\n\n_This is italic text_\n\n~~Strikethrough~~\n\n\n## Blockquotes\n\n\n> Blockquotes can also be nested...\n>> ...by using additional greater-than signs right next to each other...\n> > > ...or with spaces between arrows.\n\n\n## Lists\n\nUnordered\n\n+ Create a list by starting a line with `+`, `-`, or `*`\n+ Sub-lists are made by indenting 2 spaces:\n  - Marker character change forces new list start:\n    * Ac tristique libero volutpat at\n    + Facilisis in pretium nisl aliquet\n    - Nulla volutpat aliquam velit\n+ Very easy!\n\nOrdered\n\n1. Lorem ipsum dolor sit amet\n2. Consectetur adipiscing elit\n3. Integer molestie lorem at massa\n\n\n1. You can use sequential numbers...\n1. ...or keep all the numbers as `1.`\n\nStart numbering with offset:\n\n57. foo\n1. bar\n\n\n## Code\n\nInline `code`\n\nIndented code\n\n    // Some comments\n    line 1 of code\n    line 2 of code\n    line 3 of code\n\n\nBlock code \"fences\"\n\n```\nSample text here...\n```\n\nSyntax highlighting\n\n``` js\nvar foo = function (bar) {\n  return bar++;\n};\n\nconsole.log(foo(5));\n```\n\n## Tables\n\n| Option | Description                                                               |\n| ------ | ------------------------------------------------------------------------- |\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default.    |\n| ext    | extension to be used for dest files.                                      |\n\nRight aligned columns\n\n| Option |                                                               Description |\n| -----: | ------------------------------------------------------------------------: |\n|   data | path to data files to supply the data that will be passed into templates. |\n| engine |    engine to be used for processing templates. Handlebars is the default. |\n|    ext |                                      extension to be used for dest files. |\n\n\n## Links\n\n[link text](http://dev.nodeca.com)\n\n[link with title](http://nodeca.github.io/pica/demo/ \"title text!\")\n\nAutoconverted link https://github.com/nodeca/pica (enable linkify to see)\n\n\n## Images\n\n![Minion](https://octodex.github.com/images/minion.png)\n![Stormtroopocat](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\")\n\nLike links, Images also have a footnote style syntax\n\n![Alt text][id]\n\nWith a reference later in the document defining the URL location:\n\n[id]: https://octodex.github.com/images/dojocat.jpg  \"The Dojocat\"\n\n\n## Plugins\n\nThe killer feature of `markdown-it` is very effective support of\n[syntax plugins](https://www.npmjs.org/browse/keyword/markdown-it-plugin).\n\n\n### [Emojies](https://github.com/markdown-it/markdown-it-emoji)\n\n> Classic markup: :wink: :crush: :cry: :tear: :laughing: :yum:\n>\n> Shortcuts (emoticons): :-) :-( 8-) ;)\n\nsee [how to change output](https://github.com/markdown-it/markdown-it-emoji#change-output) with twemoji.\n\n\n### [Subscript](https://github.com/markdown-it/markdown-it-sub) / [Superscript](https://github.com/markdown-it/markdown-it-sup)\n\n- 19^th^\n- H~2~O\n\n\n### [\\\u003Cins>](https://github.com/markdown-it/markdown-it-ins)\n\n++Inserted text++\n\n\n### [\\\u003Cmark>](https://github.com/markdown-it/markdown-it-mark)\n\n==Marked text==\n\n\n### [Footnotes](https://github.com/markdown-it/markdown-it-footnote)\n\nFootnote 1 link[^first].\n\nFootnote 2 link[^second].\n\nInline footnote^[Text of inline footnote] definition.\n\nDuplicated footnote reference[^second].\n\n[^first]: Footnote **can have markup**\n\n    and multiple paragraphs.\n\n[^second]: Footnote text.\n\n\n### [Definition lists](https://github.com/markdown-it/markdown-it-deflist)\n\nTerm 1\n\n:   Definition 1\nwith lazy continuation.\n\nTerm 2 with *inline markup*\n\n:   Definition 2\n\n        { some code, part of Definition 2 }\n\n    Third paragraph of definition 2.\n\n_Compact style:_\n\nTerm 1\n  ~ Definition 1\n\nTerm 2\n  ~ Definition 2a\n  ~ Definition 2b\n\n\n### [Abbreviations](https://github.com/markdown-it/markdown-it-abbr)\n\nThis is HTML abbreviation example.\n\nIt converts \"HTML\", but keep intact partial entries like \"xxxHTMLyyy\" and so on.\n\n*[HTML]: Hyper Text Markup Language\n\n### [Custom containers](https://github.com/markdown-it/markdown-it-container)\n\n::: warning\n*here be dragons*\n:::\n\n## Mermaid\n\n\n```mermaid\ngraph TD\n    A[Start] --> B{Is it working?}\n    B -->|Yes| C[Great!]\n    B -->|No| D[Debug]\n    D --> B\n```\n\n```mermaid\nflowchart TD\n\tA --> B\n\tB --> C\n\tC --> D\n\tD --> E\n\tE --> F\n\tF --> G\n\tG --> H\n\tH --> I\n\tH --> J\n\tH --> K\n\tH --> L\n\tH --> M\n\tH --> N\n\tH --> O\n\tH --> P\n```\n\n```mermaid\npie title What Voldemort doesn't have?\n         \"FRIENDS\" : 2\n         \"FAMILY\" : 3\n         \"NOSE\" : 45\n```\n\n```mermaid\nsequenceDiagram\n    participant Alice\n    participant Bob\n    Alice->>John: Hello John, how are you?\n    loop Healthcheck\n        John->>John: Fight against hypochondria\n    end\n    Note right of John: Rational thoughts \u003Cbr/>prevail!\n    John-->>Alice: Great!\n    John->>Bob: How about you?\n    Bob-->>John: Jolly good!\n```\n\n```mermaid\ngraph TB\n    sq[Square shape] --> ci((Circle shape))\n\n    subgraph A\n        od>Odd shape]-- Two line&lt;br/>edge comment --> ro\n        di{Diamond with &lt;br/> line break} -.-> ro(Rounded&lt;br>square&lt;br>shape)\n        di==>ro2(Rounded square shape)\n    end\n\n    %% Notice that no text in shape are added here instead that is appended further down\n    e --> od3>Really long text with linebreak&lt;br>in an Odd shape]\n\n    %% Comments after double percent signs\n    e((Inner / circle&lt;br>and some odd &lt;br>special characters)) --> f(,.?!+-*ز)\n\n    cyr[Cyrillic]-->cyr2((Circle shape Начало));\n\n     classDef green fill:#9f6,stroke:#333,stroke-width:2px;\n     classDef orange fill:#f96,stroke:#333,stroke-width:4px;\n     class sq,e green\n     class di orange\n```","src/content/article/markdown-test/markdown-test.md","c9a71723d0598436",{"html":333,"metadata":334},"\u003Ch1 id=\"h1-heading-8\">h1 Heading 8-)\u003C/h1>\n\u003Ch2 id=\"h2-heading\">h2 Heading\u003C/h2>\n\u003Ch3 id=\"h3-heading\">h3 Heading\u003C/h3>\n\u003Ch4 id=\"h4-heading\">h4 Heading\u003C/h4>\n\u003Ch5 id=\"h5-heading\">h5 Heading\u003C/h5>\n\u003Ch6 id=\"h6-heading\">h6 Heading\u003C/h6>\n\u003Ch2 id=\"horizontal-rules\">Horizontal Rules\u003C/h2>\n\u003Chr>\n\u003Chr>\n\u003Chr>\n\u003Ch2 id=\"typographic-replacements\">Typographic replacements\u003C/h2>\n\u003Cp>Enable typographer option to see result.\u003C/p>\n\u003Cp>(c) (C) (r) (R) (tm) (TM) (p) (P) +-\u003C/p>\n\u003Cp>test.. test… test… test?… test!…\u003C/p>\n\u003Cp>!!!!!! ???? ,,  — ---\u003C/p>\n\u003Cp>“Smartypants, double quotes” and ‘single quotes’\u003C/p>\n\u003Ch2 id=\"emphasis\">Emphasis\u003C/h2>\n\u003Cp>\u003Cstrong>This is bold text\u003C/strong>\u003C/p>\n\u003Cp>\u003Cstrong>This is bold text\u003C/strong>\u003C/p>\n\u003Cp>\u003Cem>This is italic text\u003C/em>\u003C/p>\n\u003Cp>\u003Cem>This is italic text\u003C/em>\u003C/p>\n\u003Cp>\u003Cdel>Strikethrough\u003C/del>\u003C/p>\n\u003Ch2 id=\"blockquotes\">Blockquotes\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Blockquotes can also be nested…\u003C/p>\n\u003Cblockquote>\n\u003Cp>…by using additional greater-than signs right next to each other…\u003C/p>\n\u003Cblockquote>\n\u003Cp>…or with spaces between arrows.\u003C/p>\n\u003C/blockquote>\n\u003C/blockquote>\n\u003C/blockquote>\n\u003Ch2 id=\"lists\">Lists\u003C/h2>\n\u003Cp>Unordered\u003C/p>\n\u003Cul>\n\u003Cli>Create a list by starting a line with \u003Ccode>+\u003C/code>, \u003Ccode>-\u003C/code>, or \u003Ccode>*\u003C/code>\u003C/li>\n\u003Cli>Sub-lists are made by indenting 2 spaces:\n\u003Cul>\n\u003Cli>Marker character change forces new list start:\n\u003Cul>\n\u003Cli>Ac tristique libero volutpat at\u003C/li>\n\u003C/ul>\n\u003Cul>\n\u003Cli>Facilisis in pretium nisl aliquet\u003C/li>\n\u003C/ul>\n\u003Cul>\n\u003Cli>Nulla volutpat aliquam velit\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Very easy!\u003C/li>\n\u003C/ul>\n\u003Cp>Ordered\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>Lorem ipsum dolor sit amet\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Consectetur adipiscing elit\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Integer molestie lorem at massa\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>You can use sequential numbers…\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>…or keep all the numbers as \u003Ccode>1.\u003C/code>\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003Cp>Start numbering with offset:\u003C/p>\n\u003Col start=\"57\">\n\u003Cli>foo\u003C/li>\n\u003Cli>bar\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"code\">Code\u003C/h2>\n\u003Cp>Inline \u003Ccode>code\u003C/code>\u003C/p>\n\u003Cp>Indented code\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>// Some comments\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>line 1 of code\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>line 2 of code\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>line 3 of code\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Block code “fences”\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Sample text here...\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Syntax highlighting\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#B392F0\"> foo\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">bar\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> bar\u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">foo\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">));\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"tables\">Tables\u003C/h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Option\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>data\u003C/td>\u003Ctd>path to data files to supply the data that will be passed into templates.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>engine\u003C/td>\u003Ctd>engine to be used for processing templates. Handlebars is the default.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>ext\u003C/td>\u003Ctd>extension to be used for dest files.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Cp>Right aligned columns\u003C/p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth align=\"right\">Option\u003C/th>\u003Cth align=\"right\">Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd align=\"right\">data\u003C/td>\u003Ctd align=\"right\">path to data files to supply the data that will be passed into templates.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd align=\"right\">engine\u003C/td>\u003Ctd align=\"right\">engine to be used for processing templates. Handlebars is the default.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd align=\"right\">ext\u003C/td>\u003Ctd align=\"right\">extension to be used for dest files.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Ch2 id=\"links\">Links\u003C/h2>\n\u003Cp>\u003Ca href=\"http://dev.nodeca.com\">link text\u003C/a>\u003C/p>\n\u003Cp>\u003Ca href=\"http://nodeca.github.io/pica/demo/\" title=\"title text!\">link with title\u003C/a>\u003C/p>\n\u003Cp>Autoconverted link \u003Ca href=\"https://github.com/nodeca/pica\">https://github.com/nodeca/pica\u003C/a> (enable linkify to see)\u003C/p>\n\u003Ch2 id=\"images\">Images\u003C/h2>\n\u003Cp>\u003Cimg src=\"https://octodex.github.com/images/minion.png\" alt=\"Minion\">\n\u003Cimg src=\"https://octodex.github.com/images/stormtroopocat.jpg\" alt=\"Stormtroopocat\" title=\"The Stormtroopocat\">\u003C/p>\n\u003Cp>Like links, Images also have a footnote style syntax\u003C/p>\n\u003Cp>\u003Cimg src=\"https://octodex.github.com/images/dojocat.jpg\" alt=\"Alt text\" title=\"The Dojocat\">\u003C/p>\n\u003Cp>With a reference later in the document defining the URL location:\u003C/p>\n\u003Ch2 id=\"plugins\">Plugins\u003C/h2>\n\u003Cp>The killer feature of \u003Ccode>markdown-it\u003C/code> is very effective support of\n\u003Ca href=\"https://www.npmjs.org/browse/keyword/markdown-it-plugin\">syntax plugins\u003C/a>.\u003C/p>\n\u003Ch3 id=\"emojies\">\u003Ca href=\"https://github.com/markdown-it/markdown-it-emoji\">Emojies\u003C/a>\u003C/h3>\n\u003Cblockquote>\n\u003Cp>Classic markup: :wink: :crush: :cry: :tear: :laughing: :yum:\u003C/p>\n\u003Cp>Shortcuts (emoticons): :-) :-( 8-) ;)\u003C/p>\n\u003C/blockquote>\n\u003Cp>see \u003Ca href=\"https://github.com/markdown-it/markdown-it-emoji#change-output\">how to change output\u003C/a> with twemoji.\u003C/p>\n\u003Ch3 id=\"subscript--superscript\">\u003Ca href=\"https://github.com/markdown-it/markdown-it-sub\">Subscript\u003C/a> / \u003Ca href=\"https://github.com/markdown-it/markdown-it-sup\">Superscript\u003C/a>\u003C/h3>\n\u003Cul>\n\u003Cli>19^th^\u003C/li>\n\u003Cli>H\u003Cdel>2\u003C/del>O\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"ins\">\u003Ca href=\"https://github.com/markdown-it/markdown-it-ins\">&#x3C;ins>\u003C/a>\u003C/h3>\n\u003Cp>++Inserted text++\u003C/p>\n\u003Ch3 id=\"mark\">\u003Ca href=\"https://github.com/markdown-it/markdown-it-mark\">&#x3C;mark>\u003C/a>\u003C/h3>\n\u003Cp>==Marked text==\u003C/p>\n\u003Ch3 id=\"footnotes\">\u003Ca href=\"https://github.com/markdown-it/markdown-it-footnote\">Footnotes\u003C/a>\u003C/h3>\n\u003Cp>Footnote 1 link\u003Csup>\u003Ca href=\"#user-content-fn-first\" id=\"user-content-fnref-first\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">1\u003C/a>\u003C/sup>.\u003C/p>\n\u003Cp>Footnote 2 link\u003Csup>\u003Ca href=\"#user-content-fn-second\" id=\"user-content-fnref-second\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">2\u003C/a>\u003C/sup>.\u003C/p>\n\u003Cp>Inline footnote^[Text of inline footnote] definition.\u003C/p>\n\u003Cp>Duplicated footnote reference\u003Csup>\u003Ca href=\"#user-content-fn-second\" id=\"user-content-fnref-second-2\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">2\u003C/a>\u003C/sup>.\u003C/p>\n\u003Ch3 id=\"definition-lists\">\u003Ca href=\"https://github.com/markdown-it/markdown-it-deflist\">Definition lists\u003C/a>\u003C/h3>\n\u003Cp>Term 1\u003C/p>\n\u003Cp>:   Definition 1\nwith lazy continuation.\u003C/p>\n\u003Cp>Term 2 with \u003Cem>inline markup\u003C/em>\u003C/p>\n\u003Cp>:   Definition 2\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>    { some code, part of Definition 2 }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Third paragraph of definition 2.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cem>Compact style:\u003C/em>\u003C/p>\n\u003Cp>Term 1\n~ Definition 1\u003C/p>\n\u003Cp>Term 2\n~ Definition 2a\n~ Definition 2b\u003C/p>\n\u003Ch3 id=\"abbreviations\">\u003Ca href=\"https://github.com/markdown-it/markdown-it-abbr\">Abbreviations\u003C/a>\u003C/h3>\n\u003Cp>This is HTML abbreviation example.\u003C/p>\n\u003Cp>It converts “HTML”, but keep intact partial entries like “xxxHTMLyyy” and so on.\u003C/p>\n\u003Cp>*[HTML]: Hyper Text Markup Language\u003C/p>\n\u003Ch3 id=\"custom-containers\">\u003Ca href=\"https://github.com/markdown-it/markdown-it-container\">Custom containers\u003C/a>\u003C/h3>\n\u003Cp>::: warning\n\u003Cem>here be dragons\u003C/em>\n:::\u003C/p>\n\u003Ch2 id=\"mermaid\">Mermaid\u003C/h2>\n\u003Csvg aria-roledescription=\"flowchart-v2\" role=\"graphics-document document\" viewBox=\"0 0 277.625 395.375\" style=\"max-width: 277.625px;\" class=\"flowchart\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" id=\"mermaid-0\">\u003Cstyle>#mermaid-0{font-family:arial,sans-serif;font-size:16px;fill:#333;}@keyframes edge-animation-frame{from{stroke-dashoffset:0;}}@keyframes dash{to{stroke-dashoffset:0;}}#mermaid-0 .edge-animation-slow{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 50s linear infinite;stroke-linecap:round;}#mermaid-0 .edge-animation-fast{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 20s linear infinite;stroke-linecap:round;}#mermaid-0 .error-icon{fill:#552222;}#mermaid-0 .error-text{fill:#552222;stroke:#552222;}#mermaid-0 .edge-thickness-normal{stroke-width:1px;}#mermaid-0 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-0 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-0 .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-0 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-0 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-0 .marker{fill:#333333;stroke:#333333;}#mermaid-0 .marker.cross{stroke:#333333;}#mermaid-0 svg{font-family:arial,sans-serif;font-size:16px;}#mermaid-0 p{margin:0;}#mermaid-0 .label{font-family:arial,sans-serif;color:#333;}#mermaid-0 .cluster-label text{fill:#333;}#mermaid-0 .cluster-label span{color:#333;}#mermaid-0 .cluster-label span p{background-color:transparent;}#mermaid-0 .label text,#mermaid-0 span{fill:#333;color:#333;}#mermaid-0 .node rect,#mermaid-0 .node circle,#mermaid-0 .node ellipse,#mermaid-0 .node polygon,#mermaid-0 .node path{fill:#ECECFF;stroke:#9370DB;stroke-width:1px;}#mermaid-0 .rough-node .label text,#mermaid-0 .node .label text,#mermaid-0 .image-shape .label,#mermaid-0 .icon-shape .label{text-anchor:middle;}#mermaid-0 .node .katex path{fill:#000;stroke:#000;stroke-width:1px;}#mermaid-0 .rough-node .label,#mermaid-0 .node .label,#mermaid-0 .image-shape .label,#mermaid-0 .icon-shape .label{text-align:center;}#mermaid-0 .node.clickable{cursor:pointer;}#mermaid-0 .root .anchor path{fill:#333333!important;stroke-width:0;stroke:#333333;}#mermaid-0 .arrowheadPath{fill:#333333;}#mermaid-0 .edgePath .path{stroke:#333333;stroke-width:2.0px;}#mermaid-0 .flowchart-link{stroke:#333333;fill:none;}#mermaid-0 .edgeLabel{background-color:rgba(232,232,232, 0.8);text-align:center;}#mermaid-0 .edgeLabel p{background-color:rgba(232,232,232, 0.8);}#mermaid-0 .edgeLabel rect{opacity:0.5;background-color:rgba(232,232,232, 0.8);fill:rgba(232,232,232, 0.8);}#mermaid-0 .labelBkg{background-color:rgba(232, 232, 232, 0.5);}#mermaid-0 .cluster rect{fill:#ffffde;stroke:#aaaa33;stroke-width:1px;}#mermaid-0 .cluster text{fill:#333;}#mermaid-0 .cluster span{color:#333;}#mermaid-0 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:arial,sans-serif;font-size:12px;background:hsl(80, 100%, 96.2745098039%);border:1px solid #aaaa33;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-0 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#333;}#mermaid-0 rect.text{fill:none;stroke-width:0;}#mermaid-0 .icon-shape,#mermaid-0 .image-shape{background-color:rgba(232,232,232, 0.8);text-align:center;}#mermaid-0 .icon-shape p,#mermaid-0 .image-shape p{background-color:rgba(232,232,232, 0.8);padding:2px;}#mermaid-0 .icon-shape rect,#mermaid-0 .image-shape rect{opacity:0.5;background-color:rgba(232,232,232, 0.8);fill:rgba(232,232,232, 0.8);}#mermaid-0 .label-icon{display:inline-block;height:1em;overflow:visible;vertical-align:-0.125em;}#mermaid-0 .node .label-icon path{fill:currentColor;stroke:revert;stroke-width:revert;}#mermaid-0 :root{--mermaid-font-family:arial,sans-serif;}\u003C/style>\u003Cg>\u003Cmarker orient=\"auto\" markerHeight=\"8\" markerWidth=\"8\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"5\" viewBox=\"0 0 10 10\" class=\"marker flowchart-v2\" id=\"mermaid-0_flowchart-v2-pointEnd\">\u003Cpath style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 0 0 L 10 5 L 0 10 z\">\u003C/path>\u003C/marker>\u003Cmarker orient=\"auto\" markerHeight=\"8\" markerWidth=\"8\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"4.5\" viewBox=\"0 0 10 10\" class=\"marker flowchart-v2\" id=\"mermaid-0_flowchart-v2-pointStart\">\u003Cpath style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 0 5 L 10 10 L 10 0 z\">\u003C/path>\u003C/marker>\u003Cmarker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"11\" viewBox=\"0 0 10 10\" class=\"marker flowchart-v2\" id=\"mermaid-0_flowchart-v2-circleEnd\">\u003Ccircle style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" r=\"5\" cy=\"5\" cx=\"5\">\u003C/circle>\u003C/marker>\u003Cmarker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"-1\" viewBox=\"0 0 10 10\" class=\"marker flowchart-v2\" id=\"mermaid-0_flowchart-v2-circleStart\">\u003Ccircle style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" r=\"5\" cy=\"5\" cx=\"5\">\u003C/circle>\u003C/marker>\u003Cmarker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5.2\" refX=\"12\" viewBox=\"0 0 11 11\" class=\"marker cross flowchart-v2\" id=\"mermaid-0_flowchart-v2-crossEnd\">\u003Cpath style=\"stroke-width: 2; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 1,1 l 9,9 M 10,1 l -9,9\">\u003C/path>\u003C/marker>\u003Cmarker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5.2\" refX=\"-1\" viewBox=\"0 0 11 11\" class=\"marker cross flowchart-v2\" id=\"mermaid-0_flowchart-v2-crossStart\">\u003Cpath style=\"stroke-width: 2; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 1,1 l 9,9 M 10,1 l -9,9\">\u003C/path>\u003C/marker>\u003Cg class=\"root\">\u003Cg class=\"clusters\">\u003C/g>\u003Cg class=\"edgePaths\">\u003Cpath marker-end=\"url(#mermaid-0_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_A_B_0\" d=\"M159.781,62L159.781,66.167C159.781,70.333,159.781,78.667,159.781,86.333C159.781,94,159.781,101,159.781,104.5L159.781,108\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-0_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_B_C_0\" d=\"M124.89,224.484L114.114,236.466C103.338,248.447,81.786,272.411,71.01,289.893C60.234,307.375,60.234,318.375,60.234,323.875L60.234,329.375\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-0_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_B_D_0\" d=\"M159.781,259.375L159.781,265.542C159.781,271.708,159.781,284.042,164.762,295.874C169.744,307.707,179.706,319.039,184.687,324.705L189.669,330.371\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-0_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_D_B_0\" d=\"M222.423,333.375L223.879,327.208C225.335,321.042,228.248,308.708,222.984,292.12C217.719,275.533,204.279,254.69,197.558,244.269L190.838,233.848\">\u003C/path>\u003C/g>\u003Cg class=\"edgeLabels\">\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(60.234375, 296.375)\" class=\"edgeLabel\">\u003Cg transform=\"translate(-13.0546875, -12)\" class=\"label\">\u003CforeignObject height=\"24\" width=\"26.109375\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003Cp>Yes\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(159.78125, 296.375)\" class=\"edgeLabel\">\u003Cg transform=\"translate(-10.2265625, -12)\" class=\"label\">\u003CforeignObject height=\"24\" width=\"20.453125\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003Cp>No\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003C/g>\u003Cg class=\"nodes\">\u003Cg transform=\"translate(159.78125, 35)\" id=\"flowchart-A-0\" class=\"node default\">\u003Crect height=\"54\" width=\"93.796875\" y=\"-27\" x=\"-46.8984375\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-16.8984375, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"33.796875\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>Start\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(159.78125, 185.6875)\" id=\"flowchart-B-1\" class=\"node default\">\u003Cpolygon transform=\"translate(-73.1875, 73.6875)\" class=\"label-container\" points=\"73.6875,0 147.375,-73.6875 73.6875,-147.375 0,-73.6875\">\u003C/polygon>\u003Cg transform=\"translate(-46.6875, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"93.375\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>Is it working?\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(60.234375, 360.375)\" id=\"flowchart-C-3\" class=\"node default\">\u003Crect height=\"54\" width=\"104.46875\" y=\"-27\" x=\"-52.234375\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-22.234375, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"44.46875\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>Great!\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(216.046875, 360.375)\" id=\"flowchart-D-5\" class=\"node default\">\u003Crect height=\"54\" width=\"107.15625\" y=\"-27\" x=\"-53.578125\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-23.578125, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"47.15625\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>Debug\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003C/g>\u003C/g>\u003C/g>\u003C/svg>\n\u003Csvg aria-roledescription=\"flowchart-v2\" role=\"graphics-document document\" viewBox=\"0 0 926.046875 902\" style=\"max-width: 926.046875px;\" class=\"flowchart\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" id=\"mermaid-1\">\u003Cstyle>#mermaid-1{font-family:arial,sans-serif;font-size:16px;fill:#333;}@keyframes edge-animation-frame{from{stroke-dashoffset:0;}}@keyframes dash{to{stroke-dashoffset:0;}}#mermaid-1 .edge-animation-slow{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 50s linear infinite;stroke-linecap:round;}#mermaid-1 .edge-animation-fast{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 20s linear infinite;stroke-linecap:round;}#mermaid-1 .error-icon{fill:#552222;}#mermaid-1 .error-text{fill:#552222;stroke:#552222;}#mermaid-1 .edge-thickness-normal{stroke-width:1px;}#mermaid-1 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-1 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-1 .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-1 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-1 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-1 .marker{fill:#333333;stroke:#333333;}#mermaid-1 .marker.cross{stroke:#333333;}#mermaid-1 svg{font-family:arial,sans-serif;font-size:16px;}#mermaid-1 p{margin:0;}#mermaid-1 .label{font-family:arial,sans-serif;color:#333;}#mermaid-1 .cluster-label text{fill:#333;}#mermaid-1 .cluster-label span{color:#333;}#mermaid-1 .cluster-label span p{background-color:transparent;}#mermaid-1 .label text,#mermaid-1 span{fill:#333;color:#333;}#mermaid-1 .node rect,#mermaid-1 .node circle,#mermaid-1 .node ellipse,#mermaid-1 .node polygon,#mermaid-1 .node path{fill:#ECECFF;stroke:#9370DB;stroke-width:1px;}#mermaid-1 .rough-node .label text,#mermaid-1 .node .label text,#mermaid-1 .image-shape .label,#mermaid-1 .icon-shape .label{text-anchor:middle;}#mermaid-1 .node .katex path{fill:#000;stroke:#000;stroke-width:1px;}#mermaid-1 .rough-node .label,#mermaid-1 .node .label,#mermaid-1 .image-shape .label,#mermaid-1 .icon-shape .label{text-align:center;}#mermaid-1 .node.clickable{cursor:pointer;}#mermaid-1 .root .anchor path{fill:#333333!important;stroke-width:0;stroke:#333333;}#mermaid-1 .arrowheadPath{fill:#333333;}#mermaid-1 .edgePath .path{stroke:#333333;stroke-width:2.0px;}#mermaid-1 .flowchart-link{stroke:#333333;fill:none;}#mermaid-1 .edgeLabel{background-color:rgba(232,232,232, 0.8);text-align:center;}#mermaid-1 .edgeLabel p{background-color:rgba(232,232,232, 0.8);}#mermaid-1 .edgeLabel rect{opacity:0.5;background-color:rgba(232,232,232, 0.8);fill:rgba(232,232,232, 0.8);}#mermaid-1 .labelBkg{background-color:rgba(232, 232, 232, 0.5);}#mermaid-1 .cluster rect{fill:#ffffde;stroke:#aaaa33;stroke-width:1px;}#mermaid-1 .cluster text{fill:#333;}#mermaid-1 .cluster span{color:#333;}#mermaid-1 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:arial,sans-serif;font-size:12px;background:hsl(80, 100%, 96.2745098039%);border:1px solid #aaaa33;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-1 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#333;}#mermaid-1 rect.text{fill:none;stroke-width:0;}#mermaid-1 .icon-shape,#mermaid-1 .image-shape{background-color:rgba(232,232,232, 0.8);text-align:center;}#mermaid-1 .icon-shape p,#mermaid-1 .image-shape p{background-color:rgba(232,232,232, 0.8);padding:2px;}#mermaid-1 .icon-shape rect,#mermaid-1 .image-shape rect{opacity:0.5;background-color:rgba(232,232,232, 0.8);fill:rgba(232,232,232, 0.8);}#mermaid-1 .label-icon{display:inline-block;height:1em;overflow:visible;vertical-align:-0.125em;}#mermaid-1 .node .label-icon path{fill:currentColor;stroke:revert;stroke-width:revert;}#mermaid-1 :root{--mermaid-font-family:arial,sans-serif;}\u003C/style>\u003Cg>\u003Cmarker orient=\"auto\" markerHeight=\"8\" markerWidth=\"8\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"5\" viewBox=\"0 0 10 10\" class=\"marker flowchart-v2\" id=\"mermaid-1_flowchart-v2-pointEnd\">\u003Cpath style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 0 0 L 10 5 L 0 10 z\">\u003C/path>\u003C/marker>\u003Cmarker orient=\"auto\" markerHeight=\"8\" markerWidth=\"8\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"4.5\" viewBox=\"0 0 10 10\" class=\"marker flowchart-v2\" id=\"mermaid-1_flowchart-v2-pointStart\">\u003Cpath style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 0 5 L 10 10 L 10 0 z\">\u003C/path>\u003C/marker>\u003Cmarker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"11\" viewBox=\"0 0 10 10\" class=\"marker flowchart-v2\" id=\"mermaid-1_flowchart-v2-circleEnd\">\u003Ccircle style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" r=\"5\" cy=\"5\" cx=\"5\">\u003C/circle>\u003C/marker>\u003Cmarker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"-1\" viewBox=\"0 0 10 10\" class=\"marker flowchart-v2\" id=\"mermaid-1_flowchart-v2-circleStart\">\u003Ccircle style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" r=\"5\" cy=\"5\" cx=\"5\">\u003C/circle>\u003C/marker>\u003Cmarker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5.2\" refX=\"12\" viewBox=\"0 0 11 11\" class=\"marker cross flowchart-v2\" id=\"mermaid-1_flowchart-v2-crossEnd\">\u003Cpath style=\"stroke-width: 2; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 1,1 l 9,9 M 10,1 l -9,9\">\u003C/path>\u003C/marker>\u003Cmarker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5.2\" refX=\"-1\" viewBox=\"0 0 11 11\" class=\"marker cross flowchart-v2\" id=\"mermaid-1_flowchart-v2-crossStart\">\u003Cpath style=\"stroke-width: 2; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 1,1 l 9,9 M 10,1 l -9,9\">\u003C/path>\u003C/marker>\u003Cg class=\"root\">\u003Cg class=\"clusters\">\u003C/g>\u003Cg class=\"edgePaths\">\u003Cpath marker-end=\"url(#mermaid-1_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_A_B_0\" d=\"M456.137,62L456.137,66.167C456.137,70.333,456.137,78.667,456.137,86.333C456.137,94,456.137,101,456.137,104.5L456.137,108\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-1_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_B_C_0\" d=\"M456.137,166L456.137,170.167C456.137,174.333,456.137,182.667,456.137,190.333C456.137,198,456.137,205,456.137,208.5L456.137,212\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-1_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_C_D_0\" d=\"M456.137,270L456.137,274.167C456.137,278.333,456.137,286.667,456.137,294.333C456.137,302,456.137,309,456.137,312.5L456.137,316\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-1_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_D_E_0\" d=\"M456.137,374L456.137,378.167C456.137,382.333,456.137,390.667,456.137,398.333C456.137,406,456.137,413,456.137,416.5L456.137,420\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-1_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_E_F_0\" d=\"M456.137,478L456.137,482.167C456.137,486.333,456.137,494.667,456.137,502.333C456.137,510,456.137,517,456.137,520.5L456.137,524\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-1_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_F_G_0\" d=\"M456.137,582L456.137,586.167C456.137,590.333,456.137,598.667,456.137,606.333C456.137,614,456.137,621,456.137,624.5L456.137,628\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-1_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_G_H_0\" d=\"M456.137,686L456.137,690.167C456.137,694.333,456.137,702.667,456.137,710.333C456.137,718,456.137,725,456.137,728.5L456.137,732\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-1_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_H_I_0\" d=\"M420.355,767.474L357.001,775.395C293.646,783.316,166.936,799.158,103.581,810.579C40.227,822,40.227,829,40.227,832.5L40.227,836\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-1_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_H_J_0\" d=\"M420.355,769.209L376.372,776.841C332.388,784.472,244.421,799.736,200.437,810.868C156.453,822,156.453,829,156.453,832.5L156.453,836\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-1_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_H_K_0\" d=\"M420.355,773.317L396.261,780.264C372.167,787.211,323.978,801.106,299.883,811.553C275.789,822,275.789,829,275.789,832.5L275.789,836\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-1_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_H_L_0\" d=\"M424.693,790L419.84,794.167C414.988,798.333,405.283,806.667,400.431,814.333C395.578,822,395.578,829,395.578,832.5L395.578,836\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-1_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_H_M_0\" d=\"M487.581,790L492.433,794.167C497.286,798.333,506.99,806.667,511.843,814.333C516.695,822,516.695,829,516.695,832.5L516.695,836\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-1_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_H_N_0\" d=\"M491.918,773.167L516.455,780.139C540.992,787.111,590.066,801.056,614.604,811.528C639.141,822,639.141,829,639.141,832.5L639.141,836\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-1_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_H_O_0\" d=\"M491.918,769.1L536.79,776.75C581.661,784.4,671.405,799.7,716.277,810.85C761.148,822,761.148,829,761.148,832.5L761.148,836\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-1_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_H_P_0\" d=\"M491.918,767.362L557.05,775.301C622.182,783.241,752.447,799.121,817.579,810.56C882.711,822,882.711,829,882.711,832.5L882.711,836\">\u003C/path>\u003C/g>\u003Cg class=\"edgeLabels\">\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003C/g>\u003Cg class=\"nodes\">\u003Cg transform=\"translate(456.13671875, 35)\" id=\"flowchart-A-0\" class=\"node default\">\u003Crect height=\"54\" width=\"70.671875\" y=\"-27\" x=\"-35.3359375\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-5.3359375, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"10.671875\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>A\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(456.13671875, 139)\" id=\"flowchart-B-1\" class=\"node default\">\u003Crect height=\"54\" width=\"70.671875\" y=\"-27\" x=\"-35.3359375\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-5.3359375, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"10.671875\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>B\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(456.13671875, 243)\" id=\"flowchart-C-3\" class=\"node default\">\u003Crect height=\"54\" width=\"71.5625\" y=\"-27\" x=\"-35.78125\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-5.78125, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"11.5625\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>C\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(456.13671875, 347)\" id=\"flowchart-D-5\" class=\"node default\">\u003Crect height=\"54\" width=\"71.5625\" y=\"-27\" x=\"-35.78125\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-5.78125, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"11.5625\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>D\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(456.13671875, 451)\" id=\"flowchart-E-7\" class=\"node default\">\u003Crect height=\"54\" width=\"70.671875\" y=\"-27\" x=\"-35.3359375\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-5.3359375, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"10.671875\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>E\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(456.13671875, 555)\" id=\"flowchart-F-9\" class=\"node default\">\u003Crect height=\"54\" width=\"69.78125\" y=\"-27\" x=\"-34.890625\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-4.890625, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"9.78125\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>F\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(456.13671875, 659)\" id=\"flowchart-G-11\" class=\"node default\">\u003Crect height=\"54\" width=\"72.453125\" y=\"-27\" x=\"-36.2265625\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-6.2265625, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"12.453125\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>G\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(456.13671875, 763)\" id=\"flowchart-H-13\" class=\"node default\">\u003Crect height=\"54\" width=\"71.5625\" y=\"-27\" x=\"-35.78125\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-5.78125, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"11.5625\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>H\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(40.2265625, 867)\" id=\"flowchart-I-15\" class=\"node default\">\u003Crect height=\"54\" width=\"64.453125\" y=\"-27\" x=\"-32.2265625\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-2.2265625, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"4.453125\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>I\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(156.453125, 867)\" id=\"flowchart-J-17\" class=\"node default\">\u003Crect height=\"54\" width=\"68\" y=\"-27\" x=\"-34\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-4, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"8\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>J\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(275.7890625, 867)\" id=\"flowchart-K-19\" class=\"node default\">\u003Crect height=\"54\" width=\"70.671875\" y=\"-27\" x=\"-35.3359375\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-5.3359375, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"10.671875\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>K\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(395.578125, 867)\" id=\"flowchart-L-21\" class=\"node default\">\u003Crect height=\"54\" width=\"68.90625\" y=\"-27\" x=\"-34.453125\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-4.453125, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"8.90625\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>L\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(516.6953125, 867)\" id=\"flowchart-M-23\" class=\"node default\">\u003Crect height=\"54\" width=\"73.328125\" y=\"-27\" x=\"-36.6640625\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-6.6640625, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"13.328125\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>M\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(639.140625, 867)\" id=\"flowchart-N-25\" class=\"node default\">\u003Crect height=\"54\" width=\"71.5625\" y=\"-27\" x=\"-35.78125\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-5.78125, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"11.5625\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>N\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(761.1484375, 867)\" id=\"flowchart-O-27\" class=\"node default\">\u003Crect height=\"54\" width=\"72.453125\" y=\"-27\" x=\"-36.2265625\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-6.2265625, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"12.453125\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>O\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(882.7109375, 867)\" id=\"flowchart-P-29\" class=\"node default\">\u003Crect height=\"54\" width=\"70.671875\" y=\"-27\" x=\"-35.3359375\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-5.3359375, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"10.671875\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>P\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003C/g>\u003C/g>\u003C/g>\u003C/svg>\n\u003Csvg aria-roledescription=\"pie\" role=\"graphics-document document\" style=\"max-width: 586.625px;\" viewBox=\"0 0 586.625 450\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" id=\"mermaid-2\">\u003Cstyle>#mermaid-2{font-family:arial,sans-serif;font-size:16px;fill:#333;}@keyframes edge-animation-frame{from{stroke-dashoffset:0;}}@keyframes dash{to{stroke-dashoffset:0;}}#mermaid-2 .edge-animation-slow{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 50s linear infinite;stroke-linecap:round;}#mermaid-2 .edge-animation-fast{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 20s linear infinite;stroke-linecap:round;}#mermaid-2 .error-icon{fill:#552222;}#mermaid-2 .error-text{fill:#552222;stroke:#552222;}#mermaid-2 .edge-thickness-normal{stroke-width:1px;}#mermaid-2 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-2 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-2 .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-2 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-2 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-2 .marker{fill:#333333;stroke:#333333;}#mermaid-2 .marker.cross{stroke:#333333;}#mermaid-2 svg{font-family:arial,sans-serif;font-size:16px;}#mermaid-2 p{margin:0;}#mermaid-2 .pieCircle{stroke:black;stroke-width:2px;opacity:0.7;}#mermaid-2 .pieOuterCircle{stroke:black;stroke-width:2px;fill:none;}#mermaid-2 .pieTitleText{text-anchor:middle;font-size:25px;fill:black;font-family:arial,sans-serif;}#mermaid-2 .slice{font-family:arial,sans-serif;fill:#333;font-size:17px;}#mermaid-2 .legend text{fill:black;font-family:arial,sans-serif;font-size:17px;}#mermaid-2 :root{--mermaid-font-family:arial,sans-serif;}\u003C/style>\u003Cg>\u003C/g>\u003Cg transform=\"translate(225,225)\">\u003Ccircle class=\"pieOuterCircle\" r=\"186\" cy=\"0\" cx=\"0\">\u003C/circle>\u003Cpath class=\"pieCircle\" fill=\"#ECECFF\" d=\"M0,-185A185,185,0,1,1,-108.74,-149.668L0,0Z\">\u003C/path>\u003Cpath class=\"pieCircle\" fill=\"#ffffde\" d=\"M-108.74,-149.668A185,185,0,0,1,-46.008,-179.188L0,0Z\">\u003C/path>\u003Cpath class=\"pieCircle\" fill=\"hsl(80, 100%, 56.2745098039%)\" d=\"M-46.008,-179.188A185,185,0,0,1,0,-185L0,0Z\">\u003C/path>\u003Ctext style=\"text-anchor: middle;\" class=\"slice\" transform=\"translate(42.87610796952391,131.95909163595257)\">90%\u003C/text>\u003Ctext style=\"text-anchor: middle;\" class=\"slice\" transform=\"translate(-59.07687670465376,-125.54475352966024)\">6%\u003C/text>\u003Ctext style=\"text-anchor: middle;\" class=\"slice\" transform=\"translate(-17.389986157047144,-137.6559148073838)\">4%\u003C/text>\u003Ctext class=\"pieTitleText\" y=\"-200\" x=\"0\">What Voldemort doesn't have?\u003C/text>\u003Cg transform=\"translate(216,-33)\" class=\"legend\">\u003Crect style=\"fill: rgb(181, 255, 32); stroke: rgb(181, 255, 32);\" height=\"18\" width=\"18\">\u003C/rect>\u003Ctext y=\"14\" x=\"22\">FRIENDS\u003C/text>\u003C/g>\u003Cg transform=\"translate(216,-11)\" class=\"legend\">\u003Crect style=\"fill: rgb(255, 255, 222); stroke: rgb(255, 255, 222);\" height=\"18\" width=\"18\">\u003C/rect>\u003Ctext y=\"14\" x=\"22\">FAMILY\u003C/text>\u003C/g>\u003Cg transform=\"translate(216,11)\" class=\"legend\">\u003Crect style=\"fill: rgb(236, 236, 255); stroke: rgb(236, 236, 255);\" height=\"18\" width=\"18\">\u003C/rect>\u003Ctext y=\"14\" x=\"22\">NOSE\u003C/text>\u003C/g>\u003C/g>\u003C/svg>\n\u003Csvg aria-roledescription=\"sequence\" role=\"graphics-document document\" viewBox=\"-50 -10 750 571\" style=\"max-width: 750px;\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" id=\"mermaid-3\">\u003Cg>\u003Crect class=\"actor actor-bottom\" ry=\"3\" rx=\"3\" name=\"John\" height=\"65\" width=\"150\" stroke=\"#666\" fill=\"#eaeaea\" y=\"485\" x=\"400\">\u003C/rect>\u003Ctext style=\"text-anchor: middle; font-size: 16px; font-weight: 400; font-family: arial, sans-serif;\" class=\"actor actor-box\" alignment-baseline=\"central\" dominant-baseline=\"central\" y=\"517.5\" x=\"475\">\u003Ctspan dy=\"0\" x=\"475\">John\u003C/tspan>\u003C/text>\u003C/g>\u003Cg>\u003Crect class=\"actor actor-bottom\" ry=\"3\" rx=\"3\" name=\"Bob\" height=\"65\" width=\"150\" stroke=\"#666\" fill=\"#eaeaea\" y=\"485\" x=\"200\">\u003C/rect>\u003Ctext style=\"text-anchor: middle; font-size: 16px; font-weight: 400; font-family: arial, sans-serif;\" class=\"actor actor-box\" alignment-baseline=\"central\" dominant-baseline=\"central\" y=\"517.5\" x=\"275\">\u003Ctspan dy=\"0\" x=\"275\">Bob\u003C/tspan>\u003C/text>\u003C/g>\u003Cg>\u003Crect class=\"actor actor-bottom\" ry=\"3\" rx=\"3\" name=\"Alice\" height=\"65\" width=\"150\" stroke=\"#666\" fill=\"#eaeaea\" y=\"485\" x=\"0\">\u003C/rect>\u003Ctext style=\"text-anchor: middle; font-size: 16px; font-weight: 400; font-family: arial, sans-serif;\" class=\"actor actor-box\" alignment-baseline=\"central\" dominant-baseline=\"central\" y=\"517.5\" x=\"75\">\u003Ctspan dy=\"0\" x=\"75\">Alice\u003C/tspan>\u003C/text>\u003C/g>\u003Cg>\u003Cline name=\"John\" stroke=\"#999\" stroke-width=\"0.5px\" class=\"actor-line 200\" y2=\"485\" x2=\"475\" y1=\"65\" x1=\"475\" id=\"actor2\">\u003C/line>\u003Cg id=\"root-2\">\u003Crect class=\"actor actor-top\" ry=\"3\" rx=\"3\" name=\"John\" height=\"65\" width=\"150\" stroke=\"#666\" fill=\"#eaeaea\" y=\"0\" x=\"400\">\u003C/rect>\u003Ctext style=\"text-anchor: middle; font-size: 16px; font-weight: 400; font-family: arial, sans-serif;\" class=\"actor actor-box\" alignment-baseline=\"central\" dominant-baseline=\"central\" y=\"32.5\" x=\"475\">\u003Ctspan dy=\"0\" x=\"475\">John\u003C/tspan>\u003C/text>\u003C/g>\u003C/g>\u003Cg>\u003Cline name=\"Bob\" stroke=\"#999\" stroke-width=\"0.5px\" class=\"actor-line 200\" y2=\"485\" x2=\"275\" y1=\"65\" x1=\"275\" id=\"actor1\">\u003C/line>\u003Cg id=\"root-1\">\u003Crect class=\"actor actor-top\" ry=\"3\" rx=\"3\" name=\"Bob\" height=\"65\" width=\"150\" stroke=\"#666\" fill=\"#eaeaea\" y=\"0\" x=\"200\">\u003C/rect>\u003Ctext style=\"text-anchor: middle; font-size: 16px; font-weight: 400; font-family: arial, sans-serif;\" class=\"actor actor-box\" alignment-baseline=\"central\" dominant-baseline=\"central\" y=\"32.5\" x=\"275\">\u003Ctspan dy=\"0\" x=\"275\">Bob\u003C/tspan>\u003C/text>\u003C/g>\u003C/g>\u003Cg>\u003Cline name=\"Alice\" stroke=\"#999\" stroke-width=\"0.5px\" class=\"actor-line 200\" y2=\"485\" x2=\"75\" y1=\"65\" x1=\"75\" id=\"actor0\">\u003C/line>\u003Cg id=\"root-0\">\u003Crect class=\"actor actor-top\" ry=\"3\" rx=\"3\" name=\"Alice\" height=\"65\" width=\"150\" stroke=\"#666\" fill=\"#eaeaea\" y=\"0\" x=\"0\">\u003C/rect>\u003Ctext style=\"text-anchor: middle; font-size: 16px; font-weight: 400; font-family: arial, sans-serif;\" class=\"actor actor-box\" alignment-baseline=\"central\" dominant-baseline=\"central\" y=\"32.5\" x=\"75\">\u003Ctspan dy=\"0\" x=\"75\">Alice\u003C/tspan>\u003C/text>\u003C/g>\u003C/g>\u003Cstyle>#mermaid-3{font-family:arial,sans-serif;font-size:16px;fill:#333;}@keyframes edge-animation-frame{from{stroke-dashoffset:0;}}@keyframes dash{to{stroke-dashoffset:0;}}#mermaid-3 .edge-animation-slow{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 50s linear infinite;stroke-linecap:round;}#mermaid-3 .edge-animation-fast{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 20s linear infinite;stroke-linecap:round;}#mermaid-3 .error-icon{fill:#552222;}#mermaid-3 .error-text{fill:#552222;stroke:#552222;}#mermaid-3 .edge-thickness-normal{stroke-width:1px;}#mermaid-3 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-3 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-3 .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-3 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-3 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-3 .marker{fill:#333333;stroke:#333333;}#mermaid-3 .marker.cross{stroke:#333333;}#mermaid-3 svg{font-family:arial,sans-serif;font-size:16px;}#mermaid-3 p{margin:0;}#mermaid-3 .actor{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;}#mermaid-3 text.actor>tspan{fill:black;stroke:none;}#mermaid-3 .actor-line{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);}#mermaid-3 .innerArc{stroke-width:1.5;stroke-dasharray:none;}#mermaid-3 .messageLine0{stroke-width:1.5;stroke-dasharray:none;stroke:#333;}#mermaid-3 .messageLine1{stroke-width:1.5;stroke-dasharray:2,2;stroke:#333;}#mermaid-3 #arrowhead path{fill:#333;stroke:#333;}#mermaid-3 .sequenceNumber{fill:white;}#mermaid-3 #sequencenumber{fill:#333;}#mermaid-3 #crosshead path{fill:#333;stroke:#333;}#mermaid-3 .messageText{fill:#333;stroke:none;}#mermaid-3 .labelBox{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;}#mermaid-3 .labelText,#mermaid-3 .labelText>tspan{fill:black;stroke:none;}#mermaid-3 .loopText,#mermaid-3 .loopText>tspan{fill:black;stroke:none;}#mermaid-3 .loopLine{stroke-width:2px;stroke-dasharray:2,2;stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);}#mermaid-3 .note{stroke:#aaaa33;fill:#fff5ad;}#mermaid-3 .noteText,#mermaid-3 .noteText>tspan{fill:black;stroke:none;}#mermaid-3 .activation0{fill:#f4f4f4;stroke:#666;}#mermaid-3 .activation1{fill:#f4f4f4;stroke:#666;}#mermaid-3 .activation2{fill:#f4f4f4;stroke:#666;}#mermaid-3 .actorPopupMenu{position:absolute;}#mermaid-3 .actorPopupMenuPanel{position:absolute;fill:#ECECFF;box-shadow:0px 8px 16px 0px rgba(0,0,0,0.2);filter:drop-shadow(3px 5px 2px rgb(0 0 0 / 0.4));}#mermaid-3 .actor-man line{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;}#mermaid-3 .actor-man circle,#mermaid-3 line{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;stroke-width:2px;}#mermaid-3 :root{--mermaid-font-family:arial,sans-serif;}\u003C/style>\u003Cg>\u003C/g>\u003Cdefs>\u003Csymbol height=\"24\" width=\"24\" id=\"computer\">\u003Cpath d=\"M2 2v13h20v-13h-20zm18 11h-16v-9h16v9zm-10.228 6l.466-1h3.524l.467 1h-4.457zm14.228 3h-24l2-6h2.104l-1.33 4h18.45l-1.297-4h2.073l2 6zm-5-10h-14v-7h14v7z\" transform=\"scale(.5)\">\u003C/path>\u003C/symbol>\u003C/defs>\u003Cdefs>\u003Csymbol clip-rule=\"evenodd\" fill-rule=\"evenodd\" id=\"database\">\u003Cpath d=\"M12.258.001l.256.004.255.005.253.008.251.01.249.012.247.015.246.016.242.019.241.02.239.023.236.024.233.027.231.028.229.031.225.032.223.034.22.036.217.038.214.04.211.041.208.043.205.045.201.046.198.048.194.05.191.051.187.053.183.054.18.056.175.057.172.059.168.06.163.061.16.063.155.064.15.066.074.033.073.033.071.034.07.034.069.035.068.035.067.035.066.035.064.036.064.036.062.036.06.036.06.037.058.037.058.037.055.038.055.038.053.038.052.038.051.039.05.039.048.039.047.039.045.04.044.04.043.04.041.04.04.041.039.041.037.041.036.041.034.041.033.042.032.042.03.042.029.042.027.042.026.043.024.043.023.043.021.043.02.043.018.044.017.043.015.044.013.044.012.044.011.045.009.044.007.045.006.045.004.045.002.045.001.045v17l-.001.045-.002.045-.004.045-.006.045-.007.045-.009.044-.011.045-.012.044-.013.044-.015.044-.017.043-.018.044-.02.043-.021.043-.023.043-.024.043-.026.043-.027.042-.029.042-.03.042-.032.042-.033.042-.034.041-.036.041-.037.041-.039.041-.04.041-.041.04-.043.04-.044.04-.045.04-.047.039-.048.039-.05.039-.051.039-.052.038-.053.038-.055.038-.055.038-.058.037-.058.037-.06.037-.06.036-.062.036-.064.036-.064.036-.066.035-.067.035-.068.035-.069.035-.07.034-.071.034-.073.033-.074.033-.15.066-.155.064-.16.063-.163.061-.168.06-.172.059-.175.057-.18.056-.183.054-.187.053-.191.051-.194.05-.198.048-.201.046-.205.045-.208.043-.211.041-.214.04-.217.038-.22.036-.223.034-.225.032-.229.031-.231.028-.233.027-.236.024-.239.023-.241.02-.242.019-.246.016-.247.015-.249.012-.251.01-.253.008-.255.005-.256.004-.258.001-.258-.001-.256-.004-.255-.005-.253-.008-.251-.01-.249-.012-.247-.015-.245-.016-.243-.019-.241-.02-.238-.023-.236-.024-.234-.027-.231-.028-.228-.031-.226-.032-.223-.034-.22-.036-.217-.038-.214-.04-.211-.041-.208-.043-.204-.045-.201-.046-.198-.048-.195-.05-.19-.051-.187-.053-.184-.054-.179-.056-.176-.057-.172-.059-.167-.06-.164-.061-.159-.063-.155-.064-.151-.066-.074-.033-.072-.033-.072-.034-.07-.034-.069-.035-.068-.035-.067-.035-.066-.035-.064-.036-.063-.036-.062-.036-.061-.036-.06-.037-.058-.037-.057-.037-.056-.038-.055-.038-.053-.038-.052-.038-.051-.039-.049-.039-.049-.039-.046-.039-.046-.04-.044-.04-.043-.04-.041-.04-.04-.041-.039-.041-.037-.041-.036-.041-.034-.041-.033-.042-.032-.042-.03-.042-.029-.042-.027-.042-.026-.043-.024-.043-.023-.043-.021-.043-.02-.043-.018-.044-.017-.043-.015-.044-.013-.044-.012-.044-.011-.045-.009-.044-.007-.045-.006-.045-.004-.045-.002-.045-.001-.045v-17l.001-.045.002-.045.004-.045.006-.045.007-.045.009-.044.011-.045.012-.044.013-.044.015-.044.017-.043.018-.044.02-.043.021-.043.023-.043.024-.043.026-.043.027-.042.029-.042.03-.042.032-.042.033-.042.034-.041.036-.041.037-.041.039-.041.04-.041.041-.04.043-.04.044-.04.046-.04.046-.039.049-.039.049-.039.051-.039.052-.038.053-.038.055-.038.056-.038.057-.037.058-.037.06-.037.061-.036.062-.036.063-.036.064-.036.066-.035.067-.035.068-.035.069-.035.07-.034.072-.034.072-.033.074-.033.151-.066.155-.064.159-.063.164-.061.167-.06.172-.059.176-.057.179-.056.184-.054.187-.053.19-.051.195-.05.198-.048.201-.046.204-.045.208-.043.211-.041.214-.04.217-.038.22-.036.223-.034.226-.032.228-.031.231-.028.234-.027.236-.024.238-.023.241-.02.243-.019.245-.016.247-.015.249-.012.251-.01.253-.008.255-.005.256-.004.258-.001.258.001zm-9.258 20.499v.01l.001.021.003.021.004.022.005.021.006.022.007.022.009.023.01.022.011.023.012.023.013.023.015.023.016.024.017.023.018.024.019.024.021.024.022.025.023.024.024.025.052.049.056.05.061.051.066.051.07.051.075.051.079.052.084.052.088.052.092.052.097.052.102.051.105.052.11.052.114.051.119.051.123.051.127.05.131.05.135.05.139.048.144.049.147.047.152.047.155.047.16.045.163.045.167.043.171.043.176.041.178.041.183.039.187.039.19.037.194.035.197.035.202.033.204.031.209.03.212.029.216.027.219.025.222.024.226.021.23.02.233.018.236.016.24.015.243.012.246.01.249.008.253.005.256.004.259.001.26-.001.257-.004.254-.005.25-.008.247-.011.244-.012.241-.014.237-.016.233-.018.231-.021.226-.021.224-.024.22-.026.216-.027.212-.028.21-.031.205-.031.202-.034.198-.034.194-.036.191-.037.187-.039.183-.04.179-.04.175-.042.172-.043.168-.044.163-.045.16-.046.155-.046.152-.047.148-.048.143-.049.139-.049.136-.05.131-.05.126-.05.123-.051.118-.052.114-.051.11-.052.106-.052.101-.052.096-.052.092-.052.088-.053.083-.051.079-.052.074-.052.07-.051.065-.051.06-.051.056-.05.051-.05.023-.024.023-.025.021-.024.02-.024.019-.024.018-.024.017-.024.015-.023.014-.024.013-.023.012-.023.01-.023.01-.022.008-.022.006-.022.006-.022.004-.022.004-.021.001-.021.001-.021v-4.127l-.077.055-.08.053-.083.054-.085.053-.087.052-.09.052-.093.051-.095.05-.097.05-.1.049-.102.049-.105.048-.106.047-.109.047-.111.046-.114.045-.115.045-.118.044-.12.043-.122.042-.124.042-.126.041-.128.04-.13.04-.132.038-.134.038-.135.037-.138.037-.139.035-.142.035-.143.034-.144.033-.147.032-.148.031-.15.03-.151.03-.153.029-.154.027-.156.027-.158.026-.159.025-.161.024-.162.023-.163.022-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.011-.178.01-.179.008-.179.008-.181.006-.182.005-.182.004-.184.003-.184.002h-.37l-.184-.002-.184-.003-.182-.004-.182-.005-.181-.006-.179-.008-.179-.008-.178-.01-.176-.011-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.022-.162-.023-.161-.024-.159-.025-.157-.026-.156-.027-.155-.027-.153-.029-.151-.03-.15-.03-.148-.031-.146-.032-.145-.033-.143-.034-.141-.035-.14-.035-.137-.037-.136-.037-.134-.038-.132-.038-.13-.04-.128-.04-.126-.041-.124-.042-.122-.042-.12-.044-.117-.043-.116-.045-.113-.045-.112-.046-.109-.047-.106-.047-.105-.048-.102-.049-.1-.049-.097-.05-.095-.05-.093-.052-.09-.051-.087-.052-.085-.053-.083-.054-.08-.054-.077-.054v4.127zm0-5.654v.011l.001.021.003.021.004.021.005.022.006.022.007.022.009.022.01.022.011.023.012.023.013.023.015.024.016.023.017.024.018.024.019.024.021.024.022.024.023.025.024.024.052.05.056.05.061.05.066.051.07.051.075.052.079.051.084.052.088.052.092.052.097.052.102.052.105.052.11.051.114.051.119.052.123.05.127.051.131.05.135.049.139.049.144.048.147.048.152.047.155.046.16.045.163.045.167.044.171.042.176.042.178.04.183.04.187.038.19.037.194.036.197.034.202.033.204.032.209.03.212.028.216.027.219.025.222.024.226.022.23.02.233.018.236.016.24.014.243.012.246.01.249.008.253.006.256.003.259.001.26-.001.257-.003.254-.006.25-.008.247-.01.244-.012.241-.015.237-.016.233-.018.231-.02.226-.022.224-.024.22-.025.216-.027.212-.029.21-.03.205-.032.202-.033.198-.035.194-.036.191-.037.187-.039.183-.039.179-.041.175-.042.172-.043.168-.044.163-.045.16-.045.155-.047.152-.047.148-.048.143-.048.139-.05.136-.049.131-.05.126-.051.123-.051.118-.051.114-.052.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.051.07-.052.065-.051.06-.05.056-.051.051-.049.023-.025.023-.024.021-.025.02-.024.019-.024.018-.024.017-.024.015-.023.014-.023.013-.024.012-.022.01-.023.01-.023.008-.022.006-.022.006-.022.004-.021.004-.022.001-.021.001-.021v-4.139l-.077.054-.08.054-.083.054-.085.052-.087.053-.09.051-.093.051-.095.051-.097.05-.1.049-.102.049-.105.048-.106.047-.109.047-.111.046-.114.045-.115.044-.118.044-.12.044-.122.042-.124.042-.126.041-.128.04-.13.039-.132.039-.134.038-.135.037-.138.036-.139.036-.142.035-.143.033-.144.033-.147.033-.148.031-.15.03-.151.03-.153.028-.154.028-.156.027-.158.026-.159.025-.161.024-.162.023-.163.022-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.011-.178.009-.179.009-.179.007-.181.007-.182.005-.182.004-.184.003-.184.002h-.37l-.184-.002-.184-.003-.182-.004-.182-.005-.181-.007-.179-.007-.179-.009-.178-.009-.176-.011-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.022-.162-.023-.161-.024-.159-.025-.157-.026-.156-.027-.155-.028-.153-.028-.151-.03-.15-.03-.148-.031-.146-.033-.145-.033-.143-.033-.141-.035-.14-.036-.137-.036-.136-.037-.134-.038-.132-.039-.13-.039-.128-.04-.126-.041-.124-.042-.122-.043-.12-.043-.117-.044-.116-.044-.113-.046-.112-.046-.109-.046-.106-.047-.105-.048-.102-.049-.1-.049-.097-.05-.095-.051-.093-.051-.09-.051-.087-.053-.085-.052-.083-.054-.08-.054-.077-.054v4.139zm0-5.666v.011l.001.02.003.022.004.021.005.022.006.021.007.022.009.023.01.022.011.023.012.023.013.023.015.023.016.024.017.024.018.023.019.024.021.025.022.024.023.024.024.025.052.05.056.05.061.05.066.051.07.051.075.052.079.051.084.052.088.052.092.052.097.052.102.052.105.051.11.052.114.051.119.051.123.051.127.05.131.05.135.05.139.049.144.048.147.048.152.047.155.046.16.045.163.045.167.043.171.043.176.042.178.04.183.04.187.038.19.037.194.036.197.034.202.033.204.032.209.03.212.028.216.027.219.025.222.024.226.021.23.02.233.018.236.017.24.014.243.012.246.01.249.008.253.006.256.003.259.001.26-.001.257-.003.254-.006.25-.008.247-.01.244-.013.241-.014.237-.016.233-.018.231-.02.226-.022.224-.024.22-.025.216-.027.212-.029.21-.03.205-.032.202-.033.198-.035.194-.036.191-.037.187-.039.183-.039.179-.041.175-.042.172-.043.168-.044.163-.045.16-.045.155-.047.152-.047.148-.048.143-.049.139-.049.136-.049.131-.051.126-.05.123-.051.118-.052.114-.051.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.052.07-.051.065-.051.06-.051.056-.05.051-.049.023-.025.023-.025.021-.024.02-.024.019-.024.018-.024.017-.024.015-.023.014-.024.013-.023.012-.023.01-.022.01-.023.008-.022.006-.022.006-.022.004-.022.004-.021.001-.021.001-.021v-4.153l-.077.054-.08.054-.083.053-.085.053-.087.053-.09.051-.093.051-.095.051-.097.05-.1.049-.102.048-.105.048-.106.048-.109.046-.111.046-.114.046-.115.044-.118.044-.12.043-.122.043-.124.042-.126.041-.128.04-.13.039-.132.039-.134.038-.135.037-.138.036-.139.036-.142.034-.143.034-.144.033-.147.032-.148.032-.15.03-.151.03-.153.028-.154.028-.156.027-.158.026-.159.024-.161.024-.162.023-.163.023-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.01-.178.01-.179.009-.179.007-.181.006-.182.006-.182.004-.184.003-.184.001-.185.001-.185-.001-.184-.001-.184-.003-.182-.004-.182-.006-.181-.006-.179-.007-.179-.009-.178-.01-.176-.01-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.023-.162-.023-.161-.024-.159-.024-.157-.026-.156-.027-.155-.028-.153-.028-.151-.03-.15-.03-.148-.032-.146-.032-.145-.033-.143-.034-.141-.034-.14-.036-.137-.036-.136-.037-.134-.038-.132-.039-.13-.039-.128-.041-.126-.041-.124-.041-.122-.043-.12-.043-.117-.044-.116-.044-.113-.046-.112-.046-.109-.046-.106-.048-.105-.048-.102-.048-.1-.05-.097-.049-.095-.051-.093-.051-.09-.052-.087-.052-.085-.053-.083-.053-.08-.054-.077-.054v4.153zm8.74-8.179l-.257.004-.254.005-.25.008-.247.011-.244.012-.241.014-.237.016-.233.018-.231.021-.226.022-.224.023-.22.026-.216.027-.212.028-.21.031-.205.032-.202.033-.198.034-.194.036-.191.038-.187.038-.183.04-.179.041-.175.042-.172.043-.168.043-.163.045-.16.046-.155.046-.152.048-.148.048-.143.048-.139.049-.136.05-.131.05-.126.051-.123.051-.118.051-.114.052-.11.052-.106.052-.101.052-.096.052-.092.052-.088.052-.083.052-.079.052-.074.051-.07.052-.065.051-.06.05-.056.05-.051.05-.023.025-.023.024-.021.024-.02.025-.019.024-.018.024-.017.023-.015.024-.014.023-.013.023-.012.023-.01.023-.01.022-.008.022-.006.023-.006.021-.004.022-.004.021-.001.021-.001.021.001.021.001.021.004.021.004.022.006.021.006.023.008.022.01.022.01.023.012.023.013.023.014.023.015.024.017.023.018.024.019.024.02.025.021.024.023.024.023.025.051.05.056.05.06.05.065.051.07.052.074.051.079.052.083.052.088.052.092.052.096.052.101.052.106.052.11.052.114.052.118.051.123.051.126.051.131.05.136.05.139.049.143.048.148.048.152.048.155.046.16.046.163.045.168.043.172.043.175.042.179.041.183.04.187.038.191.038.194.036.198.034.202.033.205.032.21.031.212.028.216.027.22.026.224.023.226.022.231.021.233.018.237.016.241.014.244.012.247.011.25.008.254.005.257.004.26.001.26-.001.257-.004.254-.005.25-.008.247-.011.244-.012.241-.014.237-.016.233-.018.231-.021.226-.022.224-.023.22-.026.216-.027.212-.028.21-.031.205-.032.202-.033.198-.034.194-.036.191-.038.187-.038.183-.04.179-.041.175-.042.172-.043.168-.043.163-.045.16-.046.155-.046.152-.048.148-.048.143-.048.139-.049.136-.05.131-.05.126-.051.123-.051.118-.051.114-.052.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.051.07-.052.065-.051.06-.05.056-.05.051-.05.023-.025.023-.024.021-.024.02-.025.019-.024.018-.024.017-.023.015-.024.014-.023.013-.023.012-.023.01-.023.01-.022.008-.022.006-.023.006-.021.004-.022.004-.021.001-.021.001-.021-.001-.021-.001-.021-.004-.021-.004-.022-.006-.021-.006-.023-.008-.022-.01-.022-.01-.023-.012-.023-.013-.023-.014-.023-.015-.024-.017-.023-.018-.024-.019-.024-.02-.025-.021-.024-.023-.024-.023-.025-.051-.05-.056-.05-.06-.05-.065-.051-.07-.052-.074-.051-.079-.052-.083-.052-.088-.052-.092-.052-.096-.052-.101-.052-.106-.052-.11-.052-.114-.052-.118-.051-.123-.051-.126-.051-.131-.05-.136-.05-.139-.049-.143-.048-.148-.048-.152-.048-.155-.046-.16-.046-.163-.045-.168-.043-.172-.043-.175-.042-.179-.041-.183-.04-.187-.038-.191-.038-.194-.036-.198-.034-.202-.033-.205-.032-.21-.031-.212-.028-.216-.027-.22-.026-.224-.023-.226-.022-.231-.021-.233-.018-.237-.016-.241-.014-.244-.012-.247-.011-.25-.008-.254-.005-.257-.004-.26-.001-.26.001z\" transform=\"scale(.5)\">\u003C/path>\u003C/symbol>\u003C/defs>\u003Cdefs>\u003Csymbol height=\"24\" width=\"24\" id=\"clock\">\u003Cpath d=\"M12 2c5.514 0 10 4.486 10 10s-4.486 10-10 10-10-4.486-10-10 4.486-10 10-10zm0-2c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm5.848 12.459c.202.038.202.333.001.372-1.907.361-6.045 1.111-6.547 1.111-.719 0-1.301-.582-1.301-1.301 0-.512.77-5.447 1.125-7.445.034-.192.312-.181.343.014l.985 6.238 5.394 1.011z\" transform=\"scale(.5)\">\u003C/path>\u003C/symbol>\u003C/defs>\u003Cdefs>\u003Cmarker orient=\"auto-start-reverse\" markerHeight=\"12\" markerWidth=\"12\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"7.9\" id=\"arrowhead\">\u003Cpath d=\"M -1 0 L 10 5 L 0 10 z\">\u003C/path>\u003C/marker>\u003C/defs>\u003Cdefs>\u003Cmarker refY=\"4.5\" refX=\"4\" orient=\"auto\" markerHeight=\"8\" markerWidth=\"15\" id=\"crosshead\">\u003Cpath style=\"stroke-dasharray: 0, 0;\" d=\"M 1,2 L 6,7 M 6,2 L 1,7\" stroke-width=\"1pt\" stroke=\"#000000\" fill=\"none\">\u003C/path>\u003C/marker>\u003C/defs>\u003Cdefs>\u003Cmarker orient=\"auto\" markerHeight=\"28\" markerWidth=\"20\" refY=\"7\" refX=\"15.5\" id=\"filled-head\">\u003Cpath d=\"M 18,7 L9,13 L14,7 L9,1 Z\">\u003C/path>\u003C/marker>\u003C/defs>\u003Cdefs>\u003Cmarker orient=\"auto\" markerHeight=\"40\" markerWidth=\"60\" refY=\"15\" refX=\"15\" id=\"sequencenumber\">\u003Ccircle r=\"6\" cy=\"15\" cx=\"15\">\u003C/circle>\u003C/marker>\u003C/defs>\u003Cg>\u003Cline class=\"loopLine\" y2=\"119\" x2=\"582\" y1=\"119\" x1=\"370\">\u003C/line>\u003Cline class=\"loopLine\" y2=\"268\" x2=\"582\" y1=\"119\" x1=\"582\">\u003C/line>\u003Cline class=\"loopLine\" y2=\"268\" x2=\"582\" y1=\"268\" x1=\"370\">\u003C/line>\u003Cline class=\"loopLine\" y2=\"268\" x2=\"370\" y1=\"119\" x1=\"370\">\u003C/line>\u003Cpolygon class=\"labelBox\" points=\"370,119 420,119 420,132 411.6,139 370,139\">\u003C/polygon>\u003Ctext style=\"font-family: arial, sans-serif; font-size: 16px; font-weight: 400;\" class=\"labelText\" alignment-baseline=\"middle\" dominant-baseline=\"middle\" text-anchor=\"middle\" y=\"132\" x=\"395\">loop\u003C/text>\u003Ctext style=\"font-family: arial, sans-serif; font-size: 16px; font-weight: 400;\" class=\"loopText\" text-anchor=\"middle\" y=\"137\" x=\"501\">\u003Ctspan x=\"501\">[Healthcheck]\u003C/tspan>\u003C/text>\u003C/g>\u003Cg>\u003Crect class=\"note\" height=\"55\" width=\"150\" stroke=\"#666\" fill=\"#EDF2AE\" y=\"278\" x=\"500\">\u003C/rect>\u003Ctext style=\"font-family: arial, sans-serif; font-size: 16px; font-weight: 400;\" dy=\"1em\" class=\"noteText\" alignment-baseline=\"middle\" dominant-baseline=\"middle\" text-anchor=\"middle\" y=\"283\" x=\"575\">\u003Ctspan x=\"575\">Rational thoughts \u003C/tspan>\u003C/text>\u003Ctext style=\"font-family: arial, sans-serif; font-size: 16px; font-weight: 400;\" dy=\"1em\" class=\"noteText\" alignment-baseline=\"middle\" dominant-baseline=\"middle\" text-anchor=\"middle\" y=\"300\" x=\"575\">\u003Ctspan x=\"575\">prevail!\u003C/tspan>\u003C/text>\u003C/g>\u003Ctext style=\"font-family: arial, sans-serif; font-size: 16px; font-weight: 400;\" dy=\"1em\" class=\"messageText\" alignment-baseline=\"middle\" dominant-baseline=\"middle\" text-anchor=\"middle\" y=\"80\" x=\"274\">Hello John, how are you?\u003C/text>\u003Cline style=\"fill: none;\" marker-end=\"url(#arrowhead)\" stroke=\"none\" stroke-width=\"2\" class=\"messageLine0\" y2=\"109\" x2=\"471\" y1=\"109\" x1=\"76\">\u003C/line>\u003Ctext style=\"font-family: arial, sans-serif; font-size: 16px; font-weight: 400;\" dy=\"1em\" class=\"messageText\" alignment-baseline=\"middle\" dominant-baseline=\"middle\" text-anchor=\"middle\" y=\"169\" x=\"476\">Fight against hypochondria\u003C/text>\u003Cpath style=\"fill: none;\" marker-end=\"url(#arrowhead)\" stroke=\"none\" stroke-width=\"2\" class=\"messageLine0\" d=\"M 476,198 C 536,188 536,228 476,218\">\u003C/path>\u003Ctext style=\"font-family: arial, sans-serif; font-size: 16px; font-weight: 400;\" dy=\"1em\" class=\"messageText\" alignment-baseline=\"middle\" dominant-baseline=\"middle\" text-anchor=\"middle\" y=\"348\" x=\"277\">Great!\u003C/text>\u003Cline style=\"stroke-dasharray: 3, 3; fill: none;\" marker-end=\"url(#arrowhead)\" stroke=\"none\" stroke-width=\"2\" class=\"messageLine1\" y2=\"377\" x2=\"79\" y1=\"377\" x1=\"474\">\u003C/line>\u003Ctext style=\"font-family: arial, sans-serif; font-size: 16px; font-weight: 400;\" dy=\"1em\" class=\"messageText\" alignment-baseline=\"middle\" dominant-baseline=\"middle\" text-anchor=\"middle\" y=\"392\" x=\"377\">How about you?\u003C/text>\u003Cline style=\"fill: none;\" marker-end=\"url(#arrowhead)\" stroke=\"none\" stroke-width=\"2\" class=\"messageLine0\" y2=\"421\" x2=\"279\" y1=\"421\" x1=\"474\">\u003C/line>\u003Ctext style=\"font-family: arial, sans-serif; font-size: 16px; font-weight: 400;\" dy=\"1em\" class=\"messageText\" alignment-baseline=\"middle\" dominant-baseline=\"middle\" text-anchor=\"middle\" y=\"436\" x=\"374\">Jolly good!\u003C/text>\u003Cline style=\"stroke-dasharray: 3, 3; fill: none;\" marker-end=\"url(#arrowhead)\" stroke=\"none\" stroke-width=\"2\" class=\"messageLine1\" y2=\"465\" x2=\"471\" y1=\"465\" x1=\"276\">\u003C/line>\u003C/svg>\n\u003Csvg aria-roledescription=\"flowchart-v2\" role=\"graphics-document document\" viewBox=\"0 0 1738.671875 670.875\" style=\"max-width: 1738.671875px;\" class=\"flowchart\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" id=\"mermaid-4\">\u003Cstyle>#mermaid-4{font-family:arial,sans-serif;font-size:16px;fill:#333;}@keyframes edge-animation-frame{from{stroke-dashoffset:0;}}@keyframes dash{to{stroke-dashoffset:0;}}#mermaid-4 .edge-animation-slow{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 50s linear infinite;stroke-linecap:round;}#mermaid-4 .edge-animation-fast{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 20s linear infinite;stroke-linecap:round;}#mermaid-4 .error-icon{fill:#552222;}#mermaid-4 .error-text{fill:#552222;stroke:#552222;}#mermaid-4 .edge-thickness-normal{stroke-width:1px;}#mermaid-4 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-4 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-4 .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-4 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-4 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-4 .marker{fill:#333333;stroke:#333333;}#mermaid-4 .marker.cross{stroke:#333333;}#mermaid-4 svg{font-family:arial,sans-serif;font-size:16px;}#mermaid-4 p{margin:0;}#mermaid-4 .label{font-family:arial,sans-serif;color:#333;}#mermaid-4 .cluster-label text{fill:#333;}#mermaid-4 .cluster-label span{color:#333;}#mermaid-4 .cluster-label span p{background-color:transparent;}#mermaid-4 .label text,#mermaid-4 span{fill:#333;color:#333;}#mermaid-4 .node rect,#mermaid-4 .node circle,#mermaid-4 .node ellipse,#mermaid-4 .node polygon,#mermaid-4 .node path{fill:#ECECFF;stroke:#9370DB;stroke-width:1px;}#mermaid-4 .rough-node .label text,#mermaid-4 .node .label text,#mermaid-4 .image-shape .label,#mermaid-4 .icon-shape .label{text-anchor:middle;}#mermaid-4 .node .katex path{fill:#000;stroke:#000;stroke-width:1px;}#mermaid-4 .rough-node .label,#mermaid-4 .node .label,#mermaid-4 .image-shape .label,#mermaid-4 .icon-shape .label{text-align:center;}#mermaid-4 .node.clickable{cursor:pointer;}#mermaid-4 .root .anchor path{fill:#333333!important;stroke-width:0;stroke:#333333;}#mermaid-4 .arrowheadPath{fill:#333333;}#mermaid-4 .edgePath .path{stroke:#333333;stroke-width:2.0px;}#mermaid-4 .flowchart-link{stroke:#333333;fill:none;}#mermaid-4 .edgeLabel{background-color:rgba(232,232,232, 0.8);text-align:center;}#mermaid-4 .edgeLabel p{background-color:rgba(232,232,232, 0.8);}#mermaid-4 .edgeLabel rect{opacity:0.5;background-color:rgba(232,232,232, 0.8);fill:rgba(232,232,232, 0.8);}#mermaid-4 .labelBkg{background-color:rgba(232, 232, 232, 0.5);}#mermaid-4 .cluster rect{fill:#ffffde;stroke:#aaaa33;stroke-width:1px;}#mermaid-4 .cluster text{fill:#333;}#mermaid-4 .cluster span{color:#333;}#mermaid-4 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:arial,sans-serif;font-size:12px;background:hsl(80, 100%, 96.2745098039%);border:1px solid #aaaa33;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-4 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#333;}#mermaid-4 rect.text{fill:none;stroke-width:0;}#mermaid-4 .icon-shape,#mermaid-4 .image-shape{background-color:rgba(232,232,232, 0.8);text-align:center;}#mermaid-4 .icon-shape p,#mermaid-4 .image-shape p{background-color:rgba(232,232,232, 0.8);padding:2px;}#mermaid-4 .icon-shape rect,#mermaid-4 .image-shape rect{opacity:0.5;background-color:rgba(232,232,232, 0.8);fill:rgba(232,232,232, 0.8);}#mermaid-4 .label-icon{display:inline-block;height:1em;overflow:visible;vertical-align:-0.125em;}#mermaid-4 .node .label-icon path{fill:currentColor;stroke:revert;stroke-width:revert;}#mermaid-4 :root{--mermaid-font-family:arial,sans-serif;}#mermaid-4 .green>*{fill:#9f6!important;stroke:#333!important;stroke-width:2px!important;}#mermaid-4 .green span{fill:#9f6!important;stroke:#333!important;stroke-width:2px!important;}#mermaid-4 .orange>*{fill:#f96!important;stroke:#333!important;stroke-width:4px!important;}#mermaid-4 .orange span{fill:#f96!important;stroke:#333!important;stroke-width:4px!important;}\u003C/style>\u003Cg>\u003Cmarker orient=\"auto\" markerHeight=\"8\" markerWidth=\"8\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"5\" viewBox=\"0 0 10 10\" class=\"marker flowchart-v2\" id=\"mermaid-4_flowchart-v2-pointEnd\">\u003Cpath style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 0 0 L 10 5 L 0 10 z\">\u003C/path>\u003C/marker>\u003Cmarker orient=\"auto\" markerHeight=\"8\" markerWidth=\"8\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"4.5\" viewBox=\"0 0 10 10\" class=\"marker flowchart-v2\" id=\"mermaid-4_flowchart-v2-pointStart\">\u003Cpath style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 0 5 L 10 10 L 10 0 z\">\u003C/path>\u003C/marker>\u003Cmarker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"11\" viewBox=\"0 0 10 10\" class=\"marker flowchart-v2\" id=\"mermaid-4_flowchart-v2-circleEnd\">\u003Ccircle style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" r=\"5\" cy=\"5\" cx=\"5\">\u003C/circle>\u003C/marker>\u003Cmarker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"-1\" viewBox=\"0 0 10 10\" class=\"marker flowchart-v2\" id=\"mermaid-4_flowchart-v2-circleStart\">\u003Ccircle style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" r=\"5\" cy=\"5\" cx=\"5\">\u003C/circle>\u003C/marker>\u003Cmarker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5.2\" refX=\"12\" viewBox=\"0 0 11 11\" class=\"marker cross flowchart-v2\" id=\"mermaid-4_flowchart-v2-crossEnd\">\u003Cpath style=\"stroke-width: 2; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 1,1 l 9,9 M 10,1 l -9,9\">\u003C/path>\u003C/marker>\u003Cmarker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5.2\" refX=\"-1\" viewBox=\"0 0 11 11\" class=\"marker cross flowchart-v2\" id=\"mermaid-4_flowchart-v2-crossStart\">\u003Cpath style=\"stroke-width: 2; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 1,1 l 9,9 M 10,1 l -9,9\">\u003C/path>\u003C/marker>\u003Cg class=\"root\">\u003Cg class=\"clusters\">\u003C/g>\u003Cg class=\"edgePaths\">\u003Cpath marker-end=\"url(#mermaid-4_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_sq_ci_0\" d=\"M1019.117,255.375L1019.117,291.771C1019.117,328.167,1019.117,400.958,1019.117,445.87C1019.117,490.781,1019.117,507.813,1019.117,516.328L1019.117,524.844\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-4_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_e_od3_0\" d=\"M1310.282,327.289L1299.893,351.7C1289.504,376.11,1268.727,424.93,1258.416,459.35C1248.105,493.771,1248.262,513.792,1248.34,523.802L1248.418,533.813\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-4_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_e_f_0\" d=\"M1394.476,327.289L1404.865,351.7C1415.254,376.11,1436.031,424.93,1446.499,462.1C1456.967,499.271,1457.125,524.792,1457.205,537.552L1457.284,550.313\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-4_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_cyr_cyr2_0\" d=\"M1648.609,255.375L1648.609,291.771C1648.609,328.167,1648.609,400.958,1648.609,440.854C1648.609,480.75,1648.609,487.75,1648.609,491.25L1648.609,494.75\">\u003C/path>\u003C/g>\u003Cg class=\"edgeLabels\">\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003C/g>\u003Cg class=\"nodes\">\u003Cg transform=\"translate(0, 0)\" class=\"root\">\u003Cg class=\"clusters\">\u003Cg data-look=\"classic\" id=\"A\" class=\"cluster\">\u003Crect height=\"440.75\" width=\"881.296875\" y=\"8\" x=\"8\" style=\"\">\u003C/rect>\u003Cg transform=\"translate(443.3125, 8)\" class=\"cluster-label\">\u003CforeignObject height=\"24\" width=\"10.671875\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>A\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003C/g>\u003Cg class=\"edgePaths\">\u003Cpath marker-end=\"url(#mermaid-4_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_od_ro_0\" d=\"M236.516,66.75L273.93,66.667C311.344,66.583,386.172,66.417,445.922,68.268C505.672,70.119,550.343,73.988,572.679,75.922L595.015,77.857\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-4_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-normal edge-pattern-dotted edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_di_ro_0\" d=\"M291.632,242.882L319.86,234.485C348.088,226.088,404.544,209.294,464.857,188.348C525.17,167.402,589.34,142.305,621.426,129.756L653.511,117.207\">\u003C/path>\u003Cpath marker-end=\"url(#mermaid-4_flowchart-v2-pointEnd)\" style=\"\" class=\"edge-thickness-thick edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link\" id=\"L_di_ro2_0\" d=\"M300.089,298.161L326.908,303.592C353.726,309.024,407.363,319.887,461.26,325.4C515.156,330.913,569.313,331.075,596.391,331.157L623.469,331.238\">\u003C/path>\u003C/g>\u003Cg class=\"edgeLabels\">\u003Cg transform=\"translate(461, 66.25)\" class=\"edgeLabel\">\u003Cg transform=\"translate(-100, -24)\" class=\"label\">\u003CforeignObject height=\"48\" width=\"200\">\u003Cdiv style=\"display: table; white-space: break-spaces; line-height: 1.5; max-width: 200px; text-align: center; width: 200px;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003Cp>Two line&#x3C;br/>edge comment\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg class=\"edgeLabel\">\u003Cg transform=\"translate(0, 0)\" class=\"label\">\u003CforeignObject height=\"0\" width=\"0\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" class=\"labelBkg\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"edgeLabel\">\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003C/g>\u003Cg class=\"nodes\">\u003Cg transform=\"translate(184.5, 66.25)\" id=\"flowchart-od-2\" class=\"node default\">\u003Cg transform=\"translate(4.875,0)\" class=\"basic label-container\">\u003Cpath style=\"\" fill=\"#ECECFF\" stroke-width=\"0\" stroke=\"none\" d=\"M-56.390625 -19.5 C-54.03786582417479 -14.794481648349576, -51.685106648349574 -10.088963296699152, -46.640625 0 C-49.6375426279177 5.9938352558354016, -52.6344602558354 11.987670511670803, -56.390625 19.5 C-32.54219501169827 19.5, -8.693765023396544 19.5, 46.640625 19.5 C46.640625 11.63069874264626, 46.640625 3.7613974852925214, 46.640625 -19.5 C8.154131158988058 -19.5, -30.332362682023884 -19.5, -56.390625 -19.5\">\u003C/path>\u003Cpath style=\"\" stroke-dasharray=\"0 0\" fill=\"none\" stroke-width=\"1.3\" stroke=\"#9370DB\" d=\"M-56.390625 -19.5 C-54.129195780457806 -14.977141560915616, -51.86776656091562 -10.454283121831233, -46.640625 0 M-56.390625 -19.5 C-53.46374377947987 -13.646237558959747, -50.53686255895975 -7.792475117919494, -46.640625 0 M-46.640625 0 C-49.21918154831421 5.157113096628415, -51.797738096628414 10.31422619325683, -56.390625 19.5 M-46.640625 0 C-49.16272053615844 5.044191072316882, -51.684816072316885 10.088382144633764, -56.390625 19.5 M-56.390625 19.5 C-16.815741162616774 19.5, 22.75914267476645 19.5, 46.640625 19.5 M-56.390625 19.5 C-25.015775846963436 19.5, 6.359073306073128 19.5, 46.640625 19.5 M46.640625 19.5 C46.640625 5.515826002031812, 46.640625 -8.468347995936377, 46.640625 -19.5 M46.640625 19.5 C46.640625 6.414709692303322, 46.640625 -6.670580615393355, 46.640625 -19.5 M46.640625 -19.5 C11.770958724921428 -19.5, -23.098707550157144 -19.5, -56.390625 -19.5 M46.640625 -19.5 C20.031912583472725 -19.5, -6.576799833054551 -19.5, -56.390625 -19.5\">\u003C/path>\u003C/g>\u003Cg transform=\"translate(-34.265625, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"78.28125\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>Odd shape\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(725.1484375, 88.25)\" id=\"flowchart-ro-3\" class=\"node default\">\u003Cg class=\"basic label-container outer-path\">\u003Cpath style=\"\" fill=\"#ECECFF\" stroke-width=\"0\" stroke=\"none\" d=\"M-121.6484375 -27 C-27.370832408958748 -27, 66.9067726820825 -27, 121.6484375 -27 C121.6484375 -27, 121.6484375 -27, 121.6484375 -27 C121.78793543197851 -26.994230322854914, 121.92743336395702 -26.988460645709832, 122.06133422736166 -26.982922465033347 C122.20575385341209 -26.964920577419722, 122.35017347946253 -26.9469186898061, 122.47141045140367 -26.931806517013612 C122.59261993756637 -26.906391560380353, 122.71382942372905 -26.880976603747097, 122.875864935704 -26.847001329696653 C123.02121062435408 -26.803730043376763, 123.16655631300416 -26.76045875705687, 123.27193484602341 -26.729086208503173 C123.40401425127668 -26.677548664646544, 123.53609365652993 -26.62601112078991, 123.65691462326485 -26.578866633275286 C123.73271824833076 -26.541808499097343, 123.80852187339664 -26.504750364919403, 124.02817446518537 -26.397368756032446 C124.14867222243284 -26.325567677566955, 124.26916997968029 -26.253766599101464, 124.38317829061214 -26.185832391312644 C124.47421617287647 -26.120832592720433, 124.56525405514078 -26.05583279412822, 124.71950106344833 -25.94570254698197 C124.84506452382469 -25.83935572082444, 124.97062798420106 -25.733008894666913, 125.0348453581287 -25.678619553365657 C125.09996081310337 -25.613504098391, 125.16507626807802 -25.548388643416345, 125.32705705336566 -25.386407858128706 C125.38604730533277 -25.316758199242866, 125.44503755729988 -25.247108540357022, 125.59414004698196 -25.07106356344834 C125.66538908104664 -24.971273082322078, 125.73663811511132 -24.87148260119582, 125.83426989131264 -24.734740790612136 C125.88570895129712 -24.64841490950402, 125.9371480112816 -24.5620890283959, 126.04580625603245 -24.37973696518537 C126.09485323450946 -24.27940976713394, 126.14390021298648 -24.17908256908251, 126.22730413327528 -24.008477123264846 C126.28157464257438 -23.869393727848152, 126.3358451518735 -23.730310332431458, 126.37752370850318 -23.623497346023417 C126.41985113316238 -23.481322032805398, 126.46217855782159 -23.33914671958738, 126.49543882969665 -23.227427435703994 C126.52688222912931 -23.077466987475123, 126.55832562856197 -22.92750653924625, 126.58024401701361 -22.82297295140367 C126.59466731325503 -22.707262471796884, 126.60909060949645 -22.591551992190094, 126.63135996503335 -22.412896727361662 C126.63482309449314 -22.3291659768072, 126.63828622395293 -22.245435226252734, 126.6484375 -22 C126.6484375 -22, 126.6484375 -22, 126.6484375 -22 C126.6484375 -11.551649345286314, 126.6484375 -1.103298690572629, 126.6484375 22 C126.6484375 22, 126.6484375 22, 126.6484375 22 C126.6416949821269 22.163019052188897, 126.63495246425377 22.32603810437779, 126.63135996503335 22.412896727361662 C126.61824865854642 22.518081806866427, 126.60513735205949 22.62326688637119, 126.58024401701361 22.82297295140367 C126.55108214585815 22.96205229233284, 126.52192027470268 23.101131633262007, 126.49543882969665 23.227427435703994 C126.45326954678016 23.369071560171804, 126.41110026386369 23.510715684639617, 126.37752370850318 23.623497346023417 C126.34362649404899 23.710368461521366, 126.30972927959482 23.79723957701932, 126.22730413327528 24.008477123264846 C126.1737288022525 24.11806721450181, 126.12015347122971 24.227657305738774, 126.04580625603245 24.379736965185366 C125.99779240584043 24.460314602577473, 125.9497785556484 24.540892239969583, 125.83426989131264 24.734740790612133 C125.78540193414872 24.803184623164572, 125.73653397698479 24.871628455717012, 125.59414004698196 25.07106356344834 C125.53189992555397 25.144550335955934, 125.469659804126 25.218037108463527, 125.32705705336566 25.386407858128706 C125.25599964123975 25.45746527025461, 125.18494222911386 25.528522682380512, 125.0348453581287 25.678619553365657 C124.91638042948273 25.778954229828987, 124.79791550083674 25.879288906292317, 124.71950106344833 25.94570254698197 C124.60682023983945 26.02615510868059, 124.49413941623055 26.10660767037921, 124.38317829061214 26.185832391312644 C124.2703190818657 26.253081882820734, 124.15745987311925 26.32033137432882, 124.02817446518537 26.397368756032446 C123.94581635243524 26.437631183987353, 123.86345823968512 26.477893611942257, 123.65691462326485 26.578866633275286 C123.52115273463097 26.631841086605924, 123.38539084599711 26.684815539936565, 123.27193484602341 26.729086208503173 C123.11920468812507 26.77455594657027, 122.96647453022673 26.82002568463737, 122.875864935704 26.847001329696653 C122.72002130361409 26.879678303063393, 122.56417767152416 26.912355276430134, 122.47141045140367 26.931806517013612 C122.30894820187805 26.952057415298, 122.14648595235244 26.97230831358239, 122.06133422736166 26.982922465033347 C121.944277008746 26.987763987408158, 121.82721979013034 26.992605509782972, 121.6484375 27 C121.6484375 27, 121.6484375 27, 121.6484375 27 C54.10625204486965 27, -13.435933410260702 27, -121.6484375 27 C-121.6484375 27, -121.6484375 27, -121.6484375 27 C-121.80568572358025 26.993496165363684, -121.96293394716051 26.98699233072737, -122.06133422736166 26.982922465033347 C-122.16161178057612 26.97042288106056, -122.26188933379059 26.95792329708777, -122.47141045140367 26.931806517013612 C-122.60928471707693 26.902897323567938, -122.7471589827502 26.87398813012226, -122.875864935704 26.847001329696653 C-123.02311599469014 26.803162790050415, -123.17036705367627 26.75932425040418, -123.27193484602341 26.729086208503173 C-123.39854881939152 26.679681282785882, -123.52516279275963 26.630276357068592, -123.65691462326485 26.578866633275286 C-123.79420003685361 26.511751884171613, -123.93148545044237 26.44463713506794, -124.02817446518537 26.397368756032446 C-124.15518921297134 26.321684394095936, -124.28220396075729 26.24600003215943, -124.38317829061214 26.185832391312644 C-124.49913510600403 26.103040816438536, -124.61509192139592 26.020249241564425, -124.71950106344833 25.94570254698197 C-124.82274378205518 25.858260424769, -124.92598650066203 25.77081830255603, -125.0348453581287 25.67861955336566 C-125.11258734665853 25.60087756483584, -125.19032933518835 25.52313557630602, -125.32705705336566 25.386407858128706 C-125.39147351881388 25.310351481092017, -125.45588998426209 25.234295104055324, -125.59414004698196 25.07106356344834 C-125.68736242919117 24.940497493402408, -125.78058481140039 24.809931423356474, -125.83426989131264 24.734740790612133 C-125.90599432001886 24.614371668258237, -125.97771874872508 24.494002545904337, -126.04580625603245 24.37973696518537 C-126.09651627339225 24.276007966726617, -126.14722629075206 24.172278968267864, -126.22730413327528 24.00847712326485 C-126.26387351774616 23.914757822926667, -126.30044290221706 23.82103852258848, -126.37752370850318 23.623497346023417 C-126.4057690126381 23.528623041842295, -126.43401431677302 23.433748737661176, -126.49543882969665 23.227427435703994 C-126.52848945388564 23.069801781129378, -126.56154007807461 22.912176126554765, -126.58024401701361 22.82297295140367 C-126.59427381975834 22.710419262066058, -126.60830362250307 22.59786557272844, -126.63135996503335 22.412896727361662 C-126.63617100520057 22.296576500576705, -126.64098204536778 22.18025627379175, -126.6484375 22 C-126.6484375 22, -126.6484375 22, -126.6484375 22 C-126.6484375 12.324925479012824, -126.6484375 2.649850958025649, -126.6484375 -22 C-126.6484375 -22, -126.6484375 -22, -126.6484375 -22 C-126.64214555604063 -22.152125179344694, -126.63585361208126 -22.304250358689387, -126.63135996503335 -22.41289672736166 C-126.61319434633384 -22.55862988134342, -126.59502872763431 -22.704363035325184, -126.58024401701361 -22.82297295140367 C-126.54655885907752 -22.983624836183967, -126.51287370114143 -23.144276720964264, -126.49543882969665 -23.227427435703994 C-126.4644202642885 -23.331616960296728, -126.43340169888036 -23.435806484889465, -126.37752370850318 -23.623497346023417 C-126.3463444331774 -23.70340298050051, -126.31516515785164 -23.783308614977607, -126.22730413327528 -24.008477123264846 C-126.16148649475714 -24.14310925474224, -126.09566885623902 -24.27774138621963, -126.04580625603245 -24.379736965185366 C-125.98199167091612 -24.486831657222485, -125.91817708579978 -24.593926349259608, -125.83426989131264 -24.734740790612133 C-125.74371244381783 -24.86157438735776, -125.653154996323 -24.988407984103386, -125.59414004698196 -25.07106356344834 C-125.53522066275042 -25.140629548956905, -125.47630127851889 -25.210195534465473, -125.32705705336566 -25.386407858128706 C-125.2530558821497 -25.460409029344667, -125.17905471093374 -25.53441020056063, -125.0348453581287 -25.678619553365657 C-124.93489912260324 -25.763269696828303, -124.83495288707779 -25.847919840290945, -124.71950106344833 -25.945702546981966 C-124.61777918401354 -26.018330572933678, -124.51605730457877 -26.09095859888539, -124.38317829061214 -26.185832391312644 C-124.29860580371164 -26.236226655128643, -124.21403331681113 -26.286620918944646, -124.02817446518537 -26.397368756032446 C-123.92182757580647 -26.44935858227867, -123.81548068642758 -26.501348408524898, -123.65691462326485 -26.578866633275286 C-123.54686709007618 -26.621807313975278, -123.43681955688751 -26.664747994675274, -123.27193484602341 -26.729086208503173 C-123.15595339024327 -26.76361538392951, -123.03997193446311 -26.798144559355848, -122.875864935704 -26.847001329696653 C-122.74863853960981 -26.873677899672366, -122.62141214351563 -26.900354469648082, -122.47141045140367 -26.931806517013612 C-122.35951783035242 -26.945753917682378, -122.24762520930116 -26.95970131835114, -122.06133422736167 -26.982922465033347 C-121.90423170167426 -26.98942027356024, -121.74712917598686 -26.99591808208713, -121.6484375 -27 C-121.6484375 -27, -121.6484375 -27, -121.6484375 -27\">\u003C/path>\u003Cpath style=\"\" stroke-dasharray=\"0 0\" fill=\"none\" stroke-width=\"1.3\" stroke=\"#9370DB\" d=\"M-121.6484375 -27 C-35.828914049315784 -27, 49.99060940136843 -27, 121.6484375 -27 M-121.6484375 -27 C-61.9312935593657 -27, -2.2141496187313976 -27, 121.6484375 -27 M121.6484375 -27 C121.6484375 -27, 121.6484375 -27, 121.6484375 -27 M121.6484375 -27 C121.6484375 -27, 121.6484375 -27, 121.6484375 -27 M121.6484375 -27 C121.78182968424842 -26.994482858449043, 121.91522186849683 -26.98896571689809, 122.06133422736166 -26.982922465033347 M121.6484375 -27 C121.76986329800164 -26.994977791845248, 121.89128909600326 -26.989955583690495, 122.06133422736166 -26.982922465033347 M122.06133422736166 -26.982922465033347 C122.20810122037587 -26.96462797843283, 122.35486821339006 -26.946333491832316, 122.47141045140367 -26.931806517013612 M122.06133422736166 -26.982922465033347 C122.17706982074142 -26.968496038363394, 122.29280541412119 -26.95406961169344, 122.47141045140367 -26.931806517013612 M122.47141045140367 -26.931806517013612 C122.58067111899177 -26.90889696416933, 122.68993178657988 -26.885987411325047, 122.875864935704 -26.847001329696653 M122.47141045140367 -26.931806517013612 C122.56146987323471 -26.91292304202569, 122.65152929506576 -26.894039567037765, 122.875864935704 -26.847001329696653 M122.875864935704 -26.847001329696653 C122.95972045271675 -26.822036460632688, 123.04357596972949 -26.797071591568727, 123.27193484602341 -26.729086208503173 M122.875864935704 -26.847001329696653 C122.97967084568427 -26.816096971306862, 123.08347675566453 -26.785192612917076, 123.27193484602341 -26.729086208503173 M123.27193484602341 -26.729086208503173 C123.39188378147223 -26.68228198865227, 123.51183271692106 -26.63547776880137, 123.65691462326485 -26.578866633275286 M123.27193484602341 -26.729086208503173 C123.3999821292135 -26.67912200355784, 123.52802941240358 -26.62915779861251, 123.65691462326485 -26.578866633275286 M123.65691462326485 -26.578866633275286 C123.76713465279559 -26.524983344185927, 123.87735468232634 -26.471100055096567, 124.02817446518537 -26.397368756032446 M123.65691462326485 -26.578866633275286 C123.80437000008939 -26.50678009209902, 123.95182537691394 -26.434693550922752, 124.02817446518537 -26.397368756032446 M124.02817446518537 -26.397368756032446 C124.11971801906367 -26.34282063791663, 124.21126157294195 -26.288272519800817, 124.38317829061214 -26.185832391312644 M124.02817446518537 -26.397368756032446 C124.160183029297 -26.318708725452534, 124.29219159340863 -26.240048694872623, 124.38317829061214 -26.185832391312644 M124.38317829061214 -26.185832391312644 C124.47413955477747 -26.12088729699166, 124.56510081894278 -26.055942202670682, 124.71950106344833 -25.94570254698197 M124.38317829061214 -26.185832391312644 C124.4525461684623 -26.136304678487132, 124.52191404631247 -26.08677696566162, 124.71950106344833 -25.94570254698197 M124.71950106344833 -25.94570254698197 C124.78420970577619 -25.890897122570255, 124.84891834810405 -25.83609169815854, 125.0348453581287 -25.678619553365657 M124.71950106344833 -25.94570254698197 C124.8318413574634 -25.850555171445354, 124.94418165147849 -25.755407795908738, 125.0348453581287 -25.678619553365657 M125.0348453581287 -25.678619553365657 C125.09354227987545 -25.619922631618913, 125.1522392016222 -25.56122570987217, 125.32705705336566 -25.386407858128706 M125.0348453581287 -25.678619553365657 C125.10252582511467 -25.6109390863797, 125.17020629210062 -25.54325861939375, 125.32705705336566 -25.386407858128706 M125.32705705336566 -25.386407858128706 C125.40241730055416 -25.29743018240766, 125.47777754774268 -25.208452506686616, 125.59414004698196 -25.07106356344834 M125.32705705336566 -25.386407858128706 C125.40558931063313 -25.293684997184418, 125.48412156790062 -25.200962136240133, 125.59414004698196 -25.07106356344834 M125.59414004698196 -25.07106356344834 C125.68077393275483 -24.94972525680877, 125.76740781852772 -24.8283869501692, 125.83426989131264 -24.734740790612136 M125.59414004698196 -25.07106356344834 C125.68904071512657 -24.93814690769752, 125.78394138327116 -24.805230251946696, 125.83426989131264 -24.734740790612136 M125.83426989131264 -24.734740790612136 C125.88679359216165 -24.646594647268564, 125.93931729301066 -24.558448503924996, 126.04580625603245 -24.37973696518537 M125.83426989131264 -24.734740790612136 C125.87886975817155 -24.65989255650635, 125.92346962503045 -24.585044322400567, 126.04580625603245 -24.37973696518537 M126.04580625603245 -24.37973696518537 C126.11146466184337 -24.245430549416657, 126.17712306765428 -24.111124133647944, 126.22730413327528 -24.008477123264846 M126.04580625603245 -24.37973696518537 C126.1062897705635 -24.256015958721168, 126.16677328509458 -24.132294952256967, 126.22730413327528 -24.008477123264846 M126.22730413327528 -24.008477123264846 C126.26921933247651 -23.901057673921837, 126.31113453167775 -23.793638224578828, 126.37752370850318 -23.623497346023417 M126.22730413327528 -24.008477123264846 C126.2848066732255 -23.861110743169135, 126.34230921317571 -23.713744363073424, 126.37752370850318 -23.623497346023417 M126.37752370850318 -23.623497346023417 C126.4194160357841 -23.48278349913688, 126.46130836306502 -23.34206965225034, 126.49543882969665 -23.227427435703994 M126.37752370850318 -23.623497346023417 C126.4125934198506 -23.50570026208954, 126.44766313119801 -23.387903178155664, 126.49543882969665 -23.227427435703994 M126.49543882969665 -23.227427435703994 C126.51848106772316 -23.117533963465032, 126.54152330574966 -23.00764049122607, 126.58024401701361 -22.82297295140367 M126.49543882969665 -23.227427435703994 C126.516458458482 -23.127180229259068, 126.53747808726736 -23.026933022814138, 126.58024401701361 -22.82297295140367 M126.58024401701361 -22.82297295140367 C126.5910549062466 -22.736242903210325, 126.6018657954796 -22.649512855016983, 126.63135996503335 -22.412896727361662 M126.58024401701361 -22.82297295140367 C126.59853818709176 -22.67620849768112, 126.6168323571699 -22.52944404395857, 126.63135996503335 -22.412896727361662 M126.63135996503335 -22.412896727361662 C126.63749796641704 -22.264493536338133, 126.64363596780073 -22.116090345314603, 126.6484375 -22 M126.63135996503335 -22.412896727361662 C126.63773852749505 -22.258677305715093, 126.64411708995674 -22.104457884068527, 126.6484375 -22 M126.6484375 -22 C126.6484375 -22, 126.6484375 -22, 126.6484375 -22 M126.6484375 -22 C126.6484375 -22, 126.6484375 -22, 126.6484375 -22 M126.6484375 -22 C126.6484375 -9.202283375961258, 126.6484375 3.5954332480774838, 126.6484375 22 M126.6484375 -22 C126.6484375 -7.762032883471264, 126.6484375 6.4759342330574725, 126.6484375 22 M126.6484375 22 C126.6484375 22, 126.6484375 22, 126.6484375 22 M126.6484375 22 C126.6484375 22, 126.6484375 22, 126.6484375 22 M126.6484375 22 C126.64187585809682 22.1586458744328, 126.63531421619365 22.317291748865603, 126.63135996503335 22.412896727361662 M126.6484375 22 C126.64243191623736 22.145201628123548, 126.6364263324747 22.290403256247092, 126.63135996503335 22.412896727361662 M126.63135996503335 22.412896727361662 C126.61944409497688 22.508491452456894, 126.60752822492043 22.60408617755213, 126.58024401701361 22.82297295140367 M126.63135996503335 22.412896727361662 C126.61297272752337 22.56040781188162, 126.59458549001339 22.70791889640158, 126.58024401701361 22.82297295140367 M126.58024401701361 22.82297295140367 C126.55498112608419 22.943457202969668, 126.52971823515475 23.063941454535666, 126.49543882969665 23.227427435703994 M126.58024401701361 22.82297295140367 C126.55440907043457 22.946185461465102, 126.52857412385553 23.069397971526538, 126.49543882969665 23.227427435703994 M126.49543882969665 23.227427435703994 C126.45374168908165 23.36748566213675, 126.41204454846664 23.507543888569504, 126.37752370850318 23.623497346023417 M126.49543882969665 23.227427435703994 C126.44852503063228 23.385008108989155, 126.40161123156791 23.542588782274315, 126.37752370850318 23.623497346023417 M126.37752370850318 23.623497346023417 C126.32670026294235 23.753746674188303, 126.27587681738153 23.883996002353193, 126.22730413327528 24.008477123264846 M126.37752370850318 23.623497346023417 C126.32087644270143 23.768671846328107, 126.26422917689969 23.9138463466328, 126.22730413327528 24.008477123264846 M126.22730413327528 24.008477123264846 C126.18745070009498 24.08999862383155, 126.14759726691469 24.17152012439826, 126.04580625603245 24.379736965185366 M126.22730413327528 24.008477123264846 C126.17938341407479 24.106500521143417, 126.13146269487432 24.204523919021987, 126.04580625603245 24.379736965185366 M126.04580625603245 24.379736965185366 C125.99764875503398 24.46055567973639, 125.94949125403551 24.541374394287413, 125.83426989131264 24.734740790612133 M126.04580625603245 24.379736965185366 C125.98249287290253 24.485990531760578, 125.9191794897726 24.592244098335787, 125.83426989131264 24.734740790612133 M125.83426989131264 24.734740790612133 C125.77705800563363 24.814871022172408, 125.71984611995464 24.895001253732683, 125.59414004698196 25.07106356344834 M125.83426989131264 24.734740790612133 C125.76209543672907 24.83582740381987, 125.6899209821455 24.936914017027608, 125.59414004698196 25.07106356344834 M125.59414004698196 25.07106356344834 C125.51703942358914 25.16209609747091, 125.43993880019632 25.253128631493485, 125.32705705336566 25.386407858128706 M125.59414004698196 25.07106356344834 C125.52710783990135 25.150208340794492, 125.46007563282073 25.229353118140644, 125.32705705336566 25.386407858128706 M125.32705705336566 25.386407858128706 C125.25592378700945 25.45754112448492, 125.18479052065324 25.528674390841132, 125.0348453581287 25.678619553365657 M125.32705705336566 25.386407858128706 C125.21809892182075 25.495365989673612, 125.10914079027584 25.604324121218514, 125.0348453581287 25.678619553365657 M125.0348453581287 25.678619553365657 C124.95638161915834 25.74507495036524, 124.87791788018795 25.811530347364823, 124.71950106344833 25.94570254698197 M125.0348453581287 25.678619553365657 C124.95360730642938 25.74742467338664, 124.87236925473005 25.81622979340762, 124.71950106344833 25.94570254698197 M124.71950106344833 25.94570254698197 C124.61831022659936 26.017951415815094, 124.51711938975038 26.090200284648223, 124.38317829061214 26.185832391312644 M124.71950106344833 25.94570254698197 C124.62685009157143 26.011854069420572, 124.53419911969452 26.078005591859178, 124.38317829061214 26.185832391312644 M124.38317829061214 26.185832391312644 C124.2504611001566 26.26491467154171, 124.11774390970106 26.34399695177078, 124.02817446518537 26.397368756032446 M124.38317829061214 26.185832391312644 C124.29017878583728 26.241248067854055, 124.19717928106245 26.296663744395467, 124.02817446518537 26.397368756032446 M124.02817446518537 26.397368756032446 C123.94928988088388 26.43593307940187, 123.87040529658239 26.4744974027713, 123.65691462326485 26.578866633275286 M124.02817446518537 26.397368756032446 C123.95097120077996 26.435111132189572, 123.87376793637455 26.4728535083467, 123.65691462326485 26.578866633275286 M123.65691462326485 26.578866633275286 C123.53534679450107 26.626302547257904, 123.41377896573728 26.67373846124052, 123.27193484602341 26.729086208503173 M123.65691462326485 26.578866633275286 C123.54516712127428 26.622470643860172, 123.43341961928368 26.666074654445058, 123.27193484602341 26.729086208503173 M123.27193484602341 26.729086208503173 C123.15662345500249 26.763415897007548, 123.04131206398156 26.797745585511922, 122.875864935704 26.847001329696653 M123.27193484602341 26.729086208503173 C123.1737211767604 26.75832568469733, 123.07550750749736 26.787565160891482, 122.875864935704 26.847001329696653 M122.875864935704 26.847001329696653 C122.72731463332983 26.878149052636665, 122.57876433095565 26.90929677557668, 122.47141045140367 26.931806517013612 M122.875864935704 26.847001329696653 C122.73950352658682 26.875593310480333, 122.60314211746962 26.90418529126401, 122.47141045140367 26.931806517013612 M122.47141045140367 26.931806517013612 C122.33836954861515 26.948390048251795, 122.20532864582663 26.96497357948998, 122.06133422736166 26.982922465033347 M122.47141045140367 26.931806517013612 C122.32100723795641 26.950554258018425, 122.17060402450913 26.96930199902324, 122.06133422736166 26.982922465033347 M122.06133422736166 26.982922465033347 C121.94970602695248 26.98753944155417, 121.8380778265433 26.992156418074988, 121.6484375 27 M122.06133422736166 26.982922465033347 C121.9622341827724 26.98702127319655, 121.86313413818316 26.991120081359753, 121.6484375 27 M121.6484375 27 C121.6484375 27, 121.6484375 27, 121.6484375 27 M121.6484375 27 C121.6484375 27, 121.6484375 27, 121.6484375 27 M121.6484375 27 C41.048134051780835 27, -39.55216939643833 27, -121.6484375 27 M121.6484375 27 C41.29135329628082 27, -39.065730907438365 27, -121.6484375 27 M-121.6484375 27 C-121.6484375 27, -121.6484375 27, -121.6484375 27 M-121.6484375 27 C-121.6484375 27, -121.6484375 27, -121.6484375 27 M-121.6484375 27 C-121.77664293348998 26.994697384047264, -121.90484836697995 26.98939476809453, -122.06133422736166 26.982922465033347 M-121.6484375 27 C-121.77062616357158 26.99494623949188, -121.89281482714314 26.989892478983762, -122.06133422736166 26.982922465033347 M-122.06133422736166 26.982922465033347 C-122.20430287548268 26.965101441630008, -122.34727152360371 26.94728041822667, -122.47141045140367 26.931806517013612 M-122.06133422736166 26.982922465033347 C-122.18519589464489 26.967483124307662, -122.30905756192811 26.952043783581974, -122.47141045140367 26.931806517013612 M-122.47141045140367 26.931806517013612 C-122.56211104461052 26.912788602525726, -122.65281163781736 26.89377068803784, -122.875864935704 26.847001329696653 M-122.47141045140367 26.931806517013612 C-122.58451882428554 26.90809018520941, -122.69762719716742 26.88437385340521, -122.875864935704 26.847001329696653 M-122.875864935704 26.847001329696653 C-122.9945636554695 26.811663189731984, -123.11326237523502 26.776325049767316, -123.27193484602341 26.729086208503173 M-122.875864935704 26.847001329696653 C-122.98195217615785 26.815417789798083, -123.08803941661168 26.78383424989951, -123.27193484602341 26.729086208503173 M-123.27193484602341 26.729086208503173 C-123.37653654693949 26.68827049814997, -123.48113824785557 26.647454787796764, -123.65691462326485 26.578866633275286 M-123.27193484602341 26.729086208503173 C-123.38702071674608 26.684179562396807, -123.50210658746873 26.639272916290437, -123.65691462326485 26.578866633275286 M-123.65691462326485 26.578866633275286 C-123.76914912862996 26.523998526959797, -123.88138363399507 26.46913042064431, -124.02817446518537 26.397368756032446 M-123.65691462326485 26.578866633275286 C-123.795804250807 26.510967631757786, -123.93469387834914 26.44306863024029, -124.02817446518537 26.397368756032446 M-124.02817446518537 26.397368756032446 C-124.1412581964025 26.329985478170958, -124.25434192761963 26.26260220030947, -124.38317829061214 26.185832391312644 M-124.02817446518537 26.397368756032446 C-124.14793740523616 26.326005533576897, -124.26770034528697 26.254642311121348, -124.38317829061214 26.185832391312644 M-124.38317829061214 26.185832391312644 C-124.48895874235468 26.11030660043039, -124.59473919409723 26.03478080954814, -124.71950106344833 25.94570254698197 M-124.38317829061214 26.185832391312644 C-124.47898178836603 26.117430008661078, -124.57478528611993 26.04902762600951, -124.71950106344833 25.94570254698197 M-124.71950106344833 25.94570254698197 C-124.81013732311638 25.868937550846997, -124.90077358278441 25.79217255471202, -125.0348453581287 25.67861955336566 M-124.71950106344833 25.94570254698197 C-124.8401273645732 25.843537281407883, -124.96075366569808 25.741372015833797, -125.0348453581287 25.67861955336566 M-125.0348453581287 25.67861955336566 C-125.0938606257595 25.619604285734866, -125.1528758933903 25.560589018104068, -125.32705705336566 25.386407858128706 M-125.0348453581287 25.67861955336566 C-125.10843252562283 25.605032385871535, -125.18201969311696 25.53144521837741, -125.32705705336566 25.386407858128706 M-125.32705705336566 25.386407858128706 C-125.38575461625983 25.31710377657828, -125.444452179154 25.247799695027847, -125.59414004698196 25.07106356344834 M-125.32705705336566 25.386407858128706 C-125.42882840052408 25.266246655598355, -125.53059974768249 25.146085453068004, -125.59414004698196 25.07106356344834 M-125.59414004698196 25.07106356344834 C-125.68636039492183 24.94190092971779, -125.7785807428617 24.81273829598724, -125.83426989131264 24.734740790612133 M-125.59414004698196 25.07106356344834 C-125.64243431146134 25.00342323749442, -125.69072857594074 24.935782911540496, -125.83426989131264 24.734740790612133 M-125.83426989131264 24.734740790612133 C-125.9090044762022 24.609319974372724, -125.98373906109177 24.48389915813332, -126.04580625603245 24.37973696518537 M-125.83426989131264 24.734740790612133 C-125.91808020146203 24.594088942157402, -126.0018905116114 24.453437093702675, -126.04580625603245 24.37973696518537 M-126.04580625603245 24.37973696518537 C-126.09627164831382 24.276508355322516, -126.14673704059518 24.173279745459663, -126.22730413327528 24.00847712326485 M-126.04580625603245 24.37973696518537 C-126.11295483296665 24.24238235566327, -126.18010340990085 24.105027746141175, -126.22730413327528 24.00847712326485 M-126.22730413327528 24.00847712326485 C-126.28573466499826 23.858732504078656, -126.34416519672125 23.708987884892466, -126.37752370850318 23.623497346023417 M-126.22730413327528 24.00847712326485 C-126.27546411848354 23.885053658983985, -126.3236241036918 23.76163019470312, -126.37752370850318 23.623497346023417 M-126.37752370850318 23.623497346023417 C-126.42146759082893 23.47589244721415, -126.46541147315467 23.32828754840488, -126.49543882969665 23.227427435703994 M-126.37752370850318 23.623497346023417 C-126.4202590814532 23.479951758651243, -126.4629944544032 23.336406171279066, -126.49543882969665 23.227427435703994 M-126.49543882969665 23.227427435703994 C-126.5263498845849 23.080005855025444, -126.55726093947315 22.932584274346894, -126.58024401701361 22.82297295140367 M-126.49543882969665 23.227427435703994 C-126.5169420727001 23.124873767291703, -126.53844531570356 23.02232009887941, -126.58024401701361 22.82297295140367 M-126.58024401701361 22.82297295140367 C-126.5972337788153 22.68667307559356, -126.61422354061698 22.55037319978345, -126.63135996503335 22.412896727361662 M-126.58024401701361 22.82297295140367 C-126.59462752961754 22.707581634885393, -126.60901104222147 22.592190318367113, -126.63135996503335 22.412896727361662 M-126.63135996503335 22.412896727361662 C-126.63672378453313 22.283211528535006, -126.64208760403292 22.15352632970835, -126.6484375 22 M-126.63135996503335 22.412896727361662 C-126.63701272660322 22.27622555337137, -126.64266548817308 22.139554379381075, -126.6484375 22 M-126.6484375 22 C-126.6484375 22, -126.6484375 22, -126.6484375 22 M-126.6484375 22 C-126.6484375 22, -126.6484375 22, -126.6484375 22 M-126.6484375 22 C-126.6484375 8.770216202187553, -126.6484375 -4.459567595624893, -126.6484375 -22 M-126.6484375 22 C-126.6484375 10.863699751533717, -126.6484375 -0.27260049693256505, -126.6484375 -22 M-126.6484375 -22 C-126.6484375 -22, -126.6484375 -22, -126.6484375 -22 M-126.6484375 -22 C-126.6484375 -22, -126.6484375 -22, -126.6484375 -22 M-126.6484375 -22 C-126.64409820088481 -22.10491457972163, -126.63975890176961 -22.20982915944326, -126.63135996503335 -22.41289672736166 M-126.6484375 -22 C-126.64365627554099 -22.11559934942367, -126.638875051082 -22.231198698847336, -126.63135996503335 -22.41289672736166 M-126.63135996503335 -22.41289672736166 C-126.61485526507549 -22.54530520846917, -126.59835056511764 -22.67771368957668, -126.58024401701361 -22.82297295140367 M-126.63135996503335 -22.41289672736166 C-126.61826782141267 -22.51792807332266, -126.60517567779199 -22.622959419283667, -126.58024401701361 -22.82297295140367 M-126.58024401701361 -22.82297295140367 C-126.55140838221537 -22.960496399800817, -126.52257274741713 -23.098019848197968, -126.49543882969665 -23.227427435703994 M-126.58024401701361 -22.82297295140367 C-126.55849914882343 -22.926678983172337, -126.53675428063323 -23.030385014941007, -126.49543882969665 -23.227427435703994 M-126.49543882969665 -23.227427435703994 C-126.46269633790355 -23.337407526949878, -126.42995384611045 -23.447387618195762, -126.37752370850318 -23.623497346023417 M-126.49543882969665 -23.227427435703994 C-126.44925930628895 -23.382541720534956, -126.40307978288125 -23.537656005365918, -126.37752370850318 -23.623497346023417 M-126.37752370850318 -23.623497346023417 C-126.32903528871557 -23.747762515994115, -126.28054686892797 -23.87202768596481, -126.22730413327528 -24.008477123264846 M-126.37752370850318 -23.623497346023417 C-126.31914724695564 -23.773103395225842, -126.26077078540811 -23.92270944442827, -126.22730413327528 -24.008477123264846 M-126.22730413327528 -24.008477123264846 C-126.17052641195035 -24.12461780856608, -126.11374869062541 -24.240758493867308, -126.04580625603245 -24.379736965185366 M-126.22730413327528 -24.008477123264846 C-126.1553006640401 -24.1557625737179, -126.08329719480491 -24.303048024170955, -126.04580625603245 -24.379736965185366 M-126.04580625603245 -24.379736965185366 C-125.97038077281842 -24.506317258418218, -125.89495528960438 -24.632897551651066, -125.83426989131264 -24.734740790612133 M-126.04580625603245 -24.379736965185366 C-126.00039239535411 -24.455951257179844, -125.95497853467579 -24.532165549174326, -125.83426989131264 -24.734740790612133 M-125.83426989131264 -24.734740790612133 C-125.78418701990631 -24.804886216433427, -125.73410414849998 -24.875031642254722, -125.59414004698196 -25.07106356344834 M-125.83426989131264 -24.734740790612133 C-125.76902661538014 -24.82611968410911, -125.70378333944763 -24.917498577606086, -125.59414004698196 -25.07106356344834 M-125.59414004698196 -25.07106356344834 C-125.53196281941018 -25.144476077320235, -125.4697855918384 -25.21788859119213, -125.32705705336566 -25.386407858128706 M-125.59414004698196 -25.07106356344834 C-125.52616797398649 -25.151318038383245, -125.45819590099103 -25.231572513318152, -125.32705705336566 -25.386407858128706 M-125.32705705336566 -25.386407858128706 C-125.2548586113866 -25.458606300107768, -125.18266016940754 -25.53080474208683, -125.0348453581287 -25.678619553365657 M-125.32705705336566 -25.386407858128706 C-125.21887270941659 -25.494592202077776, -125.11068836546752 -25.602776546026845, -125.0348453581287 -25.678619553365657 M-125.0348453581287 -25.678619553365657 C-124.95331861858782 -25.74766917951611, -124.87179187904692 -25.81671880566656, -124.71950106344833 -25.945702546981966 M-125.0348453581287 -25.678619553365657 C-124.93254486886846 -25.765263648029663, -124.83024437960822 -25.851907742693665, -124.71950106344833 -25.945702546981966 M-124.71950106344833 -25.945702546981966 C-124.60579484006972 -26.026887230044245, -124.49208861669112 -26.108071913106528, -124.38317829061214 -26.185832391312644 M-124.71950106344833 -25.945702546981966 C-124.5864556551584 -26.040695142672575, -124.45341024686846 -26.135687738363185, -124.38317829061214 -26.185832391312644 M-124.38317829061214 -26.185832391312644 C-124.29237597765399 -26.239938825710144, -124.20157366469586 -26.294045260107644, -124.02817446518537 -26.397368756032446 M-124.38317829061214 -26.185832391312644 C-124.30069061144349 -26.23498437936385, -124.21820293227483 -26.28413636741506, -124.02817446518537 -26.397368756032446 M-124.02817446518537 -26.397368756032446 C-123.94848267444539 -26.436327698583753, -123.86879088370539 -26.47528664113506, -123.65691462326485 -26.578866633275286 M-124.02817446518537 -26.397368756032446 C-123.89080067179259 -26.46452671138956, -123.7534268783998 -26.531684666746674, -123.65691462326485 -26.578866633275286 M-123.65691462326485 -26.578866633275286 C-123.5232078354103 -26.631039183793437, -123.38950104755575 -26.683211734311588, -123.27193484602341 -26.729086208503173 M-123.65691462326485 -26.578866633275286 C-123.54428534861312 -26.62281471262024, -123.43165607396138 -26.666762791965194, -123.27193484602341 -26.729086208503173 M-123.27193484602341 -26.729086208503173 C-123.16628503596598 -26.76053951973033, -123.06063522590857 -26.79199283095749, -122.875864935704 -26.847001329696653 M-123.27193484602341 -26.729086208503173 C-123.13129175383983 -26.77095747119636, -122.99064866165627 -26.812828733889553, -122.875864935704 -26.847001329696653 M-122.875864935704 -26.847001329696653 C-122.75362083337166 -26.872633222527863, -122.63137673103931 -26.898265115359074, -122.47141045140367 -26.931806517013612 M-122.875864935704 -26.847001329696653 C-122.75389296718251 -26.872576162068157, -122.63192099866102 -26.89815099443966, -122.47141045140367 -26.931806517013612 M-122.47141045140367 -26.931806517013612 C-122.32592178087715 -26.949941660882214, -122.18043311035063 -26.96807680475081, -122.06133422736167 -26.982922465033347 M-122.47141045140367 -26.931806517013612 C-122.32550970398844 -26.949993026212823, -122.1796089565732 -26.968179535412034, -122.06133422736167 -26.982922465033347 M-122.06133422736167 -26.982922465033347 C-121.92948923781614 -26.988375614138036, -121.79764424827061 -26.99382876324273, -121.6484375 -27 M-122.06133422736167 -26.982922465033347 C-121.9736936778127 -26.98654730497573, -121.88605312826374 -26.99017214491811, -121.6484375 -27 M-121.6484375 -27 C-121.6484375 -27, -121.6484375 -27, -121.6484375 -27 M-121.6484375 -27 C-121.6484375 -27, -121.6484375 -27, -121.6484375 -27\">\u003C/path>\u003C/g>\u003Cg transform=\"translate(-111.6484375, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"223.296875\">\u003Cdiv style=\"display: table; white-space: break-spaces; line-height: 1.5; max-width: 200px; text-align: center; width: 200px;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>Rounded&#x3C;br>square&#x3C;br>shape\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(184.5, 274.75)\" id=\"flowchart-di-4\" class=\"node default orange\">\u003Cpolygon style=\"fill:#f96 !important;stroke:#333 !important;stroke-width:4px !important\" transform=\"translate(-138.5, 139)\" class=\"label-container\" points=\"139,0 278,-139 139,-278 0,-139\">\u003C/polygon>\u003Cg transform=\"translate(-100, -24)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"48\" width=\"200\">\u003Cdiv style=\"display: table; white-space: break-spaces; line-height: 1.5; max-width: 200px; text-align: center; width: 200px;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>Diamond with &#x3C;br/> line break\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(725.1484375, 330.75)\" id=\"flowchart-ro2-7\" class=\"node default\">\u003Cg class=\"basic label-container outer-path\">\u003Cpath style=\"\" fill=\"#ECECFF\" stroke-width=\"0\" stroke=\"none\" d=\"M-93.1796875 -27 C-19.568512906332586 -27, 54.04266168733483 -27, 93.1796875 -27 C93.1796875 -27, 93.1796875 -27, 93.1796875 -27 C93.26369672676037 -26.996525352679132, 93.34770595352074 -26.993050705358268, 93.59258422736166 -26.982922465033347 C93.71365675918841 -26.967830789679745, 93.83472929101515 -26.95273911432614, 94.00266045140367 -26.931806517013612 C94.15550719976946 -26.899757924083872, 94.30835394813525 -26.86770933115413, 94.407114935704 -26.847001329696653 C94.49728851226064 -26.820155492810052, 94.58746208881728 -26.79330965592345, 94.80318484602341 -26.729086208503173 C94.89797896735456 -26.6920974275794, 94.99277308868571 -26.655108646655627, 95.18816462326485 -26.578866633275286 C95.26923436404257 -26.539234051998335, 95.3503041048203 -26.499601470721384, 95.55942446518537 -26.397368756032446 C95.6820950322231 -26.324272963957295, 95.80476559926083 -26.25117717188214, 95.91442829061214 -26.185832391312644 C95.99634159330974 -26.127347417311295, 96.07825489600734 -26.06886244330995, 96.25075106344833 -25.94570254698197 C96.36077177993081 -25.85251975340159, 96.47079249641328 -25.759336959821216, 96.5660953581287 -25.678619553365657 C96.6538273248071 -25.59088758668727, 96.74155929148549 -25.503155620008886, 96.85830705336566 -25.386407858128706 C96.93174647092408 -25.299698101666383, 97.0051858884825 -25.21298834520406, 97.12539004698196 -25.07106356344834 C97.19623089970766 -24.971844775857825, 97.26707175243337 -24.872625988267313, 97.36551989131264 -24.734740790612136 C97.44007488708174 -24.609621363804553, 97.51462988285081 -24.484501936996967, 97.57705625603245 -24.37973696518537 C97.61424683912922 -24.303662411525636, 97.65143742222598 -24.227587857865903, 97.75855413327528 -24.008477123264846 C97.80640435409975 -23.88584751706333, 97.85425457492421 -23.763217910861812, 97.90877370850318 -23.623497346023417 C97.942597811911 -23.50988418540604, 97.97642191531882 -23.396271024788664, 98.02668882969665 -23.227427435703994 C98.04429775912772 -23.14344660036306, 98.06190668855878 -23.05946576502213, 98.11149401701361 -22.82297295140367 C98.13093360013802 -22.66701945443381, 98.15037318326243 -22.511065957463945, 98.16260996503335 -22.412896727361662 C98.16639521507018 -22.32137781930483, 98.170180465107 -22.229858911247995, 98.1796875 -22 C98.1796875 -22, 98.1796875 -22, 98.1796875 -22 C98.1796875 -6.637017372188065, 98.1796875 8.72596525562387, 98.1796875 22 C98.1796875 22, 98.1796875 22, 98.1796875 22 C98.17583776324801 22.09307805307978, 98.17198802649604 22.186156106159554, 98.16260996503335 22.412896727361662 C98.14607694922547 22.545532371562285, 98.12954393341758 22.67816801576291, 98.11149401701361 22.82297295140367 C98.0796128039444 22.975021428610404, 98.0477315908752 23.127069905817134, 98.02668882969665 23.227427435703994 C97.99371135743675 23.338196812424634, 97.96073388517685 23.448966189145274, 97.90877370850318 23.623497346023417 C97.85271257970626 23.767169705923216, 97.79665145090935 23.91084206582302, 97.75855413327528 24.008477123264846 C97.7146220027825 24.098341732536056, 97.67068987228973 24.188206341807266, 97.57705625603245 24.379736965185366 C97.52814878372213 24.46181429399412, 97.47924131141181 24.543891622802875, 97.36551989131264 24.734740790612133 C97.29063843493884 24.839618795725773, 97.21575697856504 24.944496800839413, 97.12539004698196 25.07106356344834 C97.02455476762667 25.19011955281199, 96.92371948827137 25.309175542175637, 96.85830705336566 25.386407858128706 C96.76476293930436 25.479951972190012, 96.67121882524305 25.573496086251318, 96.5660953581287 25.678619553365657 C96.46590416842781 25.763477162432018, 96.36571297872692 25.848334771498376, 96.25075106344833 25.94570254698197 C96.1479067101342 26.019132003879434, 96.04506235682007 26.0925614607769, 95.91442829061214 26.185832391312644 C95.80318776511369 26.252117356961033, 95.69194723961526 26.318402322609423, 95.55942446518537 26.397368756032446 C95.44541386307415 26.453105143138906, 95.33140326096293 26.508841530245366, 95.18816462326485 26.578866633275286 C95.10812763684507 26.610097162288138, 95.02809065042528 26.64132769130099, 94.80318484602341 26.729086208503173 C94.70677309909723 26.75778922917472, 94.61036135217107 26.786492249846262, 94.407114935704 26.847001329696653 C94.3025046930336 26.86893579097549, 94.19789445036318 26.89087025225432, 94.00266045140367 26.931806517013612 C93.88322946669227 26.946693573732677, 93.76379848198087 26.961580630451742, 93.59258422736166 26.982922465033347 C93.46357714850932 26.988258237283528, 93.33457006965698 26.99359400953371, 93.1796875 27 C93.1796875 27, 93.1796875 27, 93.1796875 27 C38.854507219659155 27, -15.47067306068169 27, -93.1796875 27 C-93.1796875 27, -93.1796875 27, -93.1796875 27 C-93.28066193212803 26.995823666594738, -93.38163636425604 26.991647333189473, -93.59258422736166 26.982922465033347 C-93.69019685973844 26.970755063096554, -93.78780949211522 26.958587661159765, -94.00266045140367 26.931806517013612 C-94.15517729973301 26.899827096847368, -94.30769414806235 26.867847676681123, -94.407114935704 26.847001329696653 C-94.5427706285903 26.806614880106544, -94.67842632147659 26.76622843051644, -94.80318484602341 26.729086208503173 C-94.92272411972715 26.68244183916124, -95.04226339343089 26.635797469819305, -95.18816462326485 26.578866633275286 C-95.26518218143538 26.541215043364385, -95.3421997396059 26.503563453453484, -95.55942446518537 26.397368756032446 C-95.68907722546007 26.320112479846053, -95.81872998573476 26.242856203659656, -95.91442829061214 26.185832391312644 C-96.02869003448357 26.104251074242086, -96.14295177835501 26.022669757171528, -96.25075106344833 25.94570254698197 C-96.36270742408546 25.850880346429214, -96.47466378472258 25.75605814587646, -96.5660953581287 25.67861955336566 C-96.66040691076357 25.584308000730797, -96.75471846339843 25.489996448095933, -96.85830705336566 25.386407858128706 C-96.93619222612985 25.294449008413753, -97.01407739889405 25.202490158698797, -97.12539004698196 25.07106356344834 C-97.20412264685733 24.9607916962571, -97.2828552467327 24.85051982906586, -97.36551989131264 24.734740790612133 C-97.40790797582376 24.66360440621842, -97.45029606033486 24.592468021824704, -97.57705625603245 24.37973696518537 C-97.61404336619088 24.304078622073487, -97.65103047634932 24.2284202789616, -97.75855413327528 24.00847712326485 C-97.8006145395789 23.900685540011555, -97.84267494588252 23.792893956758256, -97.90877370850318 23.623497346023417 C-97.95457949723443 23.46963841384175, -98.00038528596569 23.315779481660087, -98.02668882969665 23.227427435703994 C-98.05529783341997 23.090984840464916, -98.0839068371433 22.954542245225838, -98.11149401701361 22.82297295140367 C-98.12384723908293 22.72386958235364, -98.13620046115227 22.624766213303605, -98.16260996503335 22.412896727361662 C-98.16765766448859 22.29085460653788, -98.17270536394382 22.1688124857141, -98.1796875 22 C-98.1796875 22, -98.1796875 22, -98.1796875 22 C-98.1796875 11.904247835680408, -98.1796875 1.8084956713608165, -98.1796875 -22 C-98.1796875 -22, -98.1796875 -22, -98.1796875 -22 C-98.17599971538513 -22.08916241141752, -98.17231193077026 -22.178324822835037, -98.16260996503335 -22.41289672736166 C-98.14306573718198 -22.56968973364639, -98.1235215093306 -22.726482739931114, -98.11149401701361 -22.82297295140367 C-98.0826009960432 -22.960770087005688, -98.05370797507277 -23.098567222607702, -98.02668882969665 -23.227427435703994 C-98.00065098080258 -23.314887028434846, -97.97461313190848 -23.4023466211657, -97.90877370850318 -23.623497346023417 C-97.86605310071221 -23.732980880682828, -97.82333249292124 -23.84246441534224, -97.75855413327528 -24.008477123264846 C-97.68817620984022 -24.152437466636997, -97.61779828640516 -24.296397810009147, -97.57705625603245 -24.379736965185366 C-97.52799023252764 -24.462080377230652, -97.47892420902284 -24.54442378927594, -97.36551989131264 -24.734740790612133 C-97.30981712921033 -24.812757363092345, -97.25411436710802 -24.890773935572557, -97.12539004698196 -25.07106356344834 C-97.0343877599194 -25.17850976075011, -96.94338547285685 -25.285955958051876, -96.85830705336566 -25.386407858128706 C-96.75523986531235 -25.48947504618202, -96.65217267725903 -25.592542234235335, -96.5660953581287 -25.678619553365657 C-96.45300629264791 -25.774401105984186, -96.33991722716712 -25.87018265860271, -96.25075106344833 -25.945702546981966 C-96.15802812006434 -26.01190545608894, -96.06530517668035 -26.07810836519591, -95.91442829061214 -26.185832391312644 C-95.81507625759234 -26.24503335306923, -95.71572422457253 -26.304234314825813, -95.55942446518537 -26.397368756032446 C-95.42701761780587 -26.46209851944419, -95.29461077042636 -26.526828282855934, -95.18816462326485 -26.578866633275286 C-95.05906723364764 -26.629240591019997, -94.92996984403041 -26.679614548764704, -94.80318484602341 -26.729086208503173 C-94.65087497537871 -26.77443082163359, -94.49856510473401 -26.819775434764008, -94.407114935704 -26.847001329696653 C-94.26565487017355 -26.876662386307096, -94.1241948046431 -26.90632344291754, -94.00266045140367 -26.931806517013612 C-93.86890178753335 -26.948479517077338, -93.73514312366302 -26.965152517141064, -93.59258422736167 -26.982922465033347 C-93.43894385466453 -26.989277077853338, -93.28530348196739 -26.99563169067333, -93.1796875 -27 C-93.1796875 -27, -93.1796875 -27, -93.1796875 -27\">\u003C/path>\u003Cpath style=\"\" stroke-dasharray=\"0 0\" fill=\"none\" stroke-width=\"1.3\" stroke=\"#9370DB\" d=\"M-93.1796875 -27 C-41.4345901495787 -27, 10.310507200842594 -27, 93.1796875 -27 M-93.1796875 -27 C-23.295314753825977 -27, 46.589057992348046 -27, 93.1796875 -27 M93.1796875 -27 C93.1796875 -27, 93.1796875 -27, 93.1796875 -27 M93.1796875 -27 C93.1796875 -27, 93.1796875 -27, 93.1796875 -27 M93.1796875 -27 C93.28072004259587 -26.995821263128008, 93.38175258519175 -26.991642526256015, 93.59258422736166 -26.982922465033347 M93.1796875 -27 C93.32891381995643 -26.993827953751815, 93.47814013991285 -26.987655907503626, 93.59258422736166 -26.982922465033347 M93.59258422736166 -26.982922465033347 C93.75037849770976 -26.96325342974663, 93.90817276805787 -26.943584394459915, 94.00266045140367 -26.931806517013612 M93.59258422736166 -26.982922465033347 C93.73502506257837 -26.965167233439917, 93.87746589779508 -26.947412001846487, 94.00266045140367 -26.931806517013612 M94.00266045140367 -26.931806517013612 C94.150197677092 -26.90087121391673, 94.29773490278033 -26.86993591081985, 94.407114935704 -26.847001329696653 M94.00266045140367 -26.931806517013612 C94.15617924568647 -26.89961701087339, 94.30969803996928 -26.867427504733165, 94.407114935704 -26.847001329696653 M94.407114935704 -26.847001329696653 C94.52598684868522 -26.811611627877653, 94.64485876166644 -26.776221926058657, 94.80318484602341 -26.729086208503173 M94.407114935704 -26.847001329696653 C94.510406049892 -26.816250232654554, 94.61369716408001 -26.785499135612454, 94.80318484602341 -26.729086208503173 M94.80318484602341 -26.729086208503173 C94.89098971391812 -26.694824642733156, 94.97879458181282 -26.66056307696314, 95.18816462326485 -26.578866633275286 M94.80318484602341 -26.729086208503173 C94.94669913871698 -26.673086757721535, 95.09021343141055 -26.617087306939894, 95.18816462326485 -26.578866633275286 M95.18816462326485 -26.578866633275286 C95.27959643003534 -26.534168346610404, 95.37102823680584 -26.48947005994552, 95.55942446518537 -26.397368756032446 M95.18816462326485 -26.578866633275286 C95.27652174275565 -26.535671469629488, 95.36487886224643 -26.492476305983686, 95.55942446518537 -26.397368756032446 M95.55942446518537 -26.397368756032446 C95.64932801639652 -26.343797867392738, 95.73923156760767 -26.290226978753033, 95.91442829061214 -26.185832391312644 M95.55942446518537 -26.397368756032446 C95.64271599629916 -26.347737776189973, 95.72600752741293 -26.298106796347504, 95.91442829061214 -26.185832391312644 M95.91442829061214 -26.185832391312644 C96.01661653780423 -26.112871385182345, 96.11880478499631 -26.03991037905205, 96.25075106344833 -25.94570254698197 M95.91442829061214 -26.185832391312644 C95.9961476614376 -26.127485882006606, 96.07786703226306 -26.06913937270057, 96.25075106344833 -25.94570254698197 M96.25075106344833 -25.94570254698197 C96.32181812920547 -25.885511812631812, 96.39288519496262 -25.825321078281654, 96.5660953581287 -25.678619553365657 M96.25075106344833 -25.94570254698197 C96.37381978550238 -25.84146865640201, 96.49688850755642 -25.737234765822052, 96.5660953581287 -25.678619553365657 M96.5660953581287 -25.678619553365657 C96.6512497742685 -25.593465137225856, 96.73640419040832 -25.50831072108605, 96.85830705336566 -25.386407858128706 M96.5660953581287 -25.678619553365657 C96.63753272227751 -25.60718218921685, 96.70897008642632 -25.535744825068043, 96.85830705336566 -25.386407858128706 M96.85830705336566 -25.386407858128706 C96.91254986967468 -25.322363485932488, 96.96679268598369 -25.25831911373627, 97.12539004698196 -25.07106356344834 M96.85830705336566 -25.386407858128706 C96.91875746150966 -25.315034196102534, 96.97920786965365 -25.243660534076362, 97.12539004698196 -25.07106356344834 M97.12539004698196 -25.07106356344834 C97.18862325650146 -24.982499943127817, 97.25185646602095 -24.893936322807296, 97.36551989131264 -24.734740790612136 M97.12539004698196 -25.07106356344834 C97.19195032570866 -24.977840092769352, 97.25851060443534 -24.884616622090363, 97.36551989131264 -24.734740790612136 M97.36551989131264 -24.734740790612136 C97.43885129989144 -24.611674808061636, 97.51218270847022 -24.488608825511136, 97.57705625603245 -24.37973696518537 M97.36551989131264 -24.734740790612136 C97.43519719749042 -24.617807183138503, 97.5048745036682 -24.500873575664865, 97.57705625603245 -24.37973696518537 M97.57705625603245 -24.37973696518537 C97.6374467582821 -24.2562062183838, 97.69783726053176 -24.132675471582232, 97.75855413327528 -24.008477123264846 M97.57705625603245 -24.37973696518537 C97.62414944882671 -24.283406299626467, 97.67124264162096 -24.187075634067565, 97.75855413327528 -24.008477123264846 M97.75855413327528 -24.008477123264846 C97.81645544253134 -23.86008878502354, 97.87435675178739 -23.71170044678223, 97.90877370850318 -23.623497346023417 M97.75855413327528 -24.008477123264846 C97.79209247106606 -23.92252572983191, 97.82563080885684 -23.836574336398975, 97.90877370850318 -23.623497346023417 M97.90877370850318 -23.623497346023417 C97.94080152818006 -23.515917796100055, 97.97282934785696 -23.408338246176694, 98.02668882969665 -23.227427435703994 M97.90877370850318 -23.623497346023417 C97.95205715744824 -23.47811080383552, 97.9953406063933 -23.33272426164762, 98.02668882969665 -23.227427435703994 M98.02668882969665 -23.227427435703994 C98.05318431606716 -23.10106466692408, 98.07967980243767 -22.97470189814417, 98.11149401701361 -22.82297295140367 M98.02668882969665 -23.227427435703994 C98.04545105694342 -23.137946270866138, 98.06421328419017 -23.04846510602828, 98.11149401701361 -22.82297295140367 M98.11149401701361 -22.82297295140367 C98.1251667563602 -22.713283792916485, 98.13883949570679 -22.603594634429303, 98.16260996503335 -22.412896727361662 M98.11149401701361 -22.82297295140367 C98.1231323740312 -22.729604566687758, 98.13477073104879 -22.636236181971846, 98.16260996503335 -22.412896727361662 M98.16260996503335 -22.412896727361662 C98.16603260373839 -22.330144952997795, 98.16945524244343 -22.247393178633924, 98.1796875 -22 M98.16260996503335 -22.412896727361662 C98.1690768899671 -22.256540898112597, 98.17554381490086 -22.10018506886353, 98.1796875 -22 M98.1796875 -22 C98.1796875 -22, 98.1796875 -22, 98.1796875 -22 M98.1796875 -22 C98.1796875 -22, 98.1796875 -22, 98.1796875 -22 M98.1796875 -22 C98.1796875 -9.613604753174238, 98.1796875 2.7727904936515237, 98.1796875 22 M98.1796875 -22 C98.1796875 -6.900117670993518, 98.1796875 8.199764658012963, 98.1796875 22 M98.1796875 22 C98.1796875 22, 98.1796875 22, 98.1796875 22 M98.1796875 22 C98.1796875 22, 98.1796875 22, 98.1796875 22 M98.1796875 22 C98.17367155703292 22.14545209059471, 98.16765561406584 22.290904181189422, 98.16260996503335 22.412896727361662 M98.1796875 22 C98.1731014337811 22.159236399942, 98.1665153675622 22.318472799883995, 98.16260996503335 22.412896727361662 M98.16260996503335 22.412896727361662 C98.14397530115293 22.562392782828002, 98.12534063727252 22.711888838294342, 98.11149401701361 22.82297295140367 M98.16260996503335 22.412896727361662 C98.14633418401831 22.54346871282897, 98.13005840300328 22.67404069829628, 98.11149401701361 22.82297295140367 M98.11149401701361 22.82297295140367 C98.08242020133858 22.961632336489878, 98.05334638566353 23.100291721576088, 98.02668882969665 23.227427435703994 M98.11149401701361 22.82297295140367 C98.09216522422956 22.91515619119069, 98.07283643144551 23.00733943097771, 98.02668882969665 23.227427435703994 M98.02668882969665 23.227427435703994 C98.00059896743628 23.31506173825253, 97.97450910517588 23.402696040801064, 97.90877370850318 23.623497346023417 M98.02668882969665 23.227427435703994 C97.9836367668648 23.37203676563801, 97.94058470403296 23.51664609557203, 97.90877370850318 23.623497346023417 M97.90877370850318 23.623497346023417 C97.87260081780775 23.71620051990056, 97.83642792711233 23.808903693777705, 97.75855413327528 24.008477123264846 M97.90877370850318 23.623497346023417 C97.86681571128658 23.731026477279713, 97.82485771406996 23.838555608536005, 97.75855413327528 24.008477123264846 M97.75855413327528 24.008477123264846 C97.71349225417525 24.10065267024899, 97.66843037507522 24.19282821723313, 97.57705625603245 24.379736965185366 M97.75855413327528 24.008477123264846 C97.6987446105874 24.130819457377857, 97.63893508789951 24.25316179149087, 97.57705625603245 24.379736965185366 M97.57705625603245 24.379736965185366 C97.50506328670716 24.500556756847022, 97.43307031738186 24.621376548508678, 97.36551989131264 24.734740790612133 M97.57705625603245 24.379736965185366 C97.51275723949944 24.487644638036947, 97.44845822296642 24.59555231088853, 97.36551989131264 24.734740790612133 M97.36551989131264 24.734740790612133 C97.30538676321987 24.818962476741344, 97.2452536351271 24.90318416287056, 97.12539004698196 25.07106356344834 M97.36551989131264 24.734740790612133 C97.2929030866555 24.836446953646018, 97.22028628199834 24.938153116679903, 97.12539004698196 25.07106356344834 M97.12539004698196 25.07106356344834 C97.07064459912326 25.135701391593877, 97.01589915126455 25.200339219739412, 96.85830705336566 25.386407858128706 M97.12539004698196 25.07106356344834 C97.07154464184441 25.134638713161063, 97.01769923670686 25.19821386287379, 96.85830705336566 25.386407858128706 M96.85830705336566 25.386407858128706 C96.78745906199367 25.45725584950069, 96.7166110706217 25.52810384087267, 96.5660953581287 25.678619553365657 M96.85830705336566 25.386407858128706 C96.76206703756164 25.48264787393273, 96.66582702175761 25.578887889736755, 96.5660953581287 25.678619553365657 M96.5660953581287 25.678619553365657 C96.45263792584355 25.774713096752745, 96.3391804935584 25.870806640139833, 96.25075106344833 25.94570254698197 M96.5660953581287 25.678619553365657 C96.49985672816307 25.734720811205747, 96.43361809819743 25.79082206904584, 96.25075106344833 25.94570254698197 M96.25075106344833 25.94570254698197 C96.15726606708853 26.012449551455752, 96.06378107072872 26.07919655592954, 95.91442829061214 26.185832391312644 M96.25075106344833 25.94570254698197 C96.11653494242645 26.041531015497092, 95.98231882140456 26.13735948401221, 95.91442829061214 26.185832391312644 M95.91442829061214 26.185832391312644 C95.79741437711304 26.255557549495034, 95.68040046361395 26.325282707677424, 95.55942446518537 26.397368756032446 M95.91442829061214 26.185832391312644 C95.7750799298711 26.268865991374238, 95.63573156913007 26.35189959143583, 95.55942446518537 26.397368756032446 M95.55942446518537 26.397368756032446 C95.43502906855363 26.45818195982699, 95.31063367192188 26.518995163621536, 95.18816462326485 26.578866633275286 M95.55942446518537 26.397368756032446 C95.46256431933443 26.44472079596878, 95.3657041734835 26.492072835905113, 95.18816462326485 26.578866633275286 M95.18816462326485 26.578866633275286 C95.10572486514772 26.61103472671381, 95.02328510703059 26.643202820152336, 94.80318484602341 26.729086208503173 M95.18816462326485 26.578866633275286 C95.07140406167252 26.624426745786774, 94.95464350008021 26.669986858298266, 94.80318484602341 26.729086208503173 M94.80318484602341 26.729086208503173 C94.66966277021612 26.76883745276741, 94.53614069440881 26.808588697031652, 94.407114935704 26.847001329696653 M94.80318484602341 26.729086208503173 C94.71166615158447 26.756332504333965, 94.6201474571455 26.783578800164758, 94.407114935704 26.847001329696653 M94.407114935704 26.847001329696653 C94.25676972366529 26.87852540561636, 94.10642451162657 26.910049481536074, 94.00266045140367 26.931806517013612 M94.407114935704 26.847001329696653 C94.32112143352056 26.865032270986188, 94.23512793133713 26.88306321227572, 94.00266045140367 26.931806517013612 M94.00266045140367 26.931806517013612 C93.88430527908244 26.94655947385809, 93.7659501067612 26.961312430702574, 93.59258422736166 26.982922465033347 M94.00266045140367 26.931806517013612 C93.84327386776113 26.95167403394549, 93.68388728411858 26.97154155087737, 93.59258422736166 26.982922465033347 M93.59258422736166 26.982922465033347 C93.43347315659338 26.989503347599285, 93.2743620858251 26.99608423016522, 93.1796875 27 M93.59258422736166 26.982922465033347 C93.44295925341945 26.98911099973235, 93.29333427947724 26.995299534431354, 93.1796875 27 M93.1796875 27 C93.1796875 27, 93.1796875 27, 93.1796875 27 M93.1796875 27 C93.1796875 27, 93.1796875 27, 93.1796875 27 M93.1796875 27 C20.511593727763525 27, -52.15650004447295 27, -93.1796875 27 M93.1796875 27 C33.60108563693321 27, -25.977516226133574 27, -93.1796875 27 M-93.1796875 27 C-93.1796875 27, -93.1796875 27, -93.1796875 27 M-93.1796875 27 C-93.1796875 27, -93.1796875 27, -93.1796875 27 M-93.1796875 27 C-93.27279811876443 26.996148916321335, -93.36590873752885 26.992297832642674, -93.59258422736166 26.982922465033347 M-93.1796875 27 C-93.29278436861179 26.99532227891299, -93.4058812372236 26.99064455782598, -93.59258422736166 26.982922465033347 M-93.59258422736166 26.982922465033347 C-93.73340684665388 26.96536894384455, -93.8742294659461 26.947815422655747, -94.00266045140367 26.931806517013612 M-93.59258422736166 26.982922465033347 C-93.68793298278817 26.971037255064118, -93.78328173821467 26.95915204509489, -94.00266045140367 26.931806517013612 M-94.00266045140367 26.931806517013612 C-94.10727917968029 26.90987027649026, -94.21189790795691 26.887934035966904, -94.407114935704 26.847001329696653 M-94.00266045140367 26.931806517013612 C-94.1373760824572 26.903559619601214, -94.27209171351072 26.875312722188813, -94.407114935704 26.847001329696653 M-94.407114935704 26.847001329696653 C-94.5508508002555 26.804209308775974, -94.694586664807 26.761417287855295, -94.80318484602341 26.729086208503173 M-94.407114935704 26.847001329696653 C-94.51727779089079 26.814204426720877, -94.62744064607757 26.781407523745102, -94.80318484602341 26.729086208503173 M-94.80318484602341 26.729086208503173 C-94.89399724151566 26.69365110182296, -94.98480963700793 26.658215995142754, -95.18816462326485 26.578866633275286 M-94.80318484602341 26.729086208503173 C-94.89948766566143 26.691508731673274, -94.99579048529944 26.65393125484338, -95.18816462326485 26.578866633275286 M-95.18816462326485 26.578866633275286 C-95.31838873228067 26.515203945627885, -95.44861284129647 26.451541257980487, -95.55942446518537 26.397368756032446 M-95.18816462326485 26.578866633275286 C-95.27637459173795 26.53574340737855, -95.36458456021104 26.49262018148182, -95.55942446518537 26.397368756032446 M-95.55942446518537 26.397368756032446 C-95.69465099563251 26.31679123371963, -95.82987752607966 26.236213711406815, -95.91442829061214 26.185832391312644 M-95.55942446518537 26.397368756032446 C-95.64571665718518 26.345949770399265, -95.732008849185 26.294530784766085, -95.91442829061214 26.185832391312644 M-95.91442829061214 26.185832391312644 C-95.9954946938119 26.127952091930453, -96.07656109701166 26.070071792548266, -96.25075106344833 25.94570254698197 M-95.91442829061214 26.185832391312644 C-96.04671142608854 26.09138404794997, -96.17899456156492 25.996935704587294, -96.25075106344833 25.94570254698197 M-96.25075106344833 25.94570254698197 C-96.35222999893475 25.8597542728704, -96.45370893442117 25.77380599875883, -96.5660953581287 25.67861955336566 M-96.25075106344833 25.94570254698197 C-96.35118783368652 25.860636941810462, -96.45162460392471 25.775571336638954, -96.5660953581287 25.67861955336566 M-96.5660953581287 25.67861955336566 C-96.65886658521701 25.58584832627735, -96.75163781230533 25.493077099189037, -96.85830705336566 25.386407858128706 M-96.5660953581287 25.67861955336566 C-96.67658216523772 25.568132746256644, -96.78706897234674 25.45764593914763, -96.85830705336566 25.386407858128706 M-96.85830705336566 25.386407858128706 C-96.9388212920978 25.291344876091046, -97.01933553082993 25.196281894053385, -97.12539004698196 25.07106356344834 M-96.85830705336566 25.386407858128706 C-96.95455515576117 25.272767938367142, -97.05080325815668 25.15912801860558, -97.12539004698196 25.07106356344834 M-97.12539004698196 25.07106356344834 C-97.19511705742383 24.973404809040897, -97.2648440678657 24.875746054633456, -97.36551989131264 24.734740790612133 M-97.12539004698196 25.07106356344834 C-97.20012467864841 24.966391199132236, -97.27485931031485 24.86171883481613, -97.36551989131264 24.734740790612133 M-97.36551989131264 24.734740790612133 C-97.44922089603843 24.594272380326867, -97.53292190076421 24.4538039700416, -97.57705625603245 24.37973696518537 M-97.36551989131264 24.734740790612133 C-97.42005274648943 24.643222851250517, -97.47458560166622 24.551704911888905, -97.57705625603245 24.37973696518537 M-97.57705625603245 24.37973696518537 C-97.63290251736238 24.26550161175772, -97.68874877869231 24.151266258330068, -97.75855413327528 24.00847712326485 M-97.57705625603245 24.37973696518537 C-97.61505699740654 24.30200520628147, -97.65305773878065 24.224273447377573, -97.75855413327528 24.00847712326485 M-97.75855413327528 24.00847712326485 C-97.7901311568957 23.927552147269605, -97.8217081805161 23.84662717127436, -97.90877370850318 23.623497346023417 M-97.75855413327528 24.00847712326485 C-97.80035151299522 23.901359619374666, -97.84214889271514 23.794242115484483, -97.90877370850318 23.623497346023417 M-97.90877370850318 23.623497346023417 C-97.932984872625 23.542173479284365, -97.95719603674681 23.460849612545314, -98.02668882969665 23.227427435703994 M-97.90877370850318 23.623497346023417 C-97.93479188214096 23.536103841313494, -97.96081005577875 23.448710336603572, -98.02668882969665 23.227427435703994 M-98.02668882969665 23.227427435703994 C-98.04533224981766 23.138512888030665, -98.06397566993869 23.049598340357335, -98.11149401701361 22.82297295140367 M-98.02668882969665 23.227427435703994 C-98.0529797116927 23.102040469930703, -98.07927059368873 22.976653504157408, -98.11149401701361 22.82297295140367 M-98.11149401701361 22.82297295140367 C-98.12930369749967 22.680095301510683, -98.1471133779857 22.5372176516177, -98.16260996503335 22.412896727361662 M-98.11149401701361 22.82297295140367 C-98.12569017499625 22.70908468195051, -98.1398863329789 22.59519641249735, -98.16260996503335 22.412896727361662 M-98.16260996503335 22.412896727361662 C-98.16625517814812 22.324763599918796, -98.1699003912629 22.236630472475927, -98.1796875 22 M-98.16260996503335 22.412896727361662 C-98.16644667620355 22.320133603813677, -98.17028338737374 22.22737048026569, -98.1796875 22 M-98.1796875 22 C-98.1796875 22, -98.1796875 22, -98.1796875 22 M-98.1796875 22 C-98.1796875 22, -98.1796875 22, -98.1796875 22 M-98.1796875 22 C-98.1796875 4.660554150841563, -98.1796875 -12.678891698316875, -98.1796875 -22 M-98.1796875 22 C-98.1796875 7.128536489530282, -98.1796875 -7.742927020939437, -98.1796875 -22 M-98.1796875 -22 C-98.1796875 -22, -98.1796875 -22, -98.1796875 -22 M-98.1796875 -22 C-98.1796875 -22, -98.1796875 -22, -98.1796875 -22 M-98.1796875 -22 C-98.17396996753352 -22.13823718988749, -98.16825243506703 -22.27647437977498, -98.16260996503335 -22.41289672736166 M-98.1796875 -22 C-98.17455405851574 -22.12411517195518, -98.16942061703146 -22.248230343910357, -98.16260996503335 -22.41289672736166 M-98.16260996503335 -22.41289672736166 C-98.14500969710319 -22.554094371043124, -98.12740942917301 -22.695292014724586, -98.11149401701361 -22.82297295140367 M-98.16260996503335 -22.41289672736166 C-98.14264298644234 -22.57308123930631, -98.12267600785133 -22.733265751250958, -98.11149401701361 -22.82297295140367 M-98.11149401701361 -22.82297295140367 C-98.09033452837683 -22.923887180065943, -98.06917503974003 -23.024801408728216, -98.02668882969665 -23.227427435703994 M-98.11149401701361 -22.82297295140367 C-98.08300037237771 -22.95886537392702, -98.05450672774182 -23.094757796450363, -98.02668882969665 -23.227427435703994 M-98.02668882969665 -23.227427435703994 C-97.99398653938891 -23.337272492540876, -97.96128424908117 -23.447117549377758, -97.90877370850318 -23.623497346023417 M-98.02668882969665 -23.227427435703994 C-97.99946432429421 -23.31887293738436, -97.97223981889175 -23.410318439064724, -97.90877370850318 -23.623497346023417 M-97.90877370850318 -23.623497346023417 C-97.8615614332917 -23.744492037736553, -97.81434915808022 -23.86548672944969, -97.75855413327528 -24.008477123264846 M-97.90877370850318 -23.623497346023417 C-97.87680253953319 -23.705432429979947, -97.84483137056321 -23.787367513936474, -97.75855413327528 -24.008477123264846 M-97.75855413327528 -24.008477123264846 C-97.71300379386638 -24.101651831780867, -97.66745345445746 -24.194826540296887, -97.57705625603245 -24.379736965185366 M-97.75855413327528 -24.008477123264846 C-97.69478663205807 -24.138915631864574, -97.63101913084084 -24.269354140464305, -97.57705625603245 -24.379736965185366 M-97.57705625603245 -24.379736965185366 C-97.51044018020796 -24.491533165256847, -97.4438241043835 -24.603329365328328, -97.36551989131264 -24.734740790612133 M-97.57705625603245 -24.379736965185366 C-97.53290739847992 -24.45382830801489, -97.4887585409274 -24.527919650844417, -97.36551989131264 -24.734740790612133 M-97.36551989131264 -24.734740790612133 C-97.3168335708316 -24.802930225161653, -97.26814725035058 -24.871119659711173, -97.12539004698196 -25.07106356344834 M-97.36551989131264 -24.734740790612133 C-97.3043692476731 -24.82038759593488, -97.24321860403354 -24.906034401257628, -97.12539004698196 -25.07106356344834 M-97.12539004698196 -25.07106356344834 C-97.0202563851633 -25.195194643396476, -96.91512272334462 -25.319325723344615, -96.85830705336566 -25.386407858128706 M-97.12539004698196 -25.07106356344834 C-97.06293773895264 -25.144800864202722, -97.00048543092333 -25.218538164957106, -96.85830705336566 -25.386407858128706 M-96.85830705336566 -25.386407858128706 C-96.79004264519047 -25.454672266303906, -96.72177823701526 -25.52293667447911, -96.5660953581287 -25.678619553365657 M-96.85830705336566 -25.386407858128706 C-96.78120507128756 -25.463509840206804, -96.70410308920947 -25.540611822284898, -96.5660953581287 -25.678619553365657 M-96.5660953581287 -25.678619553365657 C-96.45552693762038 -25.772266228593196, -96.34495851711206 -25.865912903820732, -96.25075106344833 -25.945702546981966 M-96.5660953581287 -25.678619553365657 C-96.44634227694878 -25.78004523937253, -96.32658919576886 -25.881470925379407, -96.25075106344833 -25.945702546981966 M-96.25075106344833 -25.945702546981966 C-96.13469910874399 -26.02856205001954, -96.01864715403964 -26.111421553057113, -95.91442829061214 -26.185832391312644 M-96.25075106344833 -25.945702546981966 C-96.13218285461538 -26.03035862093594, -96.01361464578241 -26.115014694889908, -95.91442829061214 -26.185832391312644 M-95.91442829061214 -26.185832391312644 C-95.79081418159716 -26.259490412371072, -95.66720007258218 -26.3331484334295, -95.55942446518537 -26.397368756032446 M-95.91442829061214 -26.185832391312644 C-95.84194589608516 -26.229022523773864, -95.76946350155819 -26.272212656235084, -95.55942446518537 -26.397368756032446 M-95.55942446518537 -26.397368756032446 C-95.48467043863742 -26.43391377276149, -95.40991641208949 -26.470458789490532, -95.18816462326485 -26.578866633275286 M-95.55942446518537 -26.397368756032446 C-95.48149794986723 -26.435464708015857, -95.40357143454911 -26.47356065999927, -95.18816462326485 -26.578866633275286 M-95.18816462326485 -26.578866633275286 C-95.06156882993868 -26.6282644651182, -94.9349730366125 -26.677662296961113, -94.80318484602341 -26.729086208503173 M-95.18816462326485 -26.578866633275286 C-95.06949750710287 -26.62517068568839, -94.95083039094088 -26.67147473810149, -94.80318484602341 -26.729086208503173 M-94.80318484602341 -26.729086208503173 C-94.70064901030332 -26.75961244940307, -94.59811317458322 -26.79013869030296, -94.407114935704 -26.847001329696653 M-94.80318484602341 -26.729086208503173 C-94.7005990001759 -26.759627338063076, -94.5980131543284 -26.79016846762298, -94.407114935704 -26.847001329696653 M-94.407114935704 -26.847001329696653 C-94.31938694983776 -26.865395953969877, -94.23165896397154 -26.8837905782431, -94.00266045140367 -26.931806517013612 M-94.407114935704 -26.847001329696653 C-94.2567115164174 -26.878537610392804, -94.10630809713079 -26.910073891088953, -94.00266045140367 -26.931806517013612 M-94.00266045140367 -26.931806517013612 C-93.91677750515396 -26.942511815099444, -93.83089455890425 -26.953217113185275, -93.59258422736167 -26.982922465033347 M-94.00266045140367 -26.931806517013612 C-93.88610261416893 -26.946335436273202, -93.76954477693418 -26.96086435553279, -93.59258422736167 -26.982922465033347 M-93.59258422736167 -26.982922465033347 C-93.48394319978203 -26.98741589117203, -93.37530217220238 -26.991909317310718, -93.1796875 -27 M-93.59258422736167 -26.982922465033347 C-93.48800349275639 -26.987247956212393, -93.3834227581511 -26.99157344739144, -93.1796875 -27 M-93.1796875 -27 C-93.1796875 -27, -93.1796875 -27, -93.1796875 -27 M-93.1796875 -27 C-93.1796875 -27, -93.1796875 -27, -93.1796875 -27\">\u003C/path>\u003C/g>\u003Cg transform=\"translate(-83.1796875, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"166.359375\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>Rounded square shape\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003C/g>\u003C/g>\u003Cg transform=\"translate(1019.1171875, 228.375)\" id=\"flowchart-sq-0\" class=\"node default green\">\u003Crect height=\"54\" width=\"159.640625\" y=\"-27\" x=\"-79.8203125\" style=\"fill:#9f6 !important;stroke:#333 !important;stroke-width:2px !important\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-49.8203125, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"99.640625\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>Square shape\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(1019.1171875, 580.8125)\" id=\"flowchart-ci-1\" class=\"node default\">\u003Ccircle cy=\"0\" cx=\"0\" r=\"51.96875\" style=\"\" class=\"basic label-container\">\u003C/circle>\u003Cg transform=\"translate(-44.46875, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"88.9375\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>Circle shape\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(1352.37890625, 228.375)\" id=\"flowchart-e-8\" class=\"node default green\">\u003Ccircle cy=\"0\" cx=\"0\" r=\"107.5\" style=\"fill:#9f6 !important;stroke:#333 !important;stroke-width:2px !important\" class=\"basic label-container\">\u003C/circle>\u003Cg transform=\"translate(-100, -24)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"48\" width=\"200\">\u003Cdiv style=\"display: table; white-space: break-spaces; line-height: 1.5; max-width: 200px; text-align: center; width: 200px;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>Inner / circle&#x3C;br>and some odd &#x3C;br>special characters\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(1247.94921875, 580.8125)\" id=\"flowchart-od3-9\" class=\"node default\">\u003Cg transform=\"translate(10.875,0)\" class=\"basic label-container\">\u003Cpath style=\"\" fill=\"#ECECFF\" stroke-width=\"0\" stroke=\"none\" d=\"M-129.25 -43.5 C-122.19813192102625 -29.396263842052484, -115.14626384205249 -15.292527684104968, -107.5 0 C-113.47265760874808 11.945315217496164, -119.44531521749616 23.890630434992328, -129.25 43.5 C-52.80829534775893 43.5, 23.633409304482143 43.5, 107.5 43.5 C107.5 10.084942111756284, 107.5 -23.330115776487432, 107.5 -43.5 C46.24921766045147 -43.5, -15.001564679097058 -43.5, -129.25 -43.5\">\u003C/path>\u003Cpath style=\"\" stroke-dasharray=\"0 0\" fill=\"none\" stroke-width=\"1.3\" stroke=\"#9370DB\" d=\"M-129.25 -43.5 C-123.5489137051484 -32.097827410296794, -117.84782741029679 -20.695654820593585, -107.5 0 M-129.25 -43.5 C-122.44209172809322 -29.88418345618642, -115.63418345618642 -16.268366912372844, -107.5 0 M-107.5 0 C-114.071136900759 13.142273801518016, -120.64227380151802 26.28454760303603, -129.25 43.5 M-107.5 0 C-115.97130415908536 16.94260831817073, -124.44260831817073 33.88521663634146, -129.25 43.5 M-129.25 43.5 C-54.30850774979899 43.5, 20.632984500402017 43.5, 107.5 43.5 M-129.25 43.5 C-54.1974291303963 43.5, 20.855141739207397 43.5, 107.5 43.5 M107.5 43.5 C107.5 20.726808946910364, 107.5 -2.046382106179273, 107.5 -43.5 M107.5 43.5 C107.5 14.449978036827744, 107.5 -14.600043926344512, 107.5 -43.5 M107.5 -43.5 C42.490457399141874 -43.5, -22.51908520171625 -43.5, -129.25 -43.5 M107.5 -43.5 C54.37927776125554 -43.5, 1.2585555225110738 -43.5, -129.25 -43.5\">\u003C/path>\u003C/g>\u003Cg transform=\"translate(-89.125, -36)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"72\" width=\"200\">\u003Cdiv style=\"display: table; white-space: break-spaces; line-height: 1.5; max-width: 200px; text-align: center; width: 200px;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>Really long text with linebreak&#x3C;br>in an Odd shape\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(1456.80859375, 580.8125)\" id=\"flowchart-f-11\" class=\"node default\">\u003Cg class=\"basic label-container outer-path\">\u003Cpath style=\"\" fill=\"#ECECFF\" stroke-width=\"0\" stroke=\"none\" d=\"M-35.484375 -27 C-15.06803757948595 -27, 5.348299841028101 -27, 35.484375 -27 C35.484375 -27, 35.484375 -27, 35.484375 -27 C35.57594795957922 -26.996212514375674, 35.667520919158434 -26.992425028751345, 35.89727172736166 -26.982922465033347 C35.9957664022353 -26.97064511661398, 36.09426107710894 -26.958367768194616, 36.30734795140367 -26.931806517013612 C36.453138088335805 -26.90123753990638, 36.59892822526793 -26.870668562799146, 36.711802435703994 -26.847001329696653 C36.80722064577713 -26.818594097761853, 36.90263885585026 -26.790186865827057, 37.10787234602342 -26.729086208503173 C37.24861372583173 -26.67416875168691, 37.38935510564004 -26.619251294870644, 37.492852123264846 -26.578866633275286 C37.5924889907416 -26.530157136851948, 37.69212585821835 -26.48144764042861, 37.864111965185366 -26.397368756032446 C37.95151171070476 -26.34528981174957, 38.038911456224156 -26.293210867466694, 38.219115790612136 -26.185832391312644 C38.32385829722918 -26.11104767900592, 38.42860080384622 -26.036262966699194, 38.55543856344834 -25.94570254698197 C38.630035133400824 -25.882522475065294, 38.704631703353314 -25.81934240314862, 38.870782858128706 -25.678619553365657 C38.973630209446135 -25.575772202048224, 39.07647756076357 -25.472924850730795, 39.16299455336566 -25.386407858128706 C39.25766098701326 -25.274635411128976, 39.352327420660856 -25.16286296412925, 39.43007754698197 -25.07106356344834 C39.513716940431244 -24.953919304259713, 39.59735633388051 -24.836775045071086, 39.670207391312644 -24.734740790612136 C39.73028462432729 -24.633918184676247, 39.79036185734194 -24.53309557874036, 39.88174375603245 -24.37973696518537 C39.927910070552706 -24.285302259439963, 39.97407638507296 -24.19086755369456, 40.06324163327529 -24.008477123264846 C40.109928182425016 -23.888829751978076, 40.15661473157474 -23.769182380691305, 40.213461208503176 -23.623497346023417 C40.25432458206503 -23.48623969375474, 40.295187955626886 -23.348982041486064, 40.33137632969665 -23.227427435703994 C40.356706282940905 -23.106623349292793, 40.38203623618516 -22.985819262881588, 40.41618151701361 -22.82297295140367 C40.43226446346698 -22.693947975665786, 40.44834740992034 -22.564922999927898, 40.46729746503335 -22.412896727361662 C40.47221884592147 -22.293908707909527, 40.477140226809595 -22.17492068845739, 40.484375 -22 C40.484375 -22, 40.484375 -22, 40.484375 -22 C40.484375 -11.721820594757064, 40.484375 -1.4436411895141283, 40.484375 22 C40.484375 22, 40.484375 22, 40.484375 22 C40.4797266908286 22.112385754055428, 40.475078381657205 22.224771508110855, 40.46729746503335 22.412896727361662 C40.44847966352868 22.56386199915563, 40.42966186202401 22.714827270949595, 40.41618151701361 22.82297295140367 C40.39392821258426 22.92910382678649, 40.3716749081549 23.035234702169312, 40.33137632969665 23.227427435703994 C40.30154246147543 23.32763763259192, 40.2717085932542 23.427847829479845, 40.213461208503176 23.623497346023417 C40.15364609473029 23.77679034489538, 40.09383098095741 23.93008334376735, 40.06324163327529 24.008477123264846 C40.011739018272834 24.11382740611538, 39.96023640327038 24.219177688965917, 39.88174375603245 24.379736965185366 C39.81469225994957 24.492263894734997, 39.747640763866684 24.60479082428463, 39.670207391312644 24.734740790612133 C39.58980079594751 24.84735723436529, 39.509394200582385 24.959973678118445, 39.43007754698197 25.07106356344834 C39.32423991480586 25.196025819626886, 39.218402282629754 25.320988075805435, 39.16299455336566 25.386407858128706 C39.055675707089335 25.49372670440503, 38.94835686081301 25.601045550681352, 38.870782858128706 25.678619553365657 C38.7957059001659 25.742206493172628, 38.72062894220309 25.805793432979602, 38.55543856344834 25.94570254698197 C38.42743551934867 26.037094963838847, 38.29943247524899 26.128487380695724, 38.219115790612136 26.185832391312644 C38.10142670590964 26.255959864207444, 37.98373762120715 26.326087337102248, 37.864111965185366 26.397368756032446 C37.755201717795345 26.45061173165035, 37.64629147040532 26.503854707268253, 37.492852123264846 26.578866633275286 C37.395546829962285 26.61683527654293, 37.29824153665972 26.654803919810572, 37.10787234602342 26.729086208503173 C36.989446087737875 26.764343233170784, 36.87101982945232 26.799600257838396, 36.711802435703994 26.847001329696653 C36.6173056715433 26.866815217529687, 36.522808907382604 26.886629105362722, 36.30734795140367 26.931806517013612 C36.1445055755475 26.95210479799569, 35.981663199691326 26.972403078977766, 35.89727172736166 26.982922465033347 C35.79996622337116 26.986947050448357, 35.70266071938066 26.99097163586337, 35.484375 27 C35.484375 27, 35.484375 27, 35.484375 27 C12.123066997874606 27, -11.238241004250789 27, -35.484375 27 C-35.484375 27, -35.484375 27, -35.484375 27 C-35.574102404598776 26.9962888470943, -35.663829809197544 26.992577694188597, -35.89727172736166 26.982922465033347 C-36.005382363210906 26.96944648832838, -36.113492999060156 26.955970511623416, -36.30734795140367 26.931806517013612 C-36.435561635754354 26.904922934459776, -36.56377532010504 26.87803935190594, -36.711802435703994 26.847001329696653 C-36.85869029729653 26.803270918599363, -37.00557815888908 26.75954050750207, -37.10787234602342 26.729086208503173 C-37.21250210144926 26.68825955124629, -37.3171318568751 26.647432893989404, -37.492852123264846 26.578866633275286 C-37.5855713579674 26.533538961445654, -37.67829059266995 26.48821128961602, -37.864111965185366 26.397368756032446 C-37.963568544276114 26.338105498339285, -38.063025123366856 26.278842240646128, -38.219115790612136 26.185832391312644 C-38.30663862597844 26.12334228796741, -38.394161461344744 26.060852184622178, -38.55543856344834 25.94570254698197 C-38.64062430430871 25.873553904795592, -38.72581004516907 25.80140526260921, -38.870782858128706 25.67861955336566 C-38.93008268103536 25.619319730459008, -38.98938250394201 25.560019907552356, -39.16299455336566 25.386407858128706 C-39.268740195088704 25.261554214872852, -39.37448583681175 25.136700571616995, -39.43007754698197 25.07106356344834 C-39.50497167400871 24.966167811981094, -39.57986580103544 24.861272060513848, -39.670207391312644 24.734740790612133 C-39.7243450830944 24.64388602099483, -39.77848277487616 24.55303125137753, -39.88174375603244 24.37973696518537 C-39.933822691506954 24.27320779996661, -39.985901626981466 24.166678634747853, -40.06324163327528 24.00847712326485 C-40.11754764834394 23.869302734359255, -40.17185366341259 23.730128345453664, -40.213461208503176 23.623497346023417 C-40.244631115899736 23.518799472652585, -40.2758010232963 23.414101599281754, -40.33137632969665 23.227427435703994 C-40.35649612019036 23.107625661410502, -40.38161591068406 22.98782388711701, -40.41618151701361 22.82297295140367 C-40.427933597155906 22.728692226187917, -40.4396856772982 22.63441150097216, -40.46729746503335 22.412896727361662 C-40.47143716188744 22.312808085373234, -40.475576858741526 22.212719443384806, -40.484375 22 C-40.484375 22, -40.484375 22, -40.484375 22 C-40.484375 8.693694884303875, -40.484375 -4.6126102313922495, -40.484375 -22 C-40.484375 -22, -40.484375 -22, -40.484375 -22 C-40.47946320962125 -22.118756142313966, -40.4745514192425 -22.237512284627933, -40.46729746503335 -22.41289672736166 C-40.45248715754795 -22.53171199355155, -40.43767685006255 -22.65052725974144, -40.41618151701361 -22.82297295140367 C-40.39157750712208 -22.940314855209728, -40.36697349723054 -23.05765675901578, -40.33137632969665 -23.227427435703994 C-40.30523716520387 -23.315227341531976, -40.27909800071108 -23.403027247359958, -40.213461208503176 -23.623497346023417 C-40.15898720377813 -23.76310225552127, -40.104513199053095 -23.902707165019123, -40.06324163327529 -24.008477123264846 C-40.002662728212 -24.13239325418148, -39.942083823148714 -24.25630938509811, -39.88174375603245 -24.379736965185366 C-39.81413681658965 -24.49319604896691, -39.746529877146855 -24.606655132748458, -39.670207391312644 -24.734740790612133 C-39.616430325523375 -24.810060257593236, -39.562653259734105 -24.88537972457434, -39.43007754698197 -25.07106356344834 C-39.33480670229727 -25.183549637211087, -39.239535857612566 -25.296035710973833, -39.16299455336566 -25.386407858128706 C-39.08781195026464 -25.461590461229726, -39.01262934716362 -25.53677306433075, -38.870782858128706 -25.678619553365657 C-38.75978074078409 -25.772633551076318, -38.64877862343946 -25.866647548786982, -38.55543856344834 -25.945702546981966 C-38.461679120517864 -26.012645502540888, -38.36791967758738 -26.07958845809981, -38.219115790612136 -26.185832391312644 C-38.087909072781585 -26.26401462521766, -37.95670235495104 -26.342196859122673, -37.864111965185366 -26.397368756032446 C-37.75987882526792 -26.448325233133524, -37.65564568535047 -26.499281710234598, -37.492852123264846 -26.578866633275286 C-37.38182448277212 -26.622189753032075, -37.27079684227939 -26.665512872788863, -37.10787234602342 -26.729086208503173 C-36.952677295471794 -26.775289776907712, -36.79748224492016 -26.821493345312252, -36.711802435703994 -26.847001329696653 C-36.616611622631254 -26.866960744283073, -36.521420809558514 -26.886920158869497, -36.30734795140367 -26.931806517013612 C-36.173704634207 -26.94846513912946, -36.04006131701033 -26.96512376124531, -35.89727172736166 -26.982922465033347 C-35.738264467489245 -26.989499053948872, -35.579257207616834 -26.996075642864394, -35.484375 -27 C-35.484375 -27, -35.484375 -27, -35.484375 -27\">\u003C/path>\u003Cpath style=\"\" stroke-dasharray=\"0 0\" fill=\"none\" stroke-width=\"1.3\" stroke=\"#9370DB\" d=\"M-35.484375 -27 C-10.896438166228354 -27, 13.691498667543293 -27, 35.484375 -27 M-35.484375 -27 C-15.259220377467006 -27, 4.965934245065988 -27, 35.484375 -27 M35.484375 -27 C35.484375 -27, 35.484375 -27, 35.484375 -27 M35.484375 -27 C35.484375 -27, 35.484375 -27, 35.484375 -27 M35.484375 -27 C35.62579619863413 -26.99415077595763, 35.76721739726825 -26.988301551915256, 35.89727172736166 -26.982922465033347 M35.484375 -27 C35.575262252957955 -26.996240875411317, 35.66614950591591 -26.99248175082263, 35.89727172736166 -26.982922465033347 M35.89727172736166 -26.982922465033347 C36.03334757152553 -26.965960628747247, 36.1694234156894 -26.94899879246115, 36.30734795140367 -26.931806517013612 M35.89727172736166 -26.982922465033347 C36.00910612337895 -26.968982322107497, 36.12094051939624 -26.95504217918165, 36.30734795140367 -26.931806517013612 M36.30734795140367 -26.931806517013612 C36.39030632240732 -26.91441197580919, 36.47326469341097 -26.897017434604773, 36.711802435703994 -26.847001329696653 M36.30734795140367 -26.931806517013612 C36.46782116792348 -26.89815882187219, 36.6282943844433 -26.864511126730772, 36.711802435703994 -26.847001329696653 M36.711802435703994 -26.847001329696653 C36.81046341607738 -26.817628683215094, 36.909124396450764 -26.788256036733536, 37.10787234602342 -26.729086208503173 M36.711802435703994 -26.847001329696653 C36.83907837173374 -26.80910964181292, 36.96635430776349 -26.771217953929188, 37.10787234602342 -26.729086208503173 M37.10787234602342 -26.729086208503173 C37.2616794160317 -26.669070503550444, 37.415486486039974 -26.60905479859771, 37.492852123264846 -26.578866633275286 M37.10787234602342 -26.729086208503173 C37.22843665439629 -26.682041869392187, 37.34900096276917 -26.634997530281204, 37.492852123264846 -26.578866633275286 M37.492852123264846 -26.578866633275286 C37.62512407914565 -26.51420281429897, 37.75739603502645 -26.449538995322655, 37.864111965185366 -26.397368756032446 M37.492852123264846 -26.578866633275286 C37.605909379864286 -26.523596308390296, 37.718966636463726 -26.468325983505302, 37.864111965185366 -26.397368756032446 M37.864111965185366 -26.397368756032446 C37.960203516545654 -26.340110619643056, 38.056295067905936 -26.282852483253667, 38.219115790612136 -26.185832391312644 M37.864111965185366 -26.397368756032446 C37.966787552875836 -26.336187385551717, 38.069463140566306 -26.27500601507099, 38.219115790612136 -26.185832391312644 M38.219115790612136 -26.185832391312644 C38.3017716442039 -26.126817246163146, 38.38442749779567 -26.067802101013648, 38.55543856344834 -25.94570254698197 M38.219115790612136 -26.185832391312644 C38.3346214291385 -26.10336295052887, 38.45012706766486 -26.020893509745093, 38.55543856344834 -25.94570254698197 M38.55543856344834 -25.94570254698197 C38.64012342999793 -25.873978123697295, 38.724808296547515 -25.80225370041262, 38.870782858128706 -25.678619553365657 M38.55543856344834 -25.94570254698197 C38.67168953261814 -25.84724299854416, 38.78794050178794 -25.74878345010635, 38.870782858128706 -25.678619553365657 M38.870782858128706 -25.678619553365657 C38.95220117807259 -25.597201233421774, 39.03361949801647 -25.51578291347789, 39.16299455336566 -25.386407858128706 M38.870782858128706 -25.678619553365657 C38.96167164332412 -25.587730768170243, 39.052560428519534 -25.496841982974832, 39.16299455336566 -25.386407858128706 M39.16299455336566 -25.386407858128706 C39.2517351396181 -25.281632045927424, 39.34047572587054 -25.176856233726145, 39.43007754698197 -25.07106356344834 M39.16299455336566 -25.386407858128706 C39.236348464863816 -25.29979905848097, 39.30970237636197 -25.21319025883324, 39.43007754698197 -25.07106356344834 M39.43007754698197 -25.07106356344834 C39.52471714806013 -24.93851255487447, 39.61935674913828 -24.8059615463006, 39.670207391312644 -24.734740790612136 M39.43007754698197 -25.07106356344834 C39.49621959089788 -24.97842586706846, 39.56236163481379 -24.885788170688578, 39.670207391312644 -24.734740790612136 M39.670207391312644 -24.734740790612136 C39.753400665199756 -24.595124462616614, 39.83659393908687 -24.45550813462109, 39.88174375603245 -24.37973696518537 M39.670207391312644 -24.734740790612136 C39.71366848156972 -24.661803670231357, 39.7571295718268 -24.58886654985058, 39.88174375603245 -24.37973696518537 M39.88174375603245 -24.37973696518537 C39.92459561481875 -24.292082087008943, 39.96744747360504 -24.204427208832513, 40.06324163327529 -24.008477123264846 M39.88174375603245 -24.37973696518537 C39.94805047798687 -24.24410439754862, 40.01435719994129 -24.10847182991187, 40.06324163327529 -24.008477123264846 M40.06324163327529 -24.008477123264846 C40.112716864247595 -23.88168297296991, 40.1621920952199 -23.754888822674967, 40.213461208503176 -23.623497346023417 M40.06324163327529 -24.008477123264846 C40.10906830319822 -23.89103343357339, 40.15489497312115 -23.77358974388194, 40.213461208503176 -23.623497346023417 M40.213461208503176 -23.623497346023417 C40.25184828535602 -23.49455742777847, 40.29023536220886 -23.36561750953353, 40.33137632969665 -23.227427435703994 M40.213461208503176 -23.623497346023417 C40.24297495335097 -23.524362424592297, 40.272488698198764 -23.42522750316118, 40.33137632969665 -23.227427435703994 M40.33137632969665 -23.227427435703994 C40.34931890112556 -23.14185538871146, 40.36726147255445 -23.05628334171892, 40.41618151701361 -22.82297295140367 M40.33137632969665 -23.227427435703994 C40.3594354972295 -23.09360712950057, 40.38749466476235 -22.95978682329714, 40.41618151701361 -22.82297295140367 M40.41618151701361 -22.82297295140367 C40.43214276591476 -22.69492429078116, 40.448104014815904 -22.56687563015865, 40.46729746503335 -22.412896727361662 M40.41618151701361 -22.82297295140367 C40.4283369093389 -22.72545666579001, 40.4404923016642 -22.627940380176344, 40.46729746503335 -22.412896727361662 M40.46729746503335 -22.412896727361662 C40.47393967083503 -22.252302997450748, 40.48058187663672 -22.091709267539837, 40.484375 -22 M40.46729746503335 -22.412896727361662 C40.472133370195344 -22.29597532043026, 40.47696927535735 -22.179053913498855, 40.484375 -22 M40.484375 -22 C40.484375 -22, 40.484375 -22, 40.484375 -22 M40.484375 -22 C40.484375 -22, 40.484375 -22, 40.484375 -22 M40.484375 -22 C40.484375 -6.928430374493935, 40.484375 8.14313925101213, 40.484375 22 M40.484375 -22 C40.484375 -6.966786479073644, 40.484375 8.066427041852712, 40.484375 22 M40.484375 22 C40.484375 22, 40.484375 22, 40.484375 22 M40.484375 22 C40.484375 22, 40.484375 22, 40.484375 22 M40.484375 22 C40.47915372934044 22.126238685630742, 40.47393245868087 22.252477371261485, 40.46729746503335 22.412896727361662 M40.484375 22 C40.47899246690874 22.13013765175338, 40.473609933817485 22.26027530350676, 40.46729746503335 22.412896727361662 M40.46729746503335 22.412896727361662 C40.453388470411454 22.524481237005617, 40.439479475789554 22.63606574664957, 40.41618151701361 22.82297295140367 M40.46729746503335 22.412896727361662 C40.45592765541079 22.504110698318325, 40.44455784578823 22.595324669274987, 40.41618151701361 22.82297295140367 M40.41618151701361 22.82297295140367 C40.38333871573435 22.979607453073193, 40.35049591445509 23.13624195474271, 40.33137632969665 23.227427435703994 M40.41618151701361 22.82297295140367 C40.383395733728584 22.97933552178945, 40.35060995044356 23.13569809217523, 40.33137632969665 23.227427435703994 M40.33137632969665 23.227427435703994 C40.29589373474734 23.346611371209743, 40.26041113979802 23.46579530671549, 40.213461208503176 23.623497346023417 M40.33137632969665 23.227427435703994 C40.291448451487355 23.361542814474227, 40.25152057327806 23.495658193244463, 40.213461208503176 23.623497346023417 M40.213461208503176 23.623497346023417 C40.16275052868642 23.753457680354003, 40.11203984886967 23.88341801468459, 40.06324163327529 24.008477123264846 M40.213461208503176 23.623497346023417 C40.15567667225923 23.77158642068259, 40.0978921360153 23.91967549534176, 40.06324163327529 24.008477123264846 M40.06324163327529 24.008477123264846 C39.99103317869094 24.15618187795155, 39.918824724106585 24.303886632638257, 39.88174375603245 24.379736965185366 M40.06324163327529 24.008477123264846 C40.017855073481186 24.101316815224052, 39.97246851368708 24.194156507183262, 39.88174375603245 24.379736965185366 M39.88174375603245 24.379736965185366 C39.82438664545533 24.475994616664234, 39.7670295348782 24.5722522681431, 39.670207391312644 24.734740790612133 M39.88174375603245 24.379736965185366 C39.80059340037218 24.51592483402909, 39.71944304471191 24.652112702872813, 39.670207391312644 24.734740790612133 M39.670207391312644 24.734740790612133 C39.58252529140465 24.857547212493408, 39.494843191496656 24.980353634374687, 39.43007754698197 25.07106356344834 M39.670207391312644 24.734740790612133 C39.57517262119109 24.867845267867853, 39.48013785106954 25.000949745123574, 39.43007754698197 25.07106356344834 M39.43007754698197 25.07106356344834 C39.34391723609699 25.172792850280047, 39.257756925212014 25.27452213711175, 39.16299455336566 25.386407858128706 M39.43007754698197 25.07106356344834 C39.327731940474145 25.19190279271132, 39.22538633396631 25.3127420219743, 39.16299455336566 25.386407858128706 M39.16299455336566 25.386407858128706 C39.08339419834047 25.46600821315389, 39.003793843315286 25.545608568179077, 38.870782858128706 25.678619553365657 M39.16299455336566 25.386407858128706 C39.05534734057675 25.494055070917607, 38.947700127787854 25.601702283706512, 38.870782858128706 25.678619553365657 M38.870782858128706 25.678619553365657 C38.77943024078226 25.75599127350508, 38.688077623435824 25.833362993644503, 38.55543856344834 25.94570254698197 M38.870782858128706 25.678619553365657 C38.802565700247385 25.736396538871002, 38.73434854236606 25.794173524376347, 38.55543856344834 25.94570254698197 M38.55543856344834 25.94570254698197 C38.455202000458506 26.017270077375496, 38.35496543746868 26.088837607769022, 38.219115790612136 26.185832391312644 M38.55543856344834 25.94570254698197 C38.47253169151087 26.004896915785487, 38.3896248195734 26.064091284589004, 38.219115790612136 26.185832391312644 M38.219115790612136 26.185832391312644 C38.142785454921494 26.231315399025107, 38.06645511923086 26.276798406737573, 37.864111965185366 26.397368756032446 M38.219115790612136 26.185832391312644 C38.082576493364265 26.267192152848985, 37.94603719611639 26.348551914385325, 37.864111965185366 26.397368756032446 M37.864111965185366 26.397368756032446 C37.754479477162796 26.450964813580754, 37.64484698914023 26.504560871129062, 37.492852123264846 26.578866633275286 M37.864111965185366 26.397368756032446 C37.781216434888314 26.437893911416893, 37.69832090459126 26.47841906680134, 37.492852123264846 26.578866633275286 M37.492852123264846 26.578866633275286 C37.36516195520652 26.6286914914638, 37.23747178714818 26.678516349652316, 37.10787234602342 26.729086208503173 M37.492852123264846 26.578866633275286 C37.41475611718988 26.60933978940738, 37.33666011111491 26.63981294553947, 37.10787234602342 26.729086208503173 M37.10787234602342 26.729086208503173 C37.00101691542911 26.760898448515416, 36.89416148483481 26.79271068852766, 36.711802435703994 26.847001329696653 M37.10787234602342 26.729086208503173 C36.96180640434379 26.772571923440477, 36.81574046266415 26.816057638377778, 36.711802435703994 26.847001329696653 M36.711802435703994 26.847001329696653 C36.56373989271091 26.878046780249328, 36.41567734971783 26.909092230802006, 36.30734795140367 26.931806517013612 M36.711802435703994 26.847001329696653 C36.55875847986334 26.879091272685535, 36.405714524022684 26.911181215674418, 36.30734795140367 26.931806517013612 M36.30734795140367 26.931806517013612 C36.16927028802687 26.94901787980438, 36.031192624650075 26.966229242595148, 35.89727172736166 26.982922465033347 M36.30734795140367 26.931806517013612 C36.18935510953944 26.94651430941373, 36.071362267675205 26.961222101813842, 35.89727172736166 26.982922465033347 M35.89727172736166 26.982922465033347 C35.74190193871006 26.98934860702632, 35.58653215005845 26.99577474901929, 35.484375 27 M35.89727172736166 26.982922465033347 C35.788558237609955 26.987418888229637, 35.679844747858255 26.991915311425927, 35.484375 27 M35.484375 27 C35.484375 27, 35.484375 27, 35.484375 27 M35.484375 27 C35.484375 27, 35.484375 27, 35.484375 27 M35.484375 27 C19.932496674335482 27, 4.380618348670961 27, -35.484375 27 M35.484375 27 C8.519786010580084 27, -18.44480297883983 27, -35.484375 27 M-35.484375 27 C-35.484375 27, -35.484375 27, -35.484375 27 M-35.484375 27 C-35.484375 27, -35.484375 27, -35.484375 27 M-35.484375 27 C-35.57282986161133 26.996341479861584, -35.66128472322266 26.992682959723172, -35.89727172736166 26.982922465033347 M-35.484375 27 C-35.605428066784405 26.994993208122427, -35.72648113356881 26.989986416244854, -35.89727172736166 26.982922465033347 M-35.89727172736166 26.982922465033347 C-36.060580367325535 26.962566064290854, -36.22388900728941 26.942209663548365, -36.30734795140367 26.931806517013612 M-35.89727172736166 26.982922465033347 C-36.02220086427902 26.96735006435653, -36.14713000119638 26.951777663679714, -36.30734795140367 26.931806517013612 M-36.30734795140367 26.931806517013612 C-36.45294638708225 26.90127773543232, -36.59854482276083 26.87074895385103, -36.711802435703994 26.847001329696653 M-36.30734795140367 26.931806517013612 C-36.39365391392547 26.913710059680735, -36.479959876447275 26.895613602347858, -36.711802435703994 26.847001329696653 M-36.711802435703994 26.847001329696653 C-36.79328049744736 26.822744259733096, -36.874758559190724 26.798487189769535, -37.10787234602342 26.729086208503173 M-36.711802435703994 26.847001329696653 C-36.838374533350375 26.809319183578435, -36.96494663099676 26.771637037460216, -37.10787234602342 26.729086208503173 M-37.10787234602342 26.729086208503173 C-37.2460244080786 26.675179106609423, -37.38417647013378 26.621272004715678, -37.492852123264846 26.578866633275286 M-37.10787234602342 26.729086208503173 C-37.25541989999858 26.67151297428583, -37.40296745397373 26.613939740068485, -37.492852123264846 26.578866633275286 M-37.492852123264846 26.578866633275286 C-37.58923208013284 26.531749343428352, -37.68561203700082 26.484632053581414, -37.864111965185366 26.397368756032446 M-37.492852123264846 26.578866633275286 C-37.59655205826536 26.52817082417444, -37.70025199326587 26.47747501507359, -37.864111965185366 26.397368756032446 M-37.864111965185366 26.397368756032446 C-37.997016438350144 26.318174879531313, -38.12992091151492 26.23898100303018, -38.219115790612136 26.185832391312644 M-37.864111965185366 26.397368756032446 C-37.982735779707106 26.3266843050608, -38.101359594228846 26.255999854089154, -38.219115790612136 26.185832391312644 M-38.219115790612136 26.185832391312644 C-38.28764101452978 26.136906321830924, -38.35616623844743 26.087980252349205, -38.55543856344834 25.94570254698197 M-38.219115790612136 26.185832391312644 C-38.31824529381819 26.11505528641217, -38.41737479702424 26.044278181511697, -38.55543856344834 25.94570254698197 M-38.55543856344834 25.94570254698197 C-38.62450199381704 25.887208805241755, -38.693565424185735 25.82871506350154, -38.870782858128706 25.67861955336566 M-38.55543856344834 25.94570254698197 C-38.63669661652871 25.87688048665538, -38.71795466960908 25.80805842632879, -38.870782858128706 25.67861955336566 M-38.870782858128706 25.67861955336566 C-38.962397226396284 25.58700518509808, -39.05401159466387 25.495390816830493, -39.16299455336566 25.386407858128706 M-38.870782858128706 25.67861955336566 C-38.94250090396707 25.606901507527294, -39.01421894980544 25.535183461688927, -39.16299455336566 25.386407858128706 M-39.16299455336566 25.386407858128706 C-39.24565826044474 25.288807003609428, -39.328321967523834 25.19120614909015, -39.43007754698197 25.07106356344834 M-39.16299455336566 25.386407858128706 C-39.249067179968726 25.284782099933018, -39.3351398065718 25.183156341737327, -39.43007754698197 25.07106356344834 M-39.43007754698197 25.07106356344834 C-39.52541463374127 24.937535665396407, -39.620751720500564 24.804007767344473, -39.670207391312644 24.734740790612133 M-39.43007754698197 25.07106356344834 C-39.489112930776216 24.988379363870926, -39.54814831457046 24.905695164293512, -39.670207391312644 24.734740790612133 M-39.670207391312644 24.734740790612133 C-39.741424092734654 24.615223744582828, -39.81264079415666 24.49570669855352, -39.88174375603244 24.37973696518537 M-39.670207391312644 24.734740790612133 C-39.73912046034849 24.6190897385482, -39.80803352938434 24.503438686484266, -39.88174375603244 24.37973696518537 M-39.88174375603244 24.37973696518537 C-39.944790761735526 24.250772253716203, -40.00783776743861 24.121807542247037, -40.06324163327528 24.00847712326485 M-39.88174375603244 24.37973696518537 C-39.93878785644681 24.263051392747514, -39.995831956861174 24.14636582030966, -40.06324163327528 24.00847712326485 M-40.06324163327528 24.00847712326485 C-40.11854790885128 23.86673928637508, -40.173854184427285 23.72500144948531, -40.213461208503176 23.623497346023417 M-40.06324163327528 24.00847712326485 C-40.09338138118997 23.931235569221656, -40.12352112910467 23.853994015178465, -40.213461208503176 23.623497346023417 M-40.213461208503176 23.623497346023417 C-40.25740119222532 23.475905542392802, -40.30134117594747 23.328313738762187, -40.33137632969665 23.227427435703994 M-40.213461208503176 23.623497346023417 C-40.239287572555035 23.536748118355543, -40.2651139366069 23.449998890687667, -40.33137632969665 23.227427435703994 M-40.33137632969665 23.227427435703994 C-40.36200305562485 23.08136188201567, -40.39262978155303 22.935296328327343, -40.41618151701361 22.82297295140367 M-40.33137632969665 23.227427435703994 C-40.36043968644032 23.088817931548732, -40.38950304318399 22.950208427393466, -40.41618151701361 22.82297295140367 M-40.41618151701361 22.82297295140367 C-40.43284773037933 22.6892687336231, -40.449513943745046 22.555564515842526, -40.46729746503335 22.412896727361662 M-40.41618151701361 22.82297295140367 C-40.43636972406451 22.661013640497096, -40.45655793111542 22.49905432959052, -40.46729746503335 22.412896727361662 M-40.46729746503335 22.412896727361662 C-40.47148275489729 22.311705748027926, -40.475668044761235 22.21051476869419, -40.484375 22 M-40.46729746503335 22.412896727361662 C-40.47291193329297 22.277151400252134, -40.478526401552585 22.141406073142605, -40.484375 22 M-40.484375 22 C-40.484375 22, -40.484375 22, -40.484375 22 M-40.484375 22 C-40.484375 22, -40.484375 22, -40.484375 22 M-40.484375 22 C-40.484375 12.487644612724708, -40.484375 2.9752892254494157, -40.484375 -22 M-40.484375 22 C-40.484375 6.742172224375171, -40.484375 -8.515655551249658, -40.484375 -22 M-40.484375 -22 C-40.484375 -22, -40.484375 -22, -40.484375 -22 M-40.484375 -22 C-40.484375 -22, -40.484375 -22, -40.484375 -22 M-40.484375 -22 C-40.48051567739933 -22.093309817532866, -40.47665635479866 -22.186619635065732, -40.46729746503335 -22.41289672736166 M-40.484375 -22 C-40.47989259112719 -22.10837465464982, -40.47541018225437 -22.216749309299637, -40.46729746503335 -22.41289672736166 M-40.46729746503335 -22.41289672736166 C-40.447655733730976 -22.57047195228, -40.428014002428604 -22.728047177198334, -40.41618151701361 -22.82297295140367 M-40.46729746503335 -22.41289672736166 C-40.44857928670973 -22.563062775048557, -40.42986110838612 -22.713228822735456, -40.41618151701361 -22.82297295140367 M-40.41618151701361 -22.82297295140367 C-40.38535099881927 -22.97001043497647, -40.35452048062492 -23.117047918549265, -40.33137632969665 -23.227427435703994 M-40.41618151701361 -22.82297295140367 C-40.38256390285418 -22.983302705142, -40.34894628869475 -23.14363245888033, -40.33137632969665 -23.227427435703994 M-40.33137632969665 -23.227427435703994 C-40.28644090592777 -23.378362863511462, -40.241505482158885 -23.529298291318934, -40.213461208503176 -23.623497346023417 M-40.33137632969665 -23.227427435703994 C-40.2885853689113 -23.371159739323705, -40.24579440812595 -23.514892042943416, -40.213461208503176 -23.623497346023417 M-40.213461208503176 -23.623497346023417 C-40.16717939150785 -23.742107477693402, -40.120897574512526 -23.86071760936339, -40.06324163327529 -24.008477123264846 M-40.213461208503176 -23.623497346023417 C-40.16326618384231 -23.75213616944741, -40.113071159181445 -23.880774992871405, -40.06324163327529 -24.008477123264846 M-40.06324163327529 -24.008477123264846 C-39.99328388969872 -24.15157797499879, -39.92332614612215 -24.294678826732735, -39.88174375603245 -24.379736965185366 M-40.06324163327529 -24.008477123264846 C-39.991431913265565 -24.155366253342635, -39.91962219325585 -24.302255383420427, -39.88174375603245 -24.379736965185366 M-39.88174375603245 -24.379736965185366 C-39.811846504534685 -24.497039688532208, -39.741949253036914 -24.614342411879054, -39.670207391312644 -24.734740790612133 M-39.88174375603245 -24.379736965185366 C-39.835537398288835 -24.457281238860237, -39.78933104054523 -24.534825512535104, -39.670207391312644 -24.734740790612133 M-39.670207391312644 -24.734740790612133 C-39.620517878815164 -24.804335283002754, -39.570828366317684 -24.87392977539337, -39.43007754698197 -25.07106356344834 M-39.670207391312644 -24.734740790612133 C-39.59349545589269 -24.842182541144986, -39.51678352047274 -24.949624291677843, -39.43007754698197 -25.07106356344834 M-39.43007754698197 -25.07106356344834 C-39.33676204126293 -25.18124097285684, -39.24344653554389 -25.29141838226534, -39.16299455336566 -25.386407858128706 M-39.43007754698197 -25.07106356344834 C-39.33930922553755 -25.17823351806676, -39.248540904093126 -25.285403472685182, -39.16299455336566 -25.386407858128706 M-39.16299455336566 -25.386407858128706 C-39.0923163341119 -25.457086077382463, -39.02163811485814 -25.527764296636217, -38.870782858128706 -25.678619553365657 M-39.16299455336566 -25.386407858128706 C-39.08833429102139 -25.461068120472973, -39.01367402867712 -25.535728382817243, -38.870782858128706 -25.678619553365657 M-38.870782858128706 -25.678619553365657 C-38.749922816698884 -25.780982786879637, -38.62906277526907 -25.883346020393613, -38.55543856344834 -25.945702546981966 M-38.870782858128706 -25.678619553365657 C-38.77711418313812 -25.75795287426787, -38.68344550814753 -25.837286195170083, -38.55543856344834 -25.945702546981966 M-38.55543856344834 -25.945702546981966 C-38.4349030519319 -26.031763248053963, -38.314367540415454 -26.117823949125963, -38.219115790612136 -26.185832391312644 M-38.55543856344834 -25.945702546981966 C-38.448576232834995 -26.02200078453097, -38.34171390222165 -26.09829902207997, -38.219115790612136 -26.185832391312644 M-38.219115790612136 -26.185832391312644 C-38.08400176325581 -26.266342876334175, -37.9488877358995 -26.346853361355702, -37.864111965185366 -26.397368756032446 M-38.219115790612136 -26.185832391312644 C-38.07739940906798 -26.270277025499492, -37.93568302752383 -26.354721659686337, -37.864111965185366 -26.397368756032446 M-37.864111965185366 -26.397368756032446 C-37.73134941786232 -26.462272410550632, -37.59858687053927 -26.527176065068815, -37.492852123264846 -26.578866633275286 M-37.864111965185366 -26.397368756032446 C-37.787835166346525 -26.434658210772593, -37.711558367507685 -26.471947665512737, -37.492852123264846 -26.578866633275286 M-37.492852123264846 -26.578866633275286 C-37.409251942136464 -26.61148752517789, -37.325651761008075 -26.644108417080492, -37.10787234602342 -26.729086208503173 M-37.492852123264846 -26.578866633275286 C-37.39271661060205 -26.617939631564226, -37.29258109793926 -26.65701262985317, -37.10787234602342 -26.729086208503173 M-37.10787234602342 -26.729086208503173 C-37.02565791187615 -26.753562506029812, -36.94344347772889 -26.778038803556456, -36.711802435703994 -26.847001329696653 M-37.10787234602342 -26.729086208503173 C-36.955429159817186 -26.77447051139589, -36.80298597361095 -26.819854814288608, -36.711802435703994 -26.847001329696653 M-36.711802435703994 -26.847001329696653 C-36.63082833191703 -26.86397981381794, -36.549854228130066 -26.880958297939227, -36.30734795140367 -26.931806517013612 M-36.711802435703994 -26.847001329696653 C-36.600212407603486 -26.870399298079025, -36.48862237950298 -26.8937972664614, -36.30734795140367 -26.931806517013612 M-36.30734795140367 -26.931806517013612 C-36.19822817695364 -26.945408282713984, -36.08910840250362 -26.959010048414356, -35.89727172736166 -26.982922465033347 M-36.30734795140367 -26.931806517013612 C-36.19456583703479 -26.94586479290879, -36.081783722665904 -26.95992306880397, -35.89727172736166 -26.982922465033347 M-35.89727172736166 -26.982922465033347 C-35.7775692025998 -26.987873398079678, -35.65786667783794 -26.992824331126013, -35.484375 -27 M-35.89727172736166 -26.982922465033347 C-35.78281743056067 -26.987656329765557, -35.66836313375968 -26.99239019449777, -35.484375 -27 M-35.484375 -27 C-35.484375 -27, -35.484375 -27, -35.484375 -27 M-35.484375 -27 C-35.484375 -27, -35.484375 -27, -35.484375 -27\">\u003C/path>\u003C/g>\u003Cg transform=\"translate(-25.484375, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"50.96875\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>,.?!+-*ز\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(1648.609375, 228.375)\" id=\"flowchart-cyr-12\" class=\"node default\">\u003Crect height=\"54\" width=\"107.109375\" y=\"-27\" x=\"-53.5546875\" style=\"\" class=\"basic label-container\">\u003C/rect>\u003Cg transform=\"translate(-23.5546875, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"47.109375\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>Cyrillic\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003Cg transform=\"translate(1648.609375, 580.8125)\" id=\"flowchart-cyr2-13\" class=\"node default\">\u003Ccircle cy=\"0\" cx=\"0\" r=\"82.0625\" style=\"\" class=\"basic label-container\">\u003C/circle>\u003Cg transform=\"translate(-74.5625, -12)\" style=\"\" class=\"label\">\u003Crect>\u003C/rect>\u003CforeignObject height=\"24\" width=\"149.125\">\u003Cdiv style=\"display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;\" xmlns=\"http://www.w3.org/1999/xhtml\">\u003Cspan class=\"nodeLabel\">\u003Cp>Circle shape Начало\u003C/p>\u003C/span>\u003C/div>\u003C/foreignObject>\u003C/g>\u003C/g>\u003C/g>\u003C/g>\u003C/g>\u003C/svg>\n\u003Csection data-footnotes=\"\" class=\"footnotes\">\u003Ch2 class=\"sr-only\" id=\"footnote-label\">Footnotes\u003C/h2>\n\u003Col>\n\u003Cli id=\"user-content-fn-first\">\n\u003Cp>Footnote \u003Cstrong>can have markup\u003C/strong>\u003C/p>\n\u003Cp>and multiple paragraphs. \u003Ca href=\"#user-content-fnref-first\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-second\">\n\u003Cp>Footnote text. \u003Ca href=\"#user-content-fnref-second\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩\u003C/a> \u003Ca href=\"#user-content-fnref-second-2\" data-footnote-backref=\"\" aria-label=\"Back to reference 2-2\" class=\"data-footnote-backref\">↩\u003Csup>2\u003C/sup>\u003C/a>\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/section>",{"headings":335,"localImagePaths":414,"remoteImagePaths":415,"frontmatter":416,"imagePaths":419},[336,340,343,346,349,352,355,358,361,364,367,370,373,376,379,382,385,388,391,394,397,400,403,406,409,412],{"depth":337,"slug":338,"text":339},1,"h1-heading-8","h1 Heading 8-)",{"depth":124,"slug":341,"text":342},"h2-heading","h2 Heading",{"depth":238,"slug":344,"text":345},"h3-heading","h3 Heading",{"depth":208,"slug":347,"text":348},"h4-heading","h4 Heading",{"depth":114,"slug":350,"text":351},"h5-heading","h5 Heading",{"depth":305,"slug":353,"text":354},"h6-heading","h6 Heading",{"depth":124,"slug":356,"text":357},"horizontal-rules","Horizontal Rules",{"depth":124,"slug":359,"text":360},"typographic-replacements","Typographic replacements",{"depth":124,"slug":362,"text":363},"emphasis","Emphasis",{"depth":124,"slug":365,"text":366},"blockquotes","Blockquotes",{"depth":124,"slug":368,"text":369},"lists","Lists",{"depth":124,"slug":371,"text":372},"code","Code",{"depth":124,"slug":374,"text":375},"tables","Tables",{"depth":124,"slug":377,"text":378},"links","Links",{"depth":124,"slug":380,"text":381},"images","Images",{"depth":124,"slug":383,"text":384},"plugins","Plugins",{"depth":238,"slug":386,"text":387},"emojies","Emojies",{"depth":238,"slug":389,"text":390},"subscript--superscript","Subscript / Superscript",{"depth":238,"slug":392,"text":393},"ins","\u003Cins>",{"depth":238,"slug":395,"text":396},"mark","\u003Cmark>",{"depth":238,"slug":398,"text":399},"footnotes","Footnotes",{"depth":238,"slug":401,"text":402},"definition-lists","Definition lists",{"depth":238,"slug":404,"text":405},"abbreviations","Abbreviations",{"depth":238,"slug":407,"text":408},"custom-containers","Custom containers",{"depth":124,"slug":410,"text":411},"mermaid","Mermaid",{"depth":124,"slug":413,"text":399},"footnote-label",[],[],{"slug":321,"title":324,"pubDate":417,"draft":15,"tags":418},"2000-01-01",[327,328],[],"markdown-test/markdown-test.md"]